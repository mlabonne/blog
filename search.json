[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "üëã Greetings! My name is Maxime Labonne, and I am currently a senior applied researcher at JPMorgan Chase. I hold a M.Sc. degree in computer science from INSA CVL, and a Ph.D.¬†in machine learning and cyber security from the Polytechnic Institute of Paris.\nIn this blog, I aim to provide practical tutorials and guides on AI and machine learning. I believe in starting with implementation and practice, and then diving into explanations. By retracing the thought process of the original authors of the algorithms we use every day, we can gain a deeper understanding of their design and the importance of each component.\nI hope we can have fun together and learn a few things along the way!\nIf you want to contact me, feel free to send a mail at this address.\n\nCredits:\n\nEmojis used in figures are designed by OpenMoji, the open-source emoji and icon project. License: CC BY-SA 4.0.\nVector icons are provided by Streamline (https://streamlinehq.com). License: CC BY-SA 4.0."
  },
  {
    "objectID": "book.html",
    "href": "book.html",
    "title": "Book",
    "section": "",
    "text": "I am thrilled to introduce my book on graph neural networks, which is the result of almost a year‚Äôs worth of hard work, research, and collaboration with fellow experts in the field. As someone who‚Äôs passionate about GNNs, I wanted to create a comprehensive guide that could help both beginners and advanced practitioners. This book has been carefully crafted to provide a step-by-step guide for those new to the world of GNNs, while also offering advanced use cases and examples for experienced practitioners. What‚Äôs more, the entire code with examples and use cases is freely available on Github, making it easy for you to get started with implementing GNNs in Python.\nIf you‚Äôre interested in graph neural networks, I highly recommend checking it out. I‚Äôm confident that you‚Äôll find it to be an invaluable resource as you explore this exciting and rapidly growing field.\nUnlock the power of graph neural networks to analyze complex data and solve real-world problems with this comprehensive guide."
  },
  {
    "objectID": "book.html#key-features",
    "href": "book.html#key-features",
    "title": "Book",
    "section": "üìò Key Features",
    "text": "üìò Key Features\n\nImplement state-of-the-art graph neural network architectures in Python\nCreate your own graph datasets from tabular data\nBuild powerful traffic forecasting, recommender systems, and anomaly detection applications"
  },
  {
    "objectID": "book.html#book-description",
    "href": "book.html#book-description",
    "title": "Book",
    "section": "üíº Book Description",
    "text": "üíº Book Description\nGraph neural networks are a highly effective tool for analyzing data that can be represented as a graph, such as social networks, chemical compounds, or transportation networks. The past few years have seen an explosion in the use of graph neural networks, with their application ranging from natural language processing and computer vision to recommendation systems and drug discovery.\nHands-On Graph Neural Networks Using Python begins with the fundamentals of graph theory and shows you how to create graph datasets from tabular data. As you advance, you‚Äôll explore major graph neural network architectures and learn essential concepts such as graph convolution, self-attention, link prediction, and heterogeneous graphs. Finally, the book proposes applications to solve real-life problems, enabling you to build a professional portfolio. The code is readily available online and can be easily adapted to other datasets and apps.\nBy the end of this book, you‚Äôll have learned to create graph datasets, implement graph neural networks using Python and PyTorch Geometric, and apply them to solve real-world problems, along with building and training graph neural network models for node and graph classification, link prediction, and much more."
  },
  {
    "objectID": "book.html#what-you-will-learn",
    "href": "book.html#what-you-will-learn",
    "title": "Book",
    "section": "üîë What you will learn",
    "text": "üîë What you will learn\n\nUnderstand the fundamental concepts of graph neural networks\nImplement graph neural networks using Python and PyTorch Geometric\nClassify nodes, graphs, and edges using millions of samples\nPredict and generate realistic graph topologies\nCombine heterogeneous sources to improve performance\nForecast future events using topological information\nApply graph neural networks to solve real-world problems"
  },
  {
    "objectID": "book.html#who-this-book-is-for",
    "href": "book.html#who-this-book-is-for",
    "title": "Book",
    "section": "üí° Who this book is for",
    "text": "üí° Who this book is for\nThis book is for machine learning practitioners and data scientists interested in learning about graph neural networks and their applications, as well as students looking for a comprehensive reference on this rapidly growing field. Whether you‚Äôre new to graph neural networks or looking to take your knowledge to the next level, this book has something for you. Basic knowledge of machine learning and Python programming will help you get the most out of this book."
  },
  {
    "objectID": "book.html#get-your-copy-now",
    "href": "book.html#get-your-copy-now",
    "title": "Book",
    "section": "üîó Get your copy now!",
    "text": "üîó Get your copy now!\nAmazon US | Amazon EU | Packt"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Articles",
    "section": "",
    "text": "Create a Bot to Find Diamonds in Minecraft\n\n\n\n\n\nReinforcement Learning and Behavior Cloning in Python with MineRL\n\n\n\n\n\n\nMay 25, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to Constraint Programming in Python\n\n\n\n\n\nThe Programming Paradigm to Find One Solution Among 8,080,104 Candidates\n\n\n\n\n\n\nMay 2, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nGIN: How to Design the Most Powerful Graph Neural Network\n\n\n\n\n\nGraph Neural Network Course: Chapter 4\n\n\n\n\n\n\nApr 25, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nGraphSAGE: Scaling up Graph Neural Networks\n\n\n\n\n\nGraph Neural Network Course: Chapter 3\n\n\n\n\n\n\nApr 6, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nWhat is a Tensor in Machine Learning?\n\n\n\n\n\nThe difference between tensors, arrays, and¬†matrices\n\n\n\n\n\n\nMar 28, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nEfficiently iterating over rows in a Pandas DataFrame\n\n\n\n\n\nNever use iterrows and itertuples again!\n\n\n\n\n\n\nMar 21, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nGraph Attention Networks: Self-Attention for GNNs\n\n\n\n\n\nGraph Neural Network Course: Chapter 2\n\n\n\n\n\n\nMar 9, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nInteger vs.¬†Linear Programming in Python\n\n\n\n\n\nMixed Integer Programming for optimization with Google OR-Tools\n\n\n\n\n\n\nMar 5, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to Linear Programming in Python\n\n\n\n\n\nA guide to mathematical optimization with Google OR-Tools\n\n\n\n\n\n\nMar 2, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nGraph Convolutional Networks: Introduction to GNNs\n\n\n\n\n\nGraph Neural Network Course: Chapter 1\n\n\n\n\n\n\nFeb 20, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\n  \n\n\n\n\nQ-learning for beginners\n\n\n\n\n\nTrain an AI to solve the Frozen Lake environment\n\n\n\n\n\n\nFeb 13, 2022\n\n\nMaxime Labonne\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2022-02-13-q_learning.html",
    "href": "posts/2022-02-13-q_learning.html",
    "title": "Q-learning for beginners",
    "section": "",
    "text": "The goal of this article is to teach an AI how to solve the ‚ùÑÔ∏èFrozen Lake environment using reinforcement learning. Instead of reading Wikipedia articles and explaining formulas, we‚Äôre going to start from scratch and try to recreate the ü§ñQ-learning algorithm by ourselves. We‚Äôll not just understand how it works, but more importantly why it works: why was it designed that way? What are the hidden assumptions, the details that are never explained in regular courses and tutorials?\nAt the end of this article, you‚Äôll master the Q-learning algorithm and be able to apply it to other environments and real-world problems. It‚Äôs a cool mini-project that gives a better insight into how reinforcement learning works and can hopefully inspire ideas for original and creative applications.\nLet‚Äôs start by installing the ‚ùÑÔ∏èFrozen Lake environment and importing the necessary libraries: gym for the game, random to generate random numbers, and numpy to do some math.\n!pip install -q gym\n!pip install -q matplotlib\nimport gym\nimport random\nimport numpy as np"
  },
  {
    "objectID": "posts/2022-02-13-q_learning.html#i.-frozen-lake",
    "href": "posts/2022-02-13-q_learning.html#i.-frozen-lake",
    "title": "Q-learning for beginners",
    "section": "‚ùÑÔ∏è I. Frozen Lake",
    "text": "‚ùÑÔ∏è I. Frozen Lake\nNow, let‚Äôs talk about the game we‚Äôre going to be solving in this tutorial. ‚ùÑÔ∏èFrozen Lake is a simple environment composed of tiles, where the AI has to move from an initial tile to a goal. Tiles can be a safe frozen lake ‚úÖ, or a hole ‚ùå that gets you stuck forever. The AI, or agent, has 4 possible actions: go ‚óÄÔ∏èLEFT, üîΩDOWN, ‚ñ∂Ô∏èRIGHT, or üîºUP. The agent must learn to avoid holes in order to reach the goal in a minimal number of actions. By default, the environment is always in the same configuration. In the environment‚Äôs code, each tile is represented by a letter as follows:\nS F F F       (S: starting point, safe)\nF H F H       (F: frozen surface, safe)\nF F F H       (H: hole, stuck forever)\nH F F G       (G: goal, safe)\n\n\n\n\n\n\nWe can try to manually solve the example above to understand the game. Let‚Äôs see if the following sequence of actions is a correct solution: RIGHT \\(\\to\\) RIGHT \\(\\to\\) RIGHT \\(\\to\\) DOWN \\(\\to\\) DOWN \\(\\to\\) DOWN. Our agent starts on tile S, so we move right on a frozen surface ‚úÖ, then again ‚úÖ, then once more ‚úÖ, then we go down and find a hole ‚ùå.\nActually, it‚Äôs really easy to find several correct solutions: RIGHT \\(\\to\\) RIGHT \\(\\to\\) DOWN \\(\\to\\) DOWN \\(\\to\\) DOWN \\(\\to\\) RIGHT is an obvious one. But we could make a sequence of actions that loops around a hole 10 times before reaching the goal. This sequence is valid, but it doesn‚Äôt meet our final requirement: the agent needs to meet the goal in a minimum number of actions. In this example, the minimum number of actions to complete the game is 6. We need to remember this fact to check if our agent really masters ‚ùÑÔ∏èFrozen Lake or not.\n\n\n\n\n\n\nLet‚Äôs initialize the environment thanks to the gym library. There are two versions of the game: one with slippery ice, where selected actions have a random chance of being disregarded by the agent; and a non-slippery one, where actions cannot be ignored. We‚Äôll use the non-slippery one to begin with because it‚Äôs easier to understand.\n\n# Initialize the non-slippery Frozen Lake environment\nenvironment = gym.make(\"FrozenLake-v1\", is_slippery=False)\nenvironment.reset()\nenvironment.render()\n\n\nSFFF\nFHFH\nFFFH\nHFFG\n\n\nWe can see that the game that was created has the exact same configuration as in our example: it is the same puzzle. The position of our agent is indicated by a red rectangle. Solving this puzzle can be done with a simple script and if‚Ä¶else conditions, which would actually be useful to compare our AI to a simpler approach. However, we want to try a more exciting solution: reinforcement learning."
  },
  {
    "objectID": "posts/2022-02-13-q_learning.html#ii.-q-table",
    "href": "posts/2022-02-13-q_learning.html#ii.-q-table",
    "title": "Q-learning for beginners",
    "section": "üèÅ II. Q-table",
    "text": "üèÅ II. Q-table\nIn ‚ùÑÔ∏èFrozen Lake, there are 16 tiles, which means our agent can be found in 16 different positions, called states. For each state, there are 4 possible actions: go ‚óÄÔ∏èLEFT, üîΩDOWN, ‚ñ∂Ô∏èRIGHT, and üîºUP. Learning how to play Frozen Lake is like learning which action you should choose in every state. To know which action is the best in a given state, we would like to assign a quality value to our actions. We have 16 states and 4 actions, so want to calculate \\(16 \\times 4 = 64\\) values.\nA nice way of representing it is using a table, known as a Q-table, where rows list every state \\(s\\) and columns list every action \\(a\\). In this Q-table, each cell contains a value \\(Q(s, a)\\), which is the value (quality) of the action \\(a\\) in the state \\(s\\) (1 if it‚Äôs the best action possible, 0 if it‚Äôs really bad). When our agent is in a particular state \\(s\\), it just has to check this table to see which action has the highest value. Taking the action with the highest value makes sense but we‚Äôll see later that we can design something even better‚Ä¶\n\n\n\nState\n‚óÄÔ∏èLEFT\nüîΩDOWN\n‚ñ∂Ô∏èRIGHT\nüîºUP\n\n\n\n\nS=0\nQ(0, ‚óÄÔ∏è)\nQ(0, üîΩ)\nQ(0, ‚ñ∂Ô∏è)\nQ(0, üîº)\n\n\n1\nQ(1, ‚óÄÔ∏è)\nQ(1, üîΩ)\nQ(1, ‚ñ∂Ô∏è)\nQ(1, üîº)\n\n\n2\nQ(2, ‚óÄÔ∏è)\nQ(2, üîΩ)\nQ(2, ‚ñ∂Ô∏è)\nQ(2, üîº)\n\n\n‚Ä¶\n‚Ä¶\n‚Ä¶\n‚Ä¶\n‚Ä¶\n\n\n14\nQ(14, ‚óÄÔ∏è)\nQ(14, üîΩ)\nQ(14, ‚ñ∂Ô∏è)\nQ(14, üîº)\n\n\nG=15\nQ(15, ‚óÄÔ∏è)\nQ(15, üîΩ)\nQ(15, ‚ñ∂Ô∏è)\nQ(15, üîº)\n\n\n\n\nExample of Q-table, where each cell contains the value \\(Q(a, s)\\) of the action \\(a\\) (column) in a given state \\(s\\) (row)\n\nLet‚Äôs create our Q-table and fill it with zeros since we still have no idea of the value of each action in each state.\n\n# Initialize Q-table with zeros \n# Our table has the following dimensions:\n# (rows x columns) = (states x actions) = (16 x 4)\nqtable = np.zeros((16, 4))\n\n# Alternatively, the gym library can also directly g\n# give us the number of states and actions using \n# \"env.observation_space.n\" and \"env.action_space.n\"\nnb_states = environment.observation_space.n  # = 16\nnb_actions = environment.action_space.n      # = 4\nqtable = np.zeros((nb_states, nb_actions))\n\n# Let's see how it looks\nprint('Q-table =')\nprint(qtable)\n\nQ-table =\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n\nGreat! We have our Q-table with 16 rows (our 16 states) and 4 columns (our 4 actions) as expected. Let‚Äôs try to see what we can do next: every value is set to zero, so we have no information at all. Let‚Äôs say that the agent takes a random action: ‚óÄÔ∏èLEFT, üîΩDOWN, ‚ñ∂Ô∏èRIGHT, or üîºUP.\nWe can use the random library with the choice method to randomly choose an action.\n\nrandom.choice([\"LEFT\", \"DOWN\", \"RIGHT\", \"UP\"])\n\n'LEFT'\n\n\nWait, actually the agent is currently on the initial state S, which means only two actions are possible: ‚ñ∂Ô∏èRIGHT and üîΩDOWN. The agent can also take the actions üîºUP and ‚óÄÔ∏èLEFT, but it won‚Äôt move: its state doesn‚Äôt change. Therefore, we do not put any constraint on what actions are possible: the agent will naturally understand that some of them don‚Äôt do anything.\nWe can keep using random.choice(), but the gym library already implements a method to randomly choose an action. It might save us some hassle later, so let‚Äôs try it.\n\nenvironment.action_space.sample()\n\n0\n\n\nOops‚Ä¶ this time it‚Äôs a number. We could read gym‚Äôs documentation but it is quite scarce unfortunately. No worries though, we can check the source code on GitHub to understand what these numbers mean. It‚Äôs actually super straightforward:\n‚óÄÔ∏è LEFT = 0\nüîΩ DOWN = 1\n‚ñ∂Ô∏è RIGHT = 2\nüîº UP = 3\n\n\n\n\n\n\n\nOkay, now that we understand how gym connects numbers to directions, let‚Äôs try to use it to move our agent to the right ‚ñ∂Ô∏è. This time, it can be performed using the step(action) method. We can try to directly provide it the number 2, corresponding to the direction we chose (right), and check if the agent moved.\n\nenvironment.step(2)\nenvironment.render()\n\n  (Right)\nSFFF\nFHFH\nFFFH\nHFFG\n\n\nHuzzah! The red square moved from the initial state S to the right: our prediction was correct. And that‚Äôs all we need to know in order to interact with the environment:\n\nHow to randomly choose an action using action_space.sample();\nHow to implement this action and move our agent in the desired direction with step(action).\n\nTo be completely exhaustive, we can add:\n\nHow to display the current map to see what we‚Äôre doing with render();\nHow to restart the game when the agent falls into a hole or reaches the goal G with reset().\n\nNow that we understand how to interact with our gym environment, let‚Äôs go back to our algorithm. In reinforcement learning, agents are rewarded by the environment when they accomplish a predefined goal. In ‚ùÑÔ∏èFrozen Lake, the agent is only rewarded when it reaches the state G (see the source code). We cannot control this reward, it is set in the environment: it‚Äôs 1 when the agent reaches G, and 0 otherwise.\nLet‚Äôs print it every time we implement an action. The reward is given by the method step(action).\n\n# 1. Randomly choose an action using action_space.sample()\naction = environment.action_space.sample()\n\n# 2. Implement this action and move the agent in the desired direction\nnew_state, reward, done, info = environment.step(action)\n\n# Display the results (reward and map)\nenvironment.render()\nprint(f'Reward = {reward}')\n\n  (Left)\nSFFF\nFHFH\nFFFH\nHFFG\nReward = 0.0\n\n\nThe reward is indeed 0‚Ä¶ üò± wow, I guess we‚Äôre in a pickle, because only one state can give us a positive reward in the entire game. How are we supposed to take the right directions at the very beginning when the only validation we have is at the very end? If we ever want to see a reward of 1, we‚Äôd need to be lucky enough to find the correct sequence of actions by chance. Unfortunately, that‚Äôs exactly how it works‚Ä¶ the Q-table will remain filled with zeros until the agent randomly reaches the goal G.\nThe problem would be much simpler if we could have intermediate, smaller rewards to guide our path towards the goal G. Alas, this is actually one of the main issues of reinforcement learning: this phenomenon, called sparse rewards, makes agents very difficult to train on problems where the only reward is at the end of a long sequence of actions. Different techniques were proposed to mitigate this issue, but we‚Äôll talk about it another time."
  },
  {
    "objectID": "posts/2022-02-13-q_learning.html#iii.-q-learning",
    "href": "posts/2022-02-13-q_learning.html#iii.-q-learning",
    "title": "Q-learning for beginners",
    "section": "ü§ñ III. Q-learning",
    "text": "ü§ñ III. Q-learning\nLet‚Äôs go back to our problem. Okay, we need to be lucky enough to find the goal G by accident. But once it‚Äôs done, how to backpropagate the information to the initial state? The ü§ñQ-learning algorithm offers a clever solution to this issue. We need to update the value of our state-action pairs (each cell in the Q-table) considering 1/ the reward for reaching the next state, and 2/ the highest possible value in the next state.\n\n\n\n\n\n\nWe know we get a reward of 1 when we move to G. As we just said, the value of the state next to G (let‚Äôs call it G-1) with the relevant action to reach G is increased thanks to the reward. Okay good, end of the episode: the agent won and we restart the game. Now, the next time the agent is in a state next to G-1, it will increase the value of this state (let‚Äôs call it G-2) with the relevant action to reach G-1. The next time the agent is in a state next to G-2, it will do the same. Rinse and repeat, until the update reaches the initial state S.\nLet‚Äôs try to find the update formula to backpropagate the values from G to S. Remember: values denote the quality of an action in a specific state (0 if it‚Äôs terrible, 1 if it‚Äôs the best action possible in this state). We try to update the value of the action \\(a_t\\) (for example, \\(a_t = 0\\) if the action is left) in the state \\(s_t\\) (for example, \\(s_t = 0\\) when the agent is in the initial state S). This value is just a cell in our Q-table, corresponding to the row number \\(s_t\\) and the column number \\(a_t\\): this value is formally called \\(Q(s_t, a_t)\\).\nAs we said previously, we need to update it using 1/ the reward for the next state (formally noted \\(r_t\\)), and 2/ the maximum possible value in the next state (\\(max_aQ(s_{t+1},a)\\)). Therefore, the update formula must look like:\n\\[Q_{new}(s_t, a_t) = Q(s_t, a_t) + r_t + max_aQ(s_{t+1}, a)\\]\nThe new value is the current one + the reward + the highest value in the next state. We can manually try our formula to check if it looks correct: let‚Äôs pretend our agent is in the state G-1 next to the goal G for the first time. We can update the value corresponding to the winning action in this state G-1 with \\(Q_{new}(G-1, a_t) = Q(G-1, a_t) + r_t + max_aQ(G, a)\\), where \\(Q(G-1, a_t) = 0\\) and \\(max_aQ(G, a) = 0\\) because the Q-table is empty, and \\(r_t = 1\\) because we get the only reward in this environment. We obtain \\(Q_{new}(G-1, a_t) = 1\\). The next time the agent is in a state next to this one (G-2), we update it too using the formula and get the same result: \\(Q_{new}(G-2, a_t) = 1\\). In the end, we backpropagate ones in the Q-table from G to S. Okay it works, but the result is binary: either it‚Äôs the wrong state-action pair or the best one. We would like more nuance‚Ä¶\nActually, we almost found the true Q-learning update formula with common sense. The nuance we‚Äôre looking for adds two parameters: * \\(\\alpha\\) is the üí°learning rate (between \\(0\\) and \\(1\\)), which is how much we should change the original \\(Q(s_t, a_t)\\) value. If \\(\\alpha = 0\\), the value never changes, but if \\(\\alpha = 1\\), the value changes extremely fast. In our attempt, we didn‚Äôt limit the learning rate so \\(\\alpha = 1\\). But this is too fast in reality: the reward and the maximum value in the next state quickly overpower the current value. We need to find a balance between the importance of past and new knowledge. * \\(\\gamma\\) is the üìâdiscount factor (between \\(0\\) and \\(1\\)), which determines how much the agent cares about future rewards compared to immediate ones (as the saying goes, ‚Äúa bird in the hand is worth two in the bush‚Äù). If \\(\\gamma = 0\\), the agent only focuses on immediate rewards , but if \\(\\gamma = 1\\), any potential future reward has the same value than current ones. In ‚ùÑÔ∏èFrozen Lake, we want a high discount factor since there‚Äôs only one possible reward at the very end of the game.\nWith the real Q-learning algorithm, the new value is calculated as follows:\n\\[Q_{new}(s_t, a_t) = Q(s_t, a_t) + \\alpha \\cdot (r_t + \\gamma \\cdot max_aQ(s_{t+1},a) - Q(s_t, a_t))\\]\nOkay, let‚Äôs try this new formula before implementing it. Once again, we can pretend that our agent is next to the goal G for the first time. We can update the state-action pair to win the game using our formula: \\(Q_{new}(G-1, a_t) = 0 + \\alpha \\cdot (1 + \\gamma \\cdot 0 - 0)\\). We can assign arbitrary values to \\(\\alpha\\) and \\(\\gamma\\) to calculate the result. With \\(\\alpha = 0.5\\) and \\(\\gamma = 0.9\\), we get \\(Q_{new}(G-1, a_t) = 0 + 0.5 \\cdot (1 + 0.9 \\cdot 0 - 0) = 0.5\\). The second time the agent is in this state, we would get: \\(Q_{new}(G-1, a_t) = 0.5 + 0.5 \\cdot (1 + 0.9 \\cdot 0 - 0.5) = 0.75\\), then \\(0.875\\), \\(0.9375\\), \\(0.96875\\), etc.\n\n\n\n\n\n\nSo training our agent in code means:\n\nChoosing a random action (using action_space.sample()) if the values in the current state are just zeros. Otherwise, we take the action with the highest value in the current state with the function np.argmax();\nImplementing this action by moving in the desired direction with step(action);\nUpdating the value of the original state with the action we took, using information about the new state and the reward given by step(action);\n\nWe keep repeating these 3 steps until the agent gets stuck in a hole or reaches the goal G. When it happens, we just restart the environment with reset() and start a new episode until we hit 1,000 episodes. Additionally, we can plot the outcome of each run (failure if it didn‚Äôt reach the goal, success otherwise) to observe the progress of our agent.\n\n# Import matplotlib to plot the outcomes\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.dpi'] = 300\nplt.rcParams.update({'font.size': 17})\n\n# We re-initialize the Q-table\nqtable = np.zeros((environment.observation_space.n, environment.action_space.n))\n\n# Hyperparameters\nepisodes = 1000        # Total number of episodes\nalpha = 0.5            # Learning rate\ngamma = 0.9            # Discount factor\n\n# List of outcomes to plot\noutcomes = []\n\nprint('Q-table before training:')\nprint(qtable)\n\n# Training\nfor _ in range(episodes):\n    state = environment.reset()\n    done = False\n\n    # By default, we consider our outcome to be a failure\n    outcomes.append(\"Failure\")\n\n    # Until the agent gets stuck in a hole or reaches the goal, keep training it\n    while not done:\n        # Choose the action with the highest value in the current state\n        if np.max(qtable[state]) &gt; 0:\n          action = np.argmax(qtable[state])\n\n        # If there's no best action (only zeros), take a random one\n        else:\n          action = environment.action_space.sample()\n             \n        # Implement this action and move the agent in the desired direction\n        new_state, reward, done, info = environment.step(action)\n\n        # Update Q(s,a)\n        qtable[state, action] = qtable[state, action] + \\\n                                alpha * (reward + gamma * np.max(qtable[new_state]) - qtable[state, action])\n        \n        # Update our current state\n        state = new_state\n\n        # If we have a reward, it means that our outcome is a success\n        if reward:\n          outcomes[-1] = \"Success\"\n\nprint()\nprint('===========================================')\nprint('Q-table after training:')\nprint(qtable)\n\n# Plot outcomes\nplt.figure(figsize=(12, 5))\nplt.xlabel(\"Run number\")\nplt.ylabel(\"Outcome\")\nax = plt.gca()\nax.set_facecolor('#efeeea')\nplt.bar(range(len(outcomes)), outcomes, color=\"#0A047A\", width=1.0)\nplt.show()\n\nQ-table before training:\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n===========================================\nQ-table after training:\n[[0.         0.         0.59049    0.        ]\n [0.         0.         0.6561     0.        ]\n [0.         0.729      0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.         0.02050313 0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.         0.81       0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.         0.         0.17085938 0.        ]\n [0.         0.         0.49359375 0.        ]\n [0.         0.9        0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.         0.         1.         0.        ]\n [0.         0.         0.         0.        ]]\n\n\n\n\n\nThe agent is trained! Each blue bar on the figure corresponds to a win, so we can see that the agent had a hard time finding the goal at the beginning of the training. But once it found it several times in a row, it began to consistently win. ü•≥ The trained Q-table is also very interesting: these values indicate the unique sequence of actions the agent learned to reach the goal.\nNow let‚Äôs see how it performs by evaluating it on 100 episodes. We consider that the training is over, so we don‚Äôt need to update the Q-table anymore. To see how the agent performs, we can calculate the percentage of times the it managed to reach the goal (success rate).\n\nepisodes = 100\nnb_success = 0\n\n# Evaluation\nfor _ in range(100):\n    state = environment.reset()\n    done = False\n    \n    # Until the agent gets stuck or reaches the goal, keep training it\n    while not done:\n        # Choose the action with the highest value in the current state\n        if np.max(qtable[state]) &gt; 0:\n          action = np.argmax(qtable[state])\n\n        # If there's no best action (only zeros), take a random one\n        else:\n          action = environment.action_space.sample()\n             \n        # Implement this action and move the agent in the desired direction\n        new_state, reward, done, info = environment.step(action)\n\n        # Update our current state\n        state = new_state\n\n        # When we get a reward, it means we solved the game\n        nb_success += reward\n\n# Let's check our success rate!\nprint (f\"Success rate = {nb_success/episodes*100}%\")\n\nSuccess rate = 100.0%\n\n\nNot only our agent has been trained, but it manages to hit a 100% success rate. Great job everyone, the non-slippery ‚ùÑÔ∏èFrozen Lake is solved!\nWe can even visualize the agent moving on the map by executing the code below and print the sequence of actions it took to check if it‚Äôs the best one.\n\nfrom IPython.display import clear_output\nimport time \n\nstate = environment.reset()\ndone = False\nsequence = []\n\nwhile not done:\n    # Choose the action with the highest value in the current state\n    if np.max(qtable[state]) &gt; 0:\n      action = np.argmax(qtable[state])\n\n    # If there's no best action (only zeros), take a random one\n    else:\n      action = environment.action_space.sample()\n    \n    # Add the action to the sequence\n    sequence.append(action)\n\n    # Implement this action and move the agent in the desired direction\n    new_state, reward, done, info = environment.step(action)\n\n    # Update our current state\n    state = new_state\n\n    # Update the render\n    clear_output(wait=True)\n    environment.render()\n    time.sleep(1)\n\nprint(f\"Sequence = {sequence}\")\n\n  (Right)\nSFFF\nFHFH\nFFFH\nHFFG\nSequence = [2, 2, 1, 1, 1, 2]\n\n\nThe agent can learn several correct sequence of actions: [2, 2, 1, 1, 1, 2], [1, 1, 2, 2, 1, 2], etc. The good thing is there‚Äôs only 6 actions in our sequence, which was the minimum possible number of actions we counted: it means that our agent learned to solve the game in an optimal way. In the case of [2, 2, 1, 1, 1, 2], which corresponds to RIGHT \\(\\to\\) RIGHT \\(\\to\\) DOWN \\(\\to\\) DOWN \\(\\to\\) DOWN \\(\\to\\) RIGHT, it‚Äôs exactly the sequence we predicted at the very beginning of the article. üì£"
  },
  {
    "objectID": "posts/2022-02-13-q_learning.html#iv.-epsilon-greedy-algorithm",
    "href": "posts/2022-02-13-q_learning.html#iv.-epsilon-greedy-algorithm",
    "title": "Q-learning for beginners",
    "section": "üìê IV. Epsilon-Greedy algorithm",
    "text": "üìê IV. Epsilon-Greedy algorithm\nDespite this success, there‚Äôs something that bothers me with our previous approach: the agent always chooses the action with the highest value. So whenever a state-action pair starts having a non-zero value, the agent will always choose it. The other actions will never be taken, which means we‚Äôll never update their value‚Ä¶ But what if one of these actions was better than the one the agent always takes? Shouldn‚Äôt we encourage the agent to try news things from time to time and see if it can improve?\nIn other words, we want to allow our agent to either: * Take the action with the highest value (exploitation); * Choose a random action to try to find even better ones (exploration).\nA tradeoff between these two behaviors is important: if the agent only focuses on exploitation, it cannot try new solutions and thus doesn‚Äôt learn anymore. On the other hand, if the agent only takes random actions, the training is pointless since it doesn‚Äôt use the Q-table. So we want to change this parameter over time: at the beginning of the training, we want to explore the environment as much as possible. But exploration becomes less and less interesting, as the agent already knows every possible state-action pairs. This parameter represents the amount of randomness in the action selection.\nThis technique is commonly called the epsilon-greedy algorithm, where epsilon is our parameter. It is a simple but extremely efficient method to find a good tradeoff. Every time the agent has to take an action, it has a probability \\(Œµ\\) of choosing a random one, and a probability \\(1-Œµ\\) of choosing the one with the highest value. We can decrease the value of epsilon at the end of each episode by a fixed amount (linear decay), or based on the current value of epsilon (exponential decay).\n\n\n\n\n\n\nLet‚Äôs implement a linear decay. Beforehand, I‚Äôd like to see how the curve looks like with arbitrary parameters. We‚Äôll start with \\(Œµ = 1\\) to be in full exploration mode, and decrease this value by \\(0.001\\) after each episode.\n\n\n\nOkay now that we have a sound understanding of it, we can implement it for real and see how it changes the agent‚Äôs behavior.\n\n# We re-initialize the Q-table\nqtable = np.zeros((environment.observation_space.n, environment.action_space.n))\n\n# Hyperparameters\nepisodes = 1000        # Total number of episodes\nalpha = 0.5            # Learning rate\ngamma = 0.9            # Discount factor\nepsilon = 1.0          # Amount of randomness in the action selection\nepsilon_decay = 0.001  # Fixed amount to decrease\n\n# List of outcomes to plot\noutcomes = []\n\nprint('Q-table before training:')\nprint(qtable)\n\n# Training\nfor _ in range(episodes):\n    state = environment.reset()\n    done = False\n\n    # By default, we consider our outcome to be a failure\n    outcomes.append(\"Failure\")\n    \n    # Until the agent gets stuck in a hole or reaches the goal, keep training it\n    while not done:\n        # Generate a random number between 0 and 1\n        rnd = np.random.random()\n\n        # If random number &lt; epsilon, take a random action\n        if rnd &lt; epsilon:\n          action = environment.action_space.sample()\n        # Else, take the action with the highest value in the current state\n        else:\n          action = np.argmax(qtable[state])\n             \n        # Implement this action and move the agent in the desired direction\n        new_state, reward, done, info = environment.step(action)\n\n        # Update Q(s,a)\n        qtable[state, action] = qtable[state, action] + \\\n                                alpha * (reward + gamma * np.max(qtable[new_state]) - qtable[state, action])\n        \n        # Update our current state\n        state = new_state\n\n        # If we have a reward, it means that our outcome is a success\n        if reward:\n          outcomes[-1] = \"Success\"\n\n    # Update epsilon\n    epsilon = max(epsilon - epsilon_decay, 0)\n\nprint()\nprint('===========================================')\nprint('Q-table after training:')\nprint(qtable)\n\n# Plot outcomes\nplt.figure(figsize=(12, 5))\nplt.xlabel(\"Run number\")\nplt.ylabel(\"Outcome\")\nax = plt.gca()\nax.set_facecolor('#efeeea')\nplt.bar(range(len(outcomes)), outcomes, color=\"#0A047A\", width=1.0)\nplt.show()\n\nQ-table before training:\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n===========================================\nQ-table after training:\n[[0.531441   0.59049    0.59049    0.531441  ]\n [0.531441   0.         0.6561     0.56396466]\n [0.58333574 0.729      0.56935151 0.65055117]\n [0.65308668 0.         0.33420534 0.25491326]\n [0.59049    0.6561     0.         0.531441  ]\n [0.         0.         0.         0.        ]\n [0.         0.81       0.         0.65519631]\n [0.         0.         0.         0.        ]\n [0.6561     0.         0.729      0.59049   ]\n [0.6561     0.81       0.81       0.        ]\n [0.72899868 0.9        0.         0.72711067]\n [0.         0.         0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.         0.81       0.9        0.729     ]\n [0.81       0.9        1.         0.81      ]\n [0.         0.         0.         0.        ]]\n\n\n\n\n\nHey, the agent takes more time to consistently win the game now! And the Q-table has a lot more non-zero values than the previous one, which means the agent has learned several sequences of actions to reach the goal. It is understandable, since this new agent is forced to explore state-action pairs instead of always exploiting ones with non-zero values.\nLet‚Äôs see if it‚Äôs as successful as the previous one to win the game. In evaluation mode, we don‚Äôt want exploration anymore because the agent is trained now.\n\nepisodes = 100\nnb_success = 0\n\n# Evaluation\nfor _ in range(100):\n    state = environment.reset()\n    done = False\n    \n    # Until the agent gets stuck or reaches the goal, keep training it\n    while not done:\n        # Choose the action with the highest value in the current state\n        action = np.argmax(qtable[state])\n\n        # Implement this action and move the agent in the desired direction\n        new_state, reward, done, info = environment.step(action)\n\n        # Update our current state\n        state = new_state\n\n        # When we get a reward, it means we solved the game\n        nb_success += reward\n\n# Let's check our success rate!\nprint (f\"Success rate = {nb_success/episodes*100}%\")\n\nSuccess rate = 100.0%\n\n\nPhew, it‚Äôs another 100% success rate! We didn‚Äôt degrade the model. üòå The benefits of this approach might not be obvious in this example, but our model became less static and more flexible. It learned different paths (sequences of actions) from S to G instead of just one as in the previous approach. More exploration can degrade performance but it‚Äôs necessary to train agents that can adapt to new environments."
  },
  {
    "objectID": "posts/2022-02-13-q_learning.html#iv.-challenge-slippery-frozen-lake",
    "href": "posts/2022-02-13-q_learning.html#iv.-challenge-slippery-frozen-lake",
    "title": "Q-learning for beginners",
    "section": "‚ùÑÔ∏è IV. Challenge: slippery Frozen Lake",
    "text": "‚ùÑÔ∏è IV. Challenge: slippery Frozen Lake\nWe didn‚Äôt solve the entire ‚ùÑÔ∏èFrozen Lake environment: we only trained an agent on the non-slippery version, using is_slippery = False during initialization. In the slippery variant, the action the agent takes only has 33% chance of succeeding. In case of failure, one of the three other actions is randomly taken instead. This feature adds a lot of randomness to the training, which makes things more difficult for our agent. Let‚Äôs see how well our code is doing in this new environment‚Ä¶\n\n# Initialize the slippery Frozen Lake\nenvironment = gym.make(\"FrozenLake-v1\", is_slippery=True)\nenvironment.reset()\n\n# We re-initialize the Q-table\nqtable = np.zeros((environment.observation_space.n, environment.action_space.n))\n\n# Hyperparameters\nepisodes = 1000        # Total number of episodes\nalpha = 0.5            # Learning rate\ngamma = 0.9            # Discount factor\nepsilon = 1.0          # Amount of randomness in the action selection\nepsilon_decay = 0.001  # Fixed amount to decrease\n\n# List of outcomes to plot\noutcomes = []\n\nprint('Q-table before training:')\nprint(qtable)\n\n# Training\nfor _ in range(episodes):\n    state = environment.reset()\n    done = False\n\n    # By default, we consider our outcome to be a failure\n    outcomes.append(\"Failure\")\n    \n    # Until the agent gets stuck in a hole or reaches the goal, keep training it\n    while not done:\n        # Generate a random number between 0 and 1\n        rnd = np.random.random()\n\n        # If random number &lt; epsilon, take a random action\n        if rnd &lt; epsilon:\n          action = environment.action_space.sample()\n        # Else, take the action with the highest value in the current state\n        else:\n          action = np.argmax(qtable[state])\n             \n        # Implement this action and move the agent in the desired direction\n        new_state, reward, done, info = environment.step(action)\n\n        # Update Q(s,a)\n        qtable[state, action] = qtable[state, action] + \\\n                                alpha * (reward + gamma * np.max(qtable[new_state]) - qtable[state, action])\n        \n        # Update our current state\n        state = new_state\n\n        # If we have a reward, it means that our outcome is a success\n        if reward:\n          outcomes[-1] = \"Success\"\n\n    # Update epsilon\n    epsilon = max(epsilon - epsilon_decay, 0)\n\nprint()\nprint('===========================================')\nprint('Q-table after training:')\nprint(qtable)\n\n# Plot outcomes\nplt.figure(figsize=(12, 5))\nplt.xlabel(\"Run number\")\nplt.ylabel(\"Outcome\")\nax = plt.gca()\nax.set_facecolor('#efeeea')\nplt.bar(range(len(outcomes)), outcomes, color=\"#0A047A\", width=1.0)\nplt.show()\n\nepisodes = 100\nnb_success = 0\n\n# Evaluation\nfor _ in range(100):\n    state = environment.reset()\n    done = False\n    \n    # Until the agent gets stuck or reaches the goal, keep training it\n    while not done:\n        # Choose the action with the highest value in the current state\n        action = np.argmax(qtable[state])\n\n        # Implement this action and move the agent in the desired direction\n        new_state, reward, done, info = environment.step(action)\n\n        # Update our current state\n        state = new_state\n\n        # When we get a reward, it means we solved the game\n        nb_success += reward\n\n# Let's check our success rate!\nprint (f\"Success rate = {nb_success/episodes*100}%\")\n\nQ-table before training:\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n===========================================\nQ-table after training:\n[[0.06208723 0.02559574 0.02022059 0.01985828]\n [0.01397208 0.01425862 0.01305446 0.03333396]\n [0.01318348 0.01294602 0.01356014 0.01461235]\n [0.01117016 0.00752795 0.00870601 0.01278227]\n [0.08696239 0.01894036 0.01542694 0.02307306]\n [0.         0.         0.         0.        ]\n [0.09027682 0.00490451 0.00793372 0.00448314]\n [0.         0.         0.         0.        ]\n [0.03488138 0.03987256 0.05172554 0.10780482]\n [0.12444437 0.12321815 0.06462294 0.07084008]\n [0.13216145 0.09460133 0.09949734 0.08022573]\n [0.         0.         0.         0.        ]\n [0.         0.         0.         0.        ]\n [0.1606242  0.18174032 0.16636549 0.11444442]\n [0.4216631  0.42345944 0.40825367 0.74082329]\n [0.         0.         0.         0.        ]]\nSuccess rate = 17.0%\n\n\n\n\n\nOof it‚Äôs not so good. But can you improve the performance by tweaking the different parameters we talked about? I encourage you to take this little challenge and do it on your own to have fun with reinforcement learning and check if you understood everything we said about Q-learning. And why not implementing exponential decay for the epsilon-greedy algorithm too? During this quick exercise, you might realise that slightly modifying the hyperparameters can completely destroy the results. This is another quirk of reinforcement learning: hyperparameters are quite moody, and it is important to understand their meaning if you want to tweak them. It‚Äôs always good to test and try new combinations to build your intuition and become more efficient. Good luck and have fun!"
  },
  {
    "objectID": "posts/2022-02-13-q_learning.html#v.-conclusion",
    "href": "posts/2022-02-13-q_learning.html#v.-conclusion",
    "title": "Q-learning for beginners",
    "section": "üîö V. Conclusion",
    "text": "üîö V. Conclusion\nQ-learning is a simple yet powerful algorithm at the core of reinforcement learning. In this article, * We learned to interact with the gym environment to choose actions and move our agent; * We introduced the idea of a Q-table, where rows are states, columns are actions, and cells are the value of an action in a given state; * We experimentally recreated the Q-learning update formula to tackle the sparse reward problem; * We implemented an entire training and evaluation process, that solved the ‚ùÑÔ∏èFrozen Lake environment with 100% success rate; * We implemented the famous epsilon-greedy algorithm in order to create a tradeoff between the exploration of unknown state-action pairs and the exploitation of the most successful ones.\nThe ‚ùÑÔ∏èFrozen Lake is a very simple environment, but others can have so many states and actions that it becomes impossible to store the Q-table in memory. This is especially the case in environments where events are not discrete, but continuous (like Super Mario Bros.¬†or Minecraft). When the problem arises, a popular technique consists of training a deep neural network to approximate the Q-table. This method adds several layers of complexity, since the neural networks are not very stable. But I will cover it in another tutorial with different techniques to stabilize them.\nUntil then, share this article if it helped you and follow me on Twitter and Medium for more practical content around machine learning and deep learning. üì£"
  },
  {
    "objectID": "posts/2022-02-20-graph_convolution_network.html",
    "href": "posts/2022-02-20-graph_convolution_network.html",
    "title": "Graph Convolutional Networks: Introduction to GNNs",
    "section": "",
    "text": "Graph Neural Networks (GNNs) are one of the most interesting and fast-growing architectures in deep learning.\nIn this series of tutorials, I would like to give a practical overview of this field and present new applications for machine learning practictioners.\nAmong GNNs, the Graph Convolutional Networks (GCNs) are the most popular and widely-applied model. In this article, we will see how the GCN layer works and how to apply it to node classification using PyTorch Geometric.\nPyTorch Geometric is an extension of PyTorch dedicated to GNNs. To install it, we need PyTorch (already installed on Google Colab) and run the following commands. If the installation does not work for you, please check PyTorch Geometric‚Äôs documentation.\n# Install PyTorch Geometric\nimport torch\n!pip install -q torch-scatter -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q torch-sparse -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q git+https://github.com/pyg-team/pytorch_geometric.git\n\n# Numpy for matrices\nimport numpy as np\n\n# Visualization libraries\nimport matplotlib.pyplot as plt\nimport networkx as nx\nNow that PyTorch Geometric is installed, let‚Äôs explore the dataset we will use in this tutorial."
  },
  {
    "objectID": "posts/2022-02-20-graph_convolution_network.html#i.-graph-data",
    "href": "posts/2022-02-20-graph_convolution_network.html#i.-graph-data",
    "title": "Graph Convolutional Networks: Introduction to GNNs",
    "section": "üåê I. Graph data",
    "text": "üåê I. Graph data\nGraphs are a nonlinear type of data you can find everywhere: social networks, computer networks, molecules, text, images, and so on. In this article, we will study the infamous and much-used Zachary‚Äôs karate club dataset.\n\n\n\nZachary‚Äôs karate club represents the relationships within a karate club studied by Wayne W. Zachary in the 1970s. It is a kind of social network, where every node is a member, and members who interacted outside the club are connected to each other.\nIn this example, the club is divided into four groups: we would like to assign the right group to every member (node classification) just by looking at their connections.\nLet‚Äôs import the dataset with PyG‚Äôs built-in function and try to understand the Datasets object it uses.\n\nfrom torch_geometric.datasets import KarateClub\n\n# Import dataset from PyTorch Geometric\ndataset = KarateClub()\n\n# Print information\nprint(dataset)\nprint('------------')\nprint(f'Number of graphs: {len(dataset)}')\nprint(f'Number of features: {dataset.num_features}')\nprint(f'Number of classes: {dataset.num_classes}')\n\nKarateClub()\n------------\nNumber of graphs: 1\nNumber of features: 34\nNumber of classes: 4\n\n\nThis dataset only has 1 graph, where each node has a feature vector of 34 dimensions and is part of one out of four classes (our four groups). Actually, the Datasets object can be seen as a collection of Data (graph) objects.\nWe can further inspect our unique graph to know more about it.\n\n# Print first element\nprint(f'Graph: {dataset[0]}')\n\nGraph: Data(x=[34, 34], edge_index=[2, 156], y=[34], train_mask=[34])\n\n\nThe Data object is particularly interesting. Printing it offers a good summary of the graph we‚Äôre studying: * x=[34, 34] is the node feature matrix with shape (number of nodes, number of features). In our case, it means that we have 34 nodes (our 34 members), each node being associated to a 34-dim feature vector. * edge_index=[2, 156] represents the graph connectivity (how the nodes are connected) with shape (2, number of directed edges). * y=[34] is the node ground-truth labels. In this problem, every node is assigned to one class (group), so we have one value for each node. * train_mask=[34] is an optional attribute that tells which nodes should be used for training with a list of True or False statements.\nLet‚Äôs print each of these tensors to understand what they store. Let‚Äôs start with the node features.\n\ndata = dataset[0]\n\nprint(f'x = {data.x.shape}')\nprint(data.x)\n\nx = torch.Size([34, 34])\ntensor([[1., 0., 0.,  ..., 0., 0., 0.],\n        [0., 1., 0.,  ..., 0., 0., 0.],\n        [0., 0., 1.,  ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0.,  ..., 1., 0., 0.],\n        [0., 0., 0.,  ..., 0., 1., 0.],\n        [0., 0., 0.,  ..., 0., 0., 1.]])\n\n\nHere, the node feature matrix x is an identity matrix: it doesn‚Äôt contain any relevant information about the nodes. It could contain information like age, skill level, etc. but this is not the case in this dataset. It means we‚Äôll have to classify our nodes just by looking at their connections.\nNow, let‚Äôs print the edge index.\n\nprint(f'edge_index = {data.edge_index.shape}')\nprint(data.edge_index)\n\nedge_index = torch.Size([2, 156])\ntensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,\n          1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,\n          3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,\n          7,  7,  8,  8,  8,  8,  8,  9,  9, 10, 10, 10, 11, 12, 12, 13, 13, 13,\n         13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21,\n         21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27,\n         27, 27, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31,\n         31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33,\n         33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33],\n        [ 1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 13, 17, 19, 21, 31,  0,  2,\n          3,  7, 13, 17, 19, 21, 30,  0,  1,  3,  7,  8,  9, 13, 27, 28, 32,  0,\n          1,  2,  7, 12, 13,  0,  6, 10,  0,  6, 10, 16,  0,  4,  5, 16,  0,  1,\n          2,  3,  0,  2, 30, 32, 33,  2, 33,  0,  4,  5,  0,  0,  3,  0,  1,  2,\n          3, 33, 32, 33, 32, 33,  5,  6,  0,  1, 32, 33,  0,  1, 33, 32, 33,  0,\n          1, 32, 33, 25, 27, 29, 32, 33, 25, 27, 31, 23, 24, 31, 29, 33,  2, 23,\n         24, 33,  2, 31, 33, 23, 26, 32, 33,  1,  8, 32, 33,  0, 24, 25, 28, 32,\n         33,  2,  8, 14, 15, 18, 20, 22, 23, 29, 30, 31, 33,  8,  9, 13, 14, 15,\n         18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32]])\n\n\nThe edge_index has a quite counter-intuitive way of storing the graph connectivity. Here, we have two lists of 156 directed edges (78 bidirectional edges) because the first list contains the sources and the second one the destinations. It is called a coordinate list (COO) and is just one way of efficiently storing a sparse matrix.\nA more intuitive way to represent the graph connectivity would be a simple adjacency matrix \\(A\\), where a non-zero element \\(A_{ij}\\) indicates a connection from \\(i\\) to \\(j\\).\n\n\n\nThe adjacency matrix can be inferred from the edge_index with a utility function.\n\nfrom torch_geometric.utils import to_dense_adj\n\nA = to_dense_adj(data.edge_index)[0].numpy().astype(int)\nprint(f'A = {A.shape}')\nprint(A)\n\nA = (34, 34)\n[[0 1 1 ... 1 0 0]\n [1 0 1 ... 0 0 0]\n [1 1 0 ... 0 1 0]\n ...\n [1 0 0 ... 0 1 1]\n [0 0 1 ... 1 0 1]\n [0 0 0 ... 1 1 0]]\n\n\nWith graph data, nodes are rarely highly interconnected. For example, our adjacency matrix \\(A\\) is very sparse (filled with zeros). Storing so many zeros is not efficient at all, which is why the COO format is adopted by PyG.\nOn the contrary, ground-truth labels are easy to understand.\n\nprint(f'y = {data.y.shape}')\nprint(data.y)\n\ny = torch.Size([34])\ntensor([1, 1, 1, 1, 3, 3, 3, 1, 0, 1, 3, 1, 1, 1, 0, 0, 3, 1, 0, 1, 0, 1, 0, 0,\n        2, 2, 0, 0, 2, 0, 0, 2, 0, 0])\n\n\nOur node ground-truth labels stored in y simply encode the group number (0, 1, 2, 3) for each node, which is why we have 34 values.\nFinally, let‚Äôs print the train mask.\n\nprint(f'train_mask = {data.train_mask.shape}')\nprint(data.train_mask)\n\ntrain_mask = torch.Size([34])\ntensor([ True, False, False, False,  True, False, False, False,  True, False,\n        False, False, False, False, False, False, False, False, False, False,\n        False, False, False, False,  True, False, False, False, False, False,\n        False, False, False, False])\n\n\nThe train mask shows which nodes are supposed to be used for training with True statements. These nodes represent the training set, while the others can be considered as the test set.\nBut we‚Äôre not done yet! The Data object has a lot more to offer: many graph properties can be checked using utility functions. For example:\n\nis_directed() tells you if the graph is directed, which means that the adjacency matrix is not symmetric\nisolated_nodes() checks if some nodes are not connected to the rest of the graph (and will probably be harder to classify)\nhas_self_loops() indicates if at least one node is connected to itself. This is not the same as loops: loops mean that you can take a path that starts and ends at the same node.\n\nAll of these properties return False for Zachary‚Äôs karate club.\n\nprint(f'Edges are directed: {data.is_directed()}')\nprint(f'Graph has isolated nodes: {data.has_isolated_nodes()}')\nprint(f'Graph has loops: {data.has_self_loops()}')\n\nEdges are directed: False\nGraph has isolated nodes: False\nGraph has loops: False\n\n\nFinally, we can convert a graph from PyTorch Geometric to the popular graph library NetworkX using to_networkx. This is particularly useful to visualize a small graph with NetworkX and Matplotlib.\nLet‚Äôs plot our dataset with a different color for each group.\n\nfrom torch_geometric.utils import to_networkx\n\nG = to_networkx(data, to_undirected=True)\nplt.figure(figsize=(12,12))\nplt.axis('off')\nnx.draw_networkx(G,\n                pos=nx.spring_layout(G, seed=0),\n                with_labels=True,\n                node_size=800,\n                node_color=data.y,\n                cmap=\"hsv\",\n                vmin=-2,\n                vmax=3,\n                width=0.8,\n                edge_color=\"grey\",\n                font_size=14\n                )\nplt.show()\n\n\n\n\nThis plot of Zachary‚Äôs karate club displays our 34 nodes, 78 (bidirectional) edges, and 4 labels with 4 different colors. Now that we‚Äôve seen the essentials of loading and handling a dataset with PyTorch Geometric, we can introduce the Graph Convolutional Network."
  },
  {
    "objectID": "posts/2022-02-20-graph_convolution_network.html#ii.-graph-convolutional-network",
    "href": "posts/2022-02-20-graph_convolution_network.html#ii.-graph-convolutional-network",
    "title": "Graph Convolutional Networks: Introduction to GNNs",
    "section": "‚úâÔ∏è II. Graph Convolutional Network",
    "text": "‚úâÔ∏è II. Graph Convolutional Network\nIn this section, let‚Äôs try to redesign the graph convolutional layer from scratch.\nIn neural networks, linear layers apply a linear transformation to the incoming data. They transform input features \\(x\\) into hidden vectors \\(h\\) using a weight matrix \\(W\\). If we ignore biases, we can write:\n\\[h = \\mathbf{W} x\\]\nWith graph data, we have access to connections between nodes. Why is that relevant? In most networks, we make the hypothesis that similar nodes are more likely to be connected to each other than dissimilar ones (it‚Äôs called network homophily).\nWe can enrich our node representation by aggregating its features with those of its neighbors. This operation is called convolution, or neighborhood aggregation. Let‚Äôs denote \\(\\tilde{\\mathcal{N}}_i\\) the neighborhood of node \\(i\\) including itself.\n\\[h_i = \\sum_{j \\in \\tilde{\\mathcal{N}}_i} \\mathbf{W} x_j\\]\nUnlike filters in Convolutional Neural Networks (CNNs), our weight matrix \\(W\\) is unique and shared among every node. But there is another issue: nodes do not have a fixed number of neighbors like pixels do.\nWhat if one node only has 1 neighbor, and another one has 500 of them? We would add 500 values instead of just one: the resulting embedding \\(h\\) would be much larger for the node with 500 neighbors.\nHowever, this doesn‚Äôt make sense: nodes should always be comparable, so they need to have a similar range of values. To address this issue, we can normalize the result based on the number of connections. In graph theory, this number is called a degree.\n\\[h_i = \\dfrac{1}{\\deg(i)} \\sum_{j \\in \\tilde{\\mathcal{N}}_i} \\mathbf{W} x_j\\]\nWe‚Äôre almost there! Introduced by Kipf et al.¬†in 2016, the graph convolutional layer has one final improvement.\nIndeed, the authors noticed that features from nodes with a lot of neighbors will spread much more easily than those from more isolated nodes. To counterbalance this effect, they proposed to give bigger weights to features from nodes with few neighbors. This operation can be written as follows:\n\\[h_i = \\sum_{j \\in \\tilde{\\mathcal{N}}_i}} \\dfrac{1}{\\sqrt{\\deg(i)}\\sqrt{\\deg(j)}} \\mathbf{W} x_j\\]\nNotice that when \\(i\\) and \\(j\\) have the same number of neighbors, it is equivalent to our own layer. Now, let‚Äôs see how to implement it in Python."
  },
  {
    "objectID": "posts/2022-02-20-graph_convolution_network.html#iii.-implementing-a-gcn",
    "href": "posts/2022-02-20-graph_convolution_network.html#iii.-implementing-a-gcn",
    "title": "Graph Convolutional Networks: Introduction to GNNs",
    "section": "üß† III. Implementing a GCN",
    "text": "üß† III. Implementing a GCN\nPyTorch Geometric directly implements the graph convolutional layer using GCNConv.\nIn this example, we will create a simple GCN with only one GCN layer, a ReLU activation function, and one linear layer. This final layer will output four values, corresponding to our four groups. The highest value will determine the class of each node.\nIn the following code block, we define the GCN layer with a 3-dim hidden layer.\n\nfrom torch.nn import Linear\nfrom torch_geometric.nn import GCNConv\n\n\nclass GCN(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.gcn = GCNConv(dataset.num_features, 3)\n        self.out = Linear(3, dataset.num_classes)\n\n    def forward(self, x, edge_index):\n        h = self.gcn(x, edge_index).relu()\n        z = self.out(h)\n        return h, z\n\nmodel = GCN()\nprint(model)\n\nGNN(\n  (gcn): GCNConv(34, 3)\n  (out): Linear(in_features=3, out_features=4, bias=True)\n)\n\n\nIf we added a second GCN layer, our model would not only aggregate feature vectors from the neighbors of each node, but also from the neighbors of these neighbors.\nWe can stack several graph layers to aggregate more and more distant values, but there‚Äôs a catch: if we add too many layers, the aggregation becomes so intense that all the embeddings end up looking the same. This phenomenon is called over-smoothing and can be a real problem when you have too many layers.\nNow that we‚Äôve defined our GNN, let‚Äôs write a simple training loop with PyTorch. I chose a regular cross-entropy loss since it‚Äôs a multi-class classification task, with Adam as optimizer. We could use the training mask, but we will ignore it for this exploratory exercise.\nThe training loop is standard: we try to predict the correct labels, and we compare the GCN‚Äôs results to the values stored in data.y. The error is calculated by the cross-entropy loss and backpropagated with Adam to fine-tune our GNN‚Äôs weights and biases. Finally, we print metrics every 10 epochs.\n\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.02)\n\n# Calculate accuracy\ndef accuracy(pred_y, y):\n    return (pred_y == y).sum() / len(y)\n\n# Data for animations\nembeddings = []\nlosses = []\naccuracies = []\noutputs = []\n\n# Training loop\nfor epoch in range(201):\n    # Clear gradients\n    optimizer.zero_grad()\n\n    # Forward pass\n    h, z = model(data.x, data.edge_index)\n\n    # Calculate loss function\n    loss = criterion(z, data.y)\n\n    # Calculate accuracy\n    acc = accuracy(z.argmax(dim=1), data.y)\n\n    # Compute gradients\n    loss.backward()\n\n    # Tune parameters\n    optimizer.step()\n\n    # Store data for animations\n    embeddings.append(h)\n    losses.append(loss)\n    accuracies.append(acc)\n    outputs.append(z.argmax(dim=1))\n\n    # Print metrics every 10 epochs\n    if epoch % 10 == 0:\n        print(f'Epoch {epoch:&gt;3} | Loss: {loss:.2f} | Acc: {acc*100:.2f}%')\n\nEpoch   0 | Loss: 1.35 | Acc: 38.24%\nEpoch  10 | Loss: 1.21 | Acc: 38.24%\nEpoch  20 | Loss: 1.08 | Acc: 41.18%\nEpoch  30 | Loss: 0.92 | Acc: 70.59%\nEpoch  40 | Loss: 0.72 | Acc: 73.53%\nEpoch  50 | Loss: 0.54 | Acc: 88.24%\nEpoch  60 | Loss: 0.41 | Acc: 88.24%\nEpoch  70 | Loss: 0.33 | Acc: 88.24%\nEpoch  80 | Loss: 0.29 | Acc: 88.24%\nEpoch  90 | Loss: 0.26 | Acc: 88.24%\nEpoch 100 | Loss: 0.24 | Acc: 88.24%\nEpoch 110 | Loss: 0.23 | Acc: 88.24%\nEpoch 120 | Loss: 0.22 | Acc: 88.24%\nEpoch 130 | Loss: 0.22 | Acc: 88.24%\nEpoch 140 | Loss: 0.21 | Acc: 88.24%\nEpoch 150 | Loss: 0.20 | Acc: 88.24%\nEpoch 160 | Loss: 0.20 | Acc: 91.18%\nEpoch 170 | Loss: 0.19 | Acc: 97.06%\nEpoch 180 | Loss: 0.17 | Acc: 100.00%\nEpoch 190 | Loss: 0.14 | Acc: 100.00%\nEpoch 200 | Loss: 0.12 | Acc: 100.00%\n\n\nGreat! Without much surprise, we reach 100% accuracy on the training set. It means that our model learned to correctly assign every member of the karate club to its correct group.\nWe can produce a neat visualization by animating the graph and see the evolution of the GNN‚Äôs predictions during the training process.\n\n%%capture\nfrom IPython.display import HTML\nfrom matplotlib import animation\nplt.rcParams[\"animation.bitrate\"] = 3000\n\ndef animate(i):\n    G = to_networkx(data, to_undirected=True)\n    nx.draw_networkx(G,\n                    pos=nx.spring_layout(G, seed=0),\n                    with_labels=True,\n                    node_size=800,\n                    node_color=outputs[i],\n                    cmap=\"hsv\",\n                    vmin=-2,\n                    vmax=3,\n                    width=0.8,\n                    edge_color=\"grey\",\n                    font_size=14\n                    )\n    plt.title(f'Epoch {i} | Loss: {losses[i]:.2f} | Acc: {accuracies[i]*100:.2f}%',\n              fontsize=18, pad=20)\n\nfig = plt.figure(figsize=(12, 12))\nplt.axis('off')\n\nanim = animation.FuncAnimation(fig, animate, \\\n            np.arange(0, 200, 10), interval=500, repeat=True)\nhtml = HTML(anim.to_html5_video())\n\n\ndisplay(html)\n\n\n  \n  Your browser does not support the video tag.\n\n\n\nThe first predictions are random, but the GCN perfectly labels every node after a while. Indeed, the final graph is the same as the one we plotted at the end of the first section. But what does the GCN really learn?\nBy aggregating features from neighboring nodes, the GNN learns a vector representation (or embedding) of every node in the network. In our model, the final layer just learns how to use these representations to produce the best classifications. However, embeddings are the real products of GNNs.\nLet‚Äôs print the embeddings learned by our model.\n\n# Print embeddings\nprint(f'Final embeddings = {h.shape}')\nprint(h)\n\nFinal embeddings = torch.Size([34, 3])\ntensor([[2.3756e+00, 5.1330e-01, 0.0000e+00],\n        [3.2511e+00, 1.4347e+00, 0.0000e+00],\n        [2.0562e+00, 1.5209e+00, 0.0000e+00],\n        [2.9461e+00, 1.1436e+00, 0.0000e+00],\n        [0.0000e+00, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 0.0000e+00, 0.0000e+00],\n        [2.4295e+00, 1.0172e+00, 0.0000e+00],\n        [6.3575e-01, 2.6594e+00, 0.0000e+00],\n        [1.9876e+00, 1.3767e+00, 0.0000e+00],\n        [0.0000e+00, 6.0713e-04, 0.0000e+00],\n        [2.2577e+00, 1.1747e+00, 0.0000e+00],\n        [2.3823e+00, 1.1449e+00, 0.0000e+00],\n        [2.2940e+00, 1.3844e+00, 0.0000e+00],\n        [1.9155e-01, 2.7673e+00, 0.0000e+00],\n        [1.8206e-01, 2.7194e+00, 0.0000e+00],\n        [0.0000e+00, 2.0684e-03, 0.0000e+00],\n        [2.3367e+00, 1.1042e+00, 0.0000e+00],\n        [1.7925e-01, 2.7942e+00, 0.0000e+00],\n        [2.0630e+00, 1.4096e+00, 0.0000e+00],\n        [1.9360e-01, 2.7587e+00, 0.0000e+00],\n        [2.2845e+00, 1.1088e+00, 0.0000e+00],\n        [1.8486e-01, 2.7376e+00, 0.0000e+00],\n        [0.0000e+00, 2.8447e+00, 0.0000e+00],\n        [0.0000e+00, 8.9724e-01, 0.0000e+00],\n        [0.0000e+00, 9.5606e-01, 0.0000e+00],\n        [2.1157e-01, 2.8055e+00, 0.0000e+00],\n        [2.6385e-01, 2.4765e+00, 0.0000e+00],\n        [2.9965e-01, 8.5145e-01, 0.0000e+00],\n        [0.0000e+00, 3.3316e+00, 0.0000e+00],\n        [4.0497e-01, 2.8716e+00, 0.0000e+00],\n        [0.0000e+00, 6.8132e-01, 0.0000e+00],\n        [0.0000e+00, 4.1963e+00, 0.0000e+00],\n        [0.0000e+00, 3.8991e+00, 0.0000e+00]], grad_fn=&lt;ReluBackward0&gt;)\n\n\nAs you can see, embeddings do not need to have the same dimensions as feature vectors. Here, I chose to reduce the number of dimensions from 34 (dataset.num_features) to three to get a nice visualization in 3D.\nLet‚Äôs plot these embeddings before any training happens, at epoch 0.\n\n# Get first embedding at epoch = 0\nembed = h[0].detach().cpu().numpy()\n\nfig = plt.figure(figsize=(12, 12))\nax = fig.add_subplot(projection='3d')\nax.patch.set_alpha(0)\nplt.tick_params(left=False,\n                bottom=False,\n                labelleft=False,\n                labelbottom=False)\nax.scatter(embed[:, 0], embed[:, 1], embed[:, 2],\n           s=200, c=data.y, cmap=\"hsv\", vmin=-2, vmax=3)\n\nplt.show()\n\n\n\n\nWe see every node from Zachary‚Äôs karate club with their true labels (and not the model‚Äôs predictions). For now, they‚Äôre all over the place since the GNN is not trained yet. But if we plot these embeddings at each step of the training loop, we‚Äôd be able to visualize what the GNN truly learns.\nLet‚Äôs see how they evolve over time, as the GCN gets better and better at classifying nodes.\n\n%%capture\n\ndef animate(i):\n    embed = embeddings[i].detach().cpu().numpy()\n    ax.clear()\n    ax.scatter(embed[:, 0], embed[:, 1], embed[:, 2],\n           s=200, c=data.y, cmap=\"hsv\", vmin=-2, vmax=3)\n    plt.title(f'Epoch {i} | Loss: {losses[i]:.2f} | Acc: {accuracies[i]*100:.2f}%',\n              fontsize=18, pad=40)\n\nfig = plt.figure(figsize=(12, 12))\nplt.axis('off')\nax = fig.add_subplot(projection='3d')\nplt.tick_params(left=False,\n                bottom=False,\n                labelleft=False,\n                labelbottom=False)\n\nanim = animation.FuncAnimation(fig, animate, \\\n              np.arange(0, 200, 10), interval=800, repeat=True)\nhtml = HTML(anim.to_html5_video())\n\n\ndisplay(html)\n\n\n  \n  Your browser does not support the video tag.\n\n\n\nWe see that our GCN learned embeddings that group nodes from the same classes into nice clusters. Then, the final layer can easily separate them into different classes.\nEmbeddings are not unique to GNNs: they can be found everywhere in deep learning. They don‚Äôt have to be 3D either: actually, they rarely are. For instance, language models like BERT produce embeddings with 768 or even 1024 dimensions.\nAdditional dimensions store more information about nodes, text, images, etc. but they also create bigger models that are more difficult to train. This is why it‚Äôs better to keep low-dimensional embeddings as long as possible."
  },
  {
    "objectID": "posts/2022-02-20-graph_convolution_network.html#conclusion",
    "href": "posts/2022-02-20-graph_convolution_network.html#conclusion",
    "title": "Graph Convolutional Networks: Introduction to GNNs",
    "section": "Conclusion",
    "text": "Conclusion\nGraph Convolutional Networks are an incredibly versatile architecture that can be applied in many contexts. In this article,\n\nWe learned to use the PyTorch Geometric library to explore graph data with the Datasets and Data objects\nWe redesigned a graph convolutional layer from scratch\nWe implemented a GNN with a GCN layer\nWe visualized what training means for a GCN\n\nZachary‚Äôs karate club is a simplistic dataset, but it is good enough to understand the most important concepts in graph data and GNNs.\nWe only talked about node classification in this article, but there are other tasks GNNs can accomplish: link prediction (e.g., to recommend a friend), graph classification (e.g., to label molecules), graph generation (e.g., to create new molecules), and so on.\nBeyond GCN, numerous GNN layers and architectures have been proposed by researchers. In the next article, we‚Äôre gonna talk about Graph Attention Networks (GATs), which implicitly compute GCN‚Äôs normalization factor and the importance of each connection with an attention mechanism.\nIf you enjoyed this article, feel free to follow me on Twitter for more GNN content. Thank you and have a great day! üì£"
  },
  {
    "objectID": "posts/2022-02-20-graph_convolution_network.html#graph-neural-network-course",
    "href": "posts/2022-02-20-graph_convolution_network.html#graph-neural-network-course",
    "title": "Graph Convolutional Networks: Introduction to GNNs",
    "section": "üåê Graph Neural Network Course",
    "text": "üåê Graph Neural Network Course\nüîé Course overview\nüìù Chapter 1: Introduction to Graph Neural Networks\nüìù Chapter 2: Graph Attention Network\nüìù Chapter 3: GraphSAGE\nüìù Chapter 4: Graph Isomorphism Network"
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html",
    "href": "posts/2022-03-02-linear_programming.html",
    "title": "Introduction to Linear Programming in Python",
    "section": "",
    "text": "Linear programming is a technique to optimize any problem with multiple variables and constraints. It‚Äôs a simple but powerful tool every data scientist should master.\nImagine you are a strategist recruiting an army. You have: * Three resources: üåæfood, ü™µwood, and ü™ôgold * Three units: üó°Ô∏èswordsmen, üèπbowmen, and üêéhorsemen.\nHorsemen are stronger than bowmen, who are in turn stronger than swordsmen. The following table provides the cost and power of each unit:\nNow we have 1200 üåæfood, 800 ü™µwood, and 600 ü™ôgold. How should we maximize the power of our army considering these resources?\nWe could simply find the unit with the best power/cost ratio, take as many of them as possible, and repeat the process with the other two units. But this ‚Äúguess and check‚Äù solution might not even be optimal‚Ä¶\nNow imagine we have millions of units and resources: the previous greedy strategy is likely to completely miss the optimal solution. It is possible to use a machine learning algorithm (e.g., a genetic algorithm) to solve this problem, but we have no guarantee that the solution will be optimal either.\nFortunately for us, there is a method that can solve our problem in an optimal way: linear programming (or linear optimization), which is part of the field of operations research (OR). In this article, we‚Äôll use it to find the best numbers of swordsmen, bowmen, and horsemen to build the army with the highest power possible.\nYou can run the code from this tutorial with the following Google Colab notebook."
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html#i.-solvers",
    "href": "posts/2022-03-02-linear_programming.html#i.-solvers",
    "title": "Introduction to Linear Programming in Python",
    "section": "üß† I.¬†Solvers",
    "text": "üß† I.¬†Solvers\nIn Python, there are different libraries for linear programming such as the multi-purposed SciPy, the beginner-friendly PuLP, the exhaustive Pyomo, and many others.\nToday, we are going to use Google OR-Tools, which is quite user-friendly, comes with several prepackaged solvers, and has by far the most stars on GitHub.\nIf the installation doesn‚Äôt work, please restart the kernel and try again: it can fail sometimes. ¬Ø\\_(„ÉÑ)_/¬Ø\n\n!python -m pip install --upgrade --user -q ortools\n\nAll these libraries have a hidden benefit: they act as interfaces to use the same model with different solvers. Solvers like Gurobi, Cplex, or SCIP have their own APIs, but the models they create are tied to a specific solver.\nOR-Tools allows us to use an abstract (and quite pythonic) way of modeling our problems. We can then choose one or several solvers to find an optimal solution. The model we built is thus highly reusable!\n\n\n\n\n\n\nOR-Tools comes with its own linear programming solver, called GLOP (Google Linear Optimization Package). It is an open-source project created by Google‚Äôs Operations Research Team and written in C++.\nOther solvers are available such as SCIP, an excellent non-commercial solver created in 2005 and updated and maintained to this day. We could also use popular commercial options like Gurobi and Cplex. However, we would need to install them on top of OR-Tools and get the appropriate licenses (which can be quite costly). For now, let‚Äôs try GLOP.\n\n# Import OR-Tools wrapper for linear programming\nfrom ortools.linear_solver import pywraplp\n\n# Create a solver using the GLOP backend\nsolver = pywraplp.Solver('Maximize army power', pywraplp.Solver.GLOP_LINEAR_PROGRAMMING)"
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html#ii.-variables",
    "href": "posts/2022-03-02-linear_programming.html#ii.-variables",
    "title": "Introduction to Linear Programming in Python",
    "section": "üßÆ II. Variables",
    "text": "üßÆ II. Variables\nWe created an instance of the OR-Tools solver using GLOP. Now, how to use linear programming? The first thing we want to define is the variables we want to optimize.\nIn our example, we have three variables: the number of üó°Ô∏èswordsmen, üèπbowmen, and üêéhorsemen in the army. OR-Tools accepts three types of variables:\n\nNumVar for continuous variables;\nIntVar for integer variables;\nBoolVar for boolean variables.\n\nWe‚Äôre looking for round numbers of units, so let‚Äôs choose IntVar. We then need to specify lower and upper bounds for these variables. We want at least 0 unit, but we don‚Äôt really have an upper bound. So we can say that our upper bound is infinity (or any big number we will never reach). It can be written as:\n\\[0 \\leq swordsmen &lt; \\infty \\\\\n0 \\leq bowmen &lt; \\infty \\\\\n0 \\leq horsemen &lt; \\infty\\]\nLet‚Äôs translate it into code. Infinity is replaced by solver.infinity() in OR-Tools. Other than that, the syntax is quite straightforward:\n\n# Create the variables we want to optimize\nswordsmen = solver.IntVar(0, solver.infinity(), 'swordsmen')\nbowmen = solver.IntVar(0, solver.infinity(), 'bowmen')\nhorsemen = solver.IntVar(0, solver.infinity(), 'horsemen')"
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html#iii.-constraints",
    "href": "posts/2022-03-02-linear_programming.html#iii.-constraints",
    "title": "Introduction to Linear Programming in Python",
    "section": "‚õìÔ∏è III. Constraints",
    "text": "‚õìÔ∏è III. Constraints\nWe defined our variables, but the constraints are just as important.\nPerhaps counter-intuitively, adding more constraints helps the solver to find an optimal solution faster. Why is this the case? Think of the solver as a tree: constraints help it trim branches and reduce the search space.\nIn our case, we have a limited number of resources we can use to produce units. In other words, we can‚Äôt spend more resources than we have. For instance, the üåæfood spent to recruit units cannot be higher than 1200. The same is true with ü™µwood (800) and ü™ôgold (600).\nAccording to our table, units have the following costs:\n\n1 swordsman = üåæ60 + ü™µ20;\n1 bowman = üåæ80 + ü™µ10 + ü™ô40;\n1 horseman = üåæ140 + ü™ô100.\n\nWe can write one constraint per resource as follows:\n\\[60\\times swordsmen + 80\\times bowmen + 140\\times horsemen \\leq 1200 \\\\\n20\\times swordsmen + 10\\times bowmen \\leq 800 \\\\\n40\\times bowmen + 100\\times horsemen \\leq 600\\]\nIn OR-Tools, we simply add the constraints to our solver instance with solver.Add().\n\n# Add constraints for each resource\nsolver.Add(swordsmen*60 + bowmen*80 + horsemen*140 &lt;= 1200) # Food\nsolver.Add(swordsmen*20 + bowmen*10 &lt;= 800)                 # Wood\nsolver.Add(bowmen*40 + horsemen*100 &lt;= 600)                 # Gold"
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html#iv.-objective",
    "href": "posts/2022-03-02-linear_programming.html#iv.-objective",
    "title": "Introduction to Linear Programming in Python",
    "section": "üéØ IV. Objective",
    "text": "üéØ IV. Objective\nNow that we have our variables and constraints, we want to define our goal (or objective function).\nIn linear programming, this function has to be linear (like the constraints), so of the form \\(ax + by + cz + d\\). In our example, the objective is quite clear: we want to recruit the army with the highest power. The table gives us the following power values:\n\n1 swordsman = üí™70;\n1 bowman = üí™95;\n1 horseman = üí™230.\n\nMaximizing the power of the army amounts to maximizing the sum of the power of each unit. Our objective function can be written as:\n\\[max\\ 70\\times swordsmen + 95\\times bowmen + 230\\times horsemen\\]\nIn general, there are two types of objective functions: maximizing and minimizing. In OR-Tools, we declare this goal with solver.Maximize() or solver.Minimize().\n\n# Maximize the objective function\nsolver.Maximize(swordsmen*70 + bowmen*95 + horsemen*230)\n\nAnd we‚Äôre done! There are three steps to model any linear optimization problem:\n\nDeclaring the variables to optimize with lower and upper bounds;\nAdding constraints to these variables;\nDefining the objective function to maximize or to minimize.\n\nNow that is clear, we can ask the solver to find an optimal solution for us."
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html#v.-optimize",
    "href": "posts/2022-03-02-linear_programming.html#v.-optimize",
    "title": "Introduction to Linear Programming in Python",
    "section": "ü•á V. Optimize!",
    "text": "ü•á V. Optimize!\nCalculating the optimal solution is done with solver.Solve(). This function returns a status that can be used to check that the solution is indeed optimal.\nLet‚Äôs print the highest total power we can get with the best army configuration.\n\n# Solve problem\nstatus = solver.Solve()\n\n# If an optimal solution has been found, print results\nif status == pywraplp.Solver.OPTIMAL:\n  print('================= Solution =================')\n  print(f'Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations')\n  print()\n  print(f'Optimal power = {solver.Objective().Value()} üí™power')\n  print('Army:')\n  print(f' - üó°Ô∏èSwordsmen = {swordsmen.solution_value()}')\n  print(f' - üèπBowmen = {bowmen.solution_value()}')\n  print(f' - üêéHorsemen = {horsemen.solution_value()}')\nelse:\n  print('The solver could not find an optimal solution.')\n\n================= Solution =================\nSolved in 87.00 milliseconds in 2 iterations\n\nOptimal power = 1800.0 üí™power\nArmy:\n - üó°Ô∏èSwordsmen = 6.0000000000000036\n - üèπBowmen = 0.0\n - üêéHorsemen = 5.999999999999999\n\n\nGreat! The solver found an optimal solution: our army has a total power of üí™1800 with 6 üó°Ô∏èswordsmen and 6 üêéhorsemen (sorry bowmen!).\nLet‚Äôs unpack this result:\n\nThe solver decided to take the maximum number of üêéhorsemen (6, since we only have ü™ô600 and they each cost ü™ô100);\nThe remaining resources are spent in üó°Ô∏èswordsmen: we have \\(1200 ‚Äì 6*140 = 360\\)üåæfood left, which is why the solver chose 6 üó°Ô∏èswordsmen;\nWe can deduce that the horsemen are the best unit and the bowmen are the worst one because they haven‚Äôt been chosen at all.\n\nOkay, but there‚Äôs something quite weird: these numbers are not round, even though we specified that we wanted integers (IntVar). So what happened?\nUnfortunately, answering this question requires a deep dive into linear programming‚Ä¶ To keep things simple in this introduction, let‚Äôs say it‚Äôs because of GLOP. Solvers have characteristics we have to take into account, and GLOP doesn‚Äôt handle integers. This is another proof that building reusable models is more than just convenient.\nWe‚Äôll explain why GLOP has this strange behavior and how to fix it in a more advanced tutorial."
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html#conclusion",
    "href": "posts/2022-03-02-linear_programming.html#conclusion",
    "title": "Introduction to Linear Programming in Python",
    "section": "Conclusion",
    "text": "Conclusion\nWe saw through this example the five main steps of any linear optimization problem:\n\nChoosing a solver: in our case, we selected GLOP for convenience.\nDeclaring variables: the parameters to optimize were the number of swordsmen, bowmen, and horsemen.\nDeclaring constraints: each of these units has a cost. The total cost could not exceed our limited resources.\nDefining objective: the criterion to maximize was the total power of this army. It could have been something else, like the number of units.\nOptimizing: GLOP found an optimal solution to this problem in less than a second.\n\n\n\n\nThis is the main benefit of linear programming: the algorithm gives us a guarantee that the solution that was found is optimal (with a certain error). This guarantee is powerful, but comes at a cost: the model can be so complex that the solver takes years (or more) to find an optimal solution. In this scenario, we have two options:\n\nWe can stop the solver after a certain time (and probably obtain a suboptimal answer);\nWe can use a metaheuristic like a genetic algorithm to calculate an excellent solution in a short amount of time.\n\nIn the next article, we‚Äôll talk about the different types of optimization problems and generalize our approach to an entire class of them.\nI hope you enjoyed this introduction! Feel free to share it and spread the knowledge about linear optimization. Let‚Äôs connect on Twitter where I post summaries of these articles. Cheers!"
  },
  {
    "objectID": "posts/2022-03-02-linear_programming.html#linear-programming-course",
    "href": "posts/2022-03-02-linear_programming.html#linear-programming-course",
    "title": "Introduction to Linear Programming in Python",
    "section": "ü•á Linear Programming Course",
    "text": "ü•á Linear Programming Course\nüîé Course overview\nüìù Chapter 1: Introduction to Linear Programming\nüìù Chapter 2: Integer vs.¬†Linear Programming\nüìù Chapter 3: Constraint Programming"
  },
  {
    "objectID": "posts/2022-03-05-integer_programming.html",
    "href": "posts/2022-03-05-integer_programming.html",
    "title": "Integer vs.¬†Linear Programming in Python",
    "section": "",
    "text": "Why is linear programming called that way?\nBoth terms are confusing:\nIn summary, it has nothing to do with code: linear or not. It‚Äôs about optimizing variables with various constraints.\nIn this article, we‚Äôre gonna talk about another type of optimization: integer programming. We‚Äôll see why a good understanding of the problem we face is necessary to choose the right solver. Finally, we will write a model that can take on a bigger challenge and actually solve a whole class of optimization problems.\nYou can run the code from this tutorial with the following Google Colab notebook."
  },
  {
    "objectID": "posts/2022-03-05-integer_programming.html#i.-optimization-problem-types",
    "href": "posts/2022-03-05-integer_programming.html#i.-optimization-problem-types",
    "title": "Integer vs.¬†Linear Programming in Python",
    "section": "üìä I. Optimization problem¬†types",
    "text": "üìä I. Optimization problem¬†types\nIn the introduction to linear programming, we optimized an army composition. Here was the result:\n\n\n================= Solution =================\nSolved in 87.00 milliseconds in 2 iterations\n\nOptimal power = 1800.0 üí™power\nArmy:\n - üó°Ô∏èSwordsmen = 6.0000000000000036\n - üèπBowmen = 0.0\n - üêéHorsemen = 5.999999999999999\n\n\nHow can we have 5.999‚Ä¶ horsemen? We specified that our variables should be integers with VarInt. What was wrong with our code?\nThe problem is not the model but the choice of the solver.\nGLOP is a pure linear programming solver. This means that it cannot understand the concept of integers. It is limited to continuous parameters with a linear relationship.\nThis is the difference between linear programming (LP) and integer linear programming (ILP). In summary, LP solvers can only use real numbers and not integers as variables. So why did we declare our variables as integers if it doesn‚Äôt take them into account?\nGLOP cannot solve ILP problems, but other solvers can. Actually, a lot of them are mixed integer linear programming (MILP, commonly called MIP) solvers. This means that they can consider both continuous (real numbers) and discrete (integers) variables. A particular case of discrete values is Boolean variables to represent decisions with 0‚Äì1 values.\nOther solvers like SCIP or CBC can solve both MILP and MINLP (mixed integer nonlinear programming) problems. Thanks to OR-Tools, we can use the same model and just change the solver to SCIP or CBC.\n\n# Create the linear solver using the CBC backend\nsolver = pywraplp.Solver('Maximize army power', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n\n# 1. Create the variables we want to optimize\nswordsmen = solver.IntVar(0, solver.infinity(), 'swordsmen')\nbowmen = solver.IntVar(0, solver.infinity(), 'bowmen')\nhorsemen = solver.IntVar(0, solver.infinity(), 'horsemen')\n\n# 2. Add constraints for each resource\nsolver.Add(swordsmen*60 + bowmen*80 + horsemen*140 &lt;= 1200)\nsolver.Add(swordsmen*20 + bowmen*10 &lt;= 800)\nsolver.Add(bowmen*40 + horsemen*100 &lt;= 600)\n\n# 3. Maximize the objective function\nsolver.Maximize(swordsmen*70 + bowmen*95 + horsemen*230)\n\n# Solve problem\nstatus = solver.Solve()\n\n# If an optimal solution has been found, print results\nif status == pywraplp.Solver.OPTIMAL:\n  print('================= Solution =================')\n  print(f'Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations')\n  print()\n  print(f'Optimal value = {solver.Objective().Value()} üí™power')\n  print('Army:')\n  print(f' - üó°Ô∏èSwordsmen = {swordsmen.solution_value()}')\n  print(f' - üèπBowmen = {bowmen.solution_value()}')\n  print(f' - üêéHorsemen = {horsemen.solution_value()}')\nelse:\n  print('The solver could not find an optimal solution.')\n\n================= Solution =================\nSolved in 3.00 milliseconds in 0 iterations\n\nOptimal value = 1800.0 üí™power\nArmy:\n - üó°Ô∏èSwordsmen = 6.0\n - üèπBowmen = 0.0\n - üêéHorsemen = 6.0\n\n\nStrictly speaking, our variables are still floats (type(swordsmen.solution_value()) = float) but we can see that they don‚Äôt have weird decimals anymore: the CBC solver really considered them as integers.\nIn this example, we would generally just round up these values since the error is insignificant. However, it is important to remember to choose the appropriate solver according to the studied problem:\n\nLP for continuous variables;\nMIP/MILP for a combination of continuous and discrete variables.\n\nThere are other types such as quadratic (QP) or nonlinear (NLP or MINLP, with an exponential objective function or constraints for instance) problems. They‚Äôre applied in different contexts, but follow the same principles as LP or MIP solvers."
  },
  {
    "objectID": "posts/2022-03-05-integer_programming.html#ii.-building-a-general-model",
    "href": "posts/2022-03-05-integer_programming.html#ii.-building-a-general-model",
    "title": "Integer vs.¬†Linear Programming in Python",
    "section": "üß± II. Building a general model",
    "text": "üß± II. Building a general model\nBut what if our resources change? Or if the cost of a unit evolved? What if we upgraded horsemen and their power increased?\nOne of the best perks of OR-Tools is that it uses a general-purpose programming language like Python. Instead of static numbers, we can store our parameters in objects like dictionaries or lists.\nThe code won‚Äôt be as readable, but it becomes much more flexible: actually, it can be so flexible that we can solve an entire class of optimization problems without changing the model (just the parameters).\nLet‚Äôs transform our input parameters into Python lists and feed them to the solver through a function.\n\n# Inputs\nUNITS = ['üó°Ô∏èSwordsmen', 'üèπBowmen', 'üêéHorsemen']\n\nDATA = [[60, 20, 0, 70],\n        [80, 10, 40, 95],\n        [140, 0, 100, 230]]\n\nRESOURCES = [1200, 800, 600]\n\n\ndef solve_army(UNITS, DATA, RESOURCES):\n  # Create the linear solver using the CBC backend\n  solver = pywraplp.Solver('Maximize army power', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n\n  # 1. Create the variables we want to optimize\n  units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS]\n\n  # 2. Add constraints for each resource\n  for r, _ in enumerate(RESOURCES):\n    solver.Add(sum(DATA[u][r] * units[u] for u, _ in enumerate(units)) &lt;= RESOURCES[r])\n\n  # 3. Maximize the objective function\n  solver.Maximize(sum(DATA[u][-1] * units[u] for u, _ in enumerate(units)))\n\n  # Solve problem\n  status = solver.Solve()\n\n  # If an optimal solution has been found, print results\n  if status == pywraplp.Solver.OPTIMAL:\n    print('================= Solution =================')\n    print(f'Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations')\n    print()\n    print(f'Optimal value = {solver.Objective().Value()} üí™power')\n    print('Army:')\n    for u, _ in enumerate(units):\n      print(f' - {units[u].name()} = {units[u].solution_value()}')\n  else:\n    print('The solver could not find an optimal solution.')\n\nsolve_army(UNITS, DATA, RESOURCES)\n\n================= Solution =================\nSolved in 2.00 milliseconds in 0 iterations\n\nOptimal value = 1800.0 üí™power\nArmy:\n - üó°Ô∏èSwordsmen = 6.0\n - üèπBowmen = 0.0\n - üêéHorsemen = 6.0\n\n\nWe obtain the same results: our code seems to work. Now let‚Äôs change the parameters to tackle a slightly more complex problem.\nImagine we have a lot more resources: üåæ183000, ü™µ90512, and ü™ô80150, so we can also produce a lot more units! This is the new table:\n\n\n\nUnit\nüåæFood\nü™µWood\nü™ôGold\nüí™Attack\n‚ù§Ô∏èHealth\n\n\n\n\nüó°Ô∏èSwordsman\n60\n20\n0\n6\n70\n\n\nüõ°Ô∏èMan-at-arms\n100\n0\n20\n12\n155\n\n\nüèπBowman\n30\n50\n0\n5\n70\n\n\n‚ùåCrossbowman\n80\n0\n40\n12\n80\n\n\nüî´Handcannoneer\n120\n0\n120\n35\n150\n\n\nüêéHorseman\n100\n20\n0\n9\n125\n\n\n‚ôûKnight\n140\n0\n100\n24\n230\n\n\nüêèBattering ram\n0\n300\n0\n200\n700\n\n\nüéØSpringald\n0\n250\n250\n30\n200\n\n\n\nNotice that we transformed the üí™power into two values: üí™attack and ‚ù§Ô∏èhealth, which is a little more detailed. Health values are higher than attack values, which is why we want to add a weighting factor to make them more comparable.\nLet‚Äôs take 10 as an example, so \\(power = 10 \\times attack + health\\). Our objective function becomes:\n\\[maximize \\ \\sum_{u \\in units} (10\\times attack + health) \\cdot u\\]\nAdapting our code to this new problem is actually quite simple: we just have to change the input parameters and update the objective function.\n\nUNITS = [\n    'üó°Ô∏èSwordsmen',\n    'üõ°Ô∏èMen-at-arms',\n    'üèπBowmen',\n    '‚ùåCrossbowmen',\n    'üî´Handcannoneers',\n    'üêéHorsemen',\n    '‚ôûKnights',\n    'üêèBattering rams',\n    'üéØSpringalds',\n    'ü™®Mangonels',\n]\n\nDATA = [\n    [60, 20, 0, 6, 70],\n    [100, 0, 20, 12, 155],\n    [30, 50, 0, 5, 70],\n    [80, 0, 40, 12, 80],\n    [120, 0, 120, 35, 150],\n    [100, 20, 0, 9, 125],\n    [140, 0, 100, 24, 230],\n    [0, 300, 0, 200, 700],\n    [0, 250, 250, 30, 200],\n    [0, 400, 200, 12*3, 240]\n]\n\nRESOURCES = [183000, 90512, 80150]\n\n\ndef solve_army(UNITS, DATA, RESOURCES):\n  # Create the linear solver using the CBC backend\n  solver = pywraplp.Solver('Maximize army power', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n\n  # 1. Create the variables we want to optimize\n  units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS]\n\n  # 2. Add constraints for each resource\n  for r, _ in enumerate(RESOURCES):\n    solver.Add(sum(DATA[u][r] * units[u] for u, _ in enumerate(units)) &lt;= RESOURCES[r])\n\n  # 3. Maximize the new objective function\n  solver.Maximize(sum((10*DATA[u][-2] + DATA[u][-1]) * units[u] for u, _ in enumerate(units)))\n\n  # Solve problem\n  status = solver.Solve()\n\n  # If an optimal solution has been found, print results\n  if status == pywraplp.Solver.OPTIMAL:\n    print('================= Solution =================')\n    print(f'Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations')\n    print()\n    print(f'Optimal value = {solver.Objective().Value()} üí™power')\n    print('Army:')\n    for u, _ in enumerate(units):\n      print(f' - {units[u].name()} = {units[u].solution_value()}')\n  else:\n    print('The solver could not find an optimal solution.')\n\nsolve_army(UNITS, DATA, RESOURCES)\n\n================= Solution =================\nSolved in 74.00 milliseconds in 412 iterations\n\nOptimal value = 1393145.0 üí™power\nArmy:\n - üó°Ô∏èSwordsmen = 2.0\n - üõ°Ô∏èMen-at-arms = 1283.0\n - üèπBowmen = 3.0\n - ‚ùåCrossbowmen = 0.0\n - üî´Handcannoneers = 454.0\n - üêéHorsemen = 0.0\n - ‚ôûKnights = 0.0\n - üêèBattering rams = 301.0\n - üéØSpringalds = 0.0\n - ü™®Mangonels = 0.0\n\n\nThis problem would take a long time for humans to address, but the ILP solver did it in the blink of an eye. Better than that: it also gives us the guarantee that our solution is optimal, which means that our enemy cannot find a better army composition for the same cost!\nWe could increase the number of units and give billions of resources but you get the picture: it would just take longer to obtain a solution, but it wouldn‚Äôt change the problem."
  },
  {
    "objectID": "posts/2022-03-05-integer_programming.html#iii.-combining-constraints",
    "href": "posts/2022-03-05-integer_programming.html#iii.-combining-constraints",
    "title": "Integer vs.¬†Linear Programming in Python",
    "section": "‚öîÔ∏è III. Combining constraints",
    "text": "‚öîÔ∏è III. Combining constraints\nNow, let‚Äôs say we scouted our enemy and know that their army has a üí™power of 1,000,000. We could build a much better army, but our resources are precious and it wouldn‚Äôt be very efficient: all we have to do is to build an army with a üí™power higher than 1,000,000 (even 1,000,001 would be enough).\nIn other words, the total power is now a constraint (üí™ &gt; 1,000,000) instead of the objective to maximize. The new goal is to minimize the resources we need to produce this army. However, we can reuse our input parameters since they didn‚Äôt change.\nThe new constraint can be translated as ‚Äúthe sum of the power of the selected units must be strictly greater than 1,000,000‚Äù.\n\\[\\sum_{u \\in units} (10\\times attack + health) \\cdot u &gt; 1\\,000\\,000\\]\nIn code, we can loop through our units and resources to design this constraint.\nThe objective function also has to change. Our goal is to minimize the sum of resources spent to build the army.\n\\[minimize \\ \\sum_{u \\in units} (food + wood + gold) \\cdot u\\]\nOnce again, we can loop through our resources to implement it in OR-Tools.\n\ndef solve_army(UNITS, DATA, RESOURCES):\n  # Create the linear solver using the CBC backend\n  solver = pywraplp.Solver('Minimize resource consumption', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n\n  # 1. Create the variables we want to optimize\n  units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS]\n\n  # 2. Add power constraint\n  solver.Add(sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u] for u, _ in enumerate(units)) &gt;= 1000001)\n\n  # 3. Minimize the objective function\n  solver.Minimize(sum((DATA[u][0] + DATA[u][1] + DATA[u][2]) * units[u] for u, _ in enumerate(units)))\n\n  # Solve problem\n  status = solver.Solve()\n\n  # If an optimal solution has been found, print results\n  if status == pywraplp.Solver.OPTIMAL:\n    print('================= Solution =================')\n    print(f'Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations')\n    print()\n\n    power = sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u].solution_value() for u, _ in enumerate(units))\n    print(f'Optimal value = {solver.Objective().Value()} üåæü™µü™ôresources')\n    print(f'Power = üí™{power}')\n    print('Army:')\n    for u, _ in enumerate(units):\n      print(f' - {units[u].name()} = {units[u].solution_value()}')\n    print()\n\n    food = sum((DATA[u][0]) * units[u].solution_value() for u, _ in enumerate(units))\n    wood = sum((DATA[u][1]) * units[u].solution_value() for u, _ in enumerate(units))\n    gold = sum((DATA[u][2]) * units[u].solution_value() for u, _ in enumerate(units))\n    print('Resources:')\n    print(f' - üåæFood = {food}')\n    print(f' - ü™µWood = {wood}')\n    print(f' - ü™ôGold = {gold}')\n  else:\n      print('The solver could not find an optimal solution.')\n\nsolve_army(UNITS, DATA, RESOURCES)\n\n================= Solution =================\nSolved in 4.00 milliseconds in 0 iterations\n\nOptimal value = 111300.0 üåæü™µü™ôresources\nPower = üí™1001700.0\nArmy:\n - üó°Ô∏èSwordsmen = 0.0\n - üõ°Ô∏èMen-at-arms = 0.0\n - üèπBowmen = 0.0\n - ‚ùåCrossbowmen = 0.0\n - üî´Handcannoneers = 0.0\n - üêéHorsemen = 0.0\n - ‚ôûKnights = 0.0\n - üêèBattering rams = 371.0\n - üéØSpringalds = 0.0\n - ü™®Mangonels = 0.0\n\nResources:\n - üåæFood = 0.0\n - ü™µWood = 111300.0\n - ü™ôGold = 0.0\n\n\nThe solver found an optimal solution: we need to build 371 üêèbattering rams for a total cost of 111,300 ü™µwood. Wait, what if we don‚Äôt have that much wood? In the previous section, we only had ü™µ90512: we cannot produce 371 üêèbattering rams. üò±\nSo is it possible to take these limited resources into account and still try to build the best army? Actually, it‚Äôs super easy: we just have to copy/paste the constraints from the previous section.\nIn this version, we have two types of constraints:\n\nThe total power must be greater than 1,000,000;\nWe cannot spend more than our limited resources.\n\n\ndef solve_army(UNITS, DATA, RESOURCES):\n  # Create the linear solver using the CBC backend\n  solver = pywraplp.Solver('Minimize resource consumption', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n\n  # 1. Create the variables we want to optimize\n  units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS]\n\n  # 2. Add constraints for each resource\n  for r, _ in enumerate(RESOURCES):\n    solver.Add(sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u] for u, _ in enumerate(units)) &gt;= 1000001)\n\n  # Old constraints for limited resources\n  for r, _ in enumerate(RESOURCES):\n    solver.Add(sum(DATA[u][r] * units[u] for u, _ in enumerate(units)) &lt;= RESOURCES[r])\n\n  # 3. Minimize the objective function\n  solver.Minimize(sum((DATA[u][0] + DATA[u][1] + DATA[u][2]) * units[u] for u, _ in enumerate(units)))\n\n  # Solve problem\n  status = solver.Solve()\n\n  # If an optimal solution has been found, print results\n  if status == pywraplp.Solver.OPTIMAL:\n    print('================= Solution =================')\n    print(f'Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations')\n    print()\n\n    power = sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u].solution_value() for u, _ in enumerate(units))\n    print(f'Optimal value = {solver.Objective().Value()} üåæü™µü™ôresources')\n    print(f'Power = üí™{power}')\n    print('Army:')\n    for u, _ in enumerate(units):\n      print(f' - {units[u].name()} = {units[u].solution_value()}')\n    print()\n    \n    food = sum((DATA[u][0]) * units[u].solution_value() for u, _ in enumerate(units))\n    wood = sum((DATA[u][1]) * units[u].solution_value() for u, _ in enumerate(units))\n    gold = sum((DATA[u][2]) * units[u].solution_value() for u, _ in enumerate(units))\n    print('Resources:')\n    print(f' - üåæFood = {food}')\n    print(f' - ü™µWood = {wood}')\n    print(f' - ü™ôGold = {gold}')\n  else:\n      print('The solver could not find an optimal solution.')\n\nsolve_army(UNITS, DATA, RESOURCES)\n\n================= Solution =================\nSolved in 28.00 milliseconds in 1 iterations\n\nOptimal value = 172100.0 üåæü™µü™ôresources\nPower = üí™1000105.0\nArmy:\n - üó°Ô∏èSwordsmen = 1.0\n - üõ°Ô∏èMen-at-arms = 681.0\n - üèπBowmen = 0.0\n - ‚ùåCrossbowmen = 0.0\n - üî´Handcannoneers = 0.0\n - üêéHorsemen = 0.0\n - ‚ôûKnights = 0.0\n - üêèBattering rams = 301.0\n - üéØSpringalds = 0.0\n - ü™®Mangonels = 0.0\n\nResources:\n - üåæFood = 68160.0\n - ü™µWood = 90320.0\n - ü™ôGold = 13620.0\n\n\nSince we now have a limited resource of ü™µwood, the number of üêèbattering rams sadly dropped from 371 to 301. In exchange, we got 681 üõ°Ô∏èmen-at-arms and 1 lost üó°Ô∏èswordsman (welcome to them).\nThe total cost of the army is 172,100, which is much higher than the 111,300 we previously found (+65% increase) but it truly is the optimal solution under these constraints. It shows that we should produce more wood because these üêè battering rams are extremely cost-efficient!\nThis example shows how modular LP models can be. It is possible to reuse parts of the code, like constraints, in another model to combine them and solve more complex problems."
  },
  {
    "objectID": "posts/2022-03-05-integer_programming.html#iv.-linear-programming-vs-machine-learning",
    "href": "posts/2022-03-05-integer_programming.html#iv.-linear-programming-vs-machine-learning",
    "title": "Integer vs.¬†Linear Programming in Python",
    "section": "üß† IV. Linear Programming vs Machine¬†Learning",
    "text": "üß† IV. Linear Programming vs Machine¬†Learning\nLet‚Äôs talk about the elephant in the room. Why not use machine learning (in a broad sense) instead of linear programming? It‚Äôs not like this problem cannot be solved with a genetic algorithm for instance.\nMathematical optimization is often neglected in favor of machine learning techniques, but both have their merits:\n\nLinear programming can produce an optimal solution in an undetermined amount of time (it can take years), while machine learning can approximate complex functions in no time.\nThere is no training in LP, but an expert is required to build a mathematical model. Machine learning needs data, but the models can be used as black boxes to solve a problem.\nAs a rule of thumb, problems that do not have a particular time constraint and/or are not extremely complex can be advantageously solved with linear programming."
  },
  {
    "objectID": "posts/2022-03-05-integer_programming.html#conclusion",
    "href": "posts/2022-03-05-integer_programming.html#conclusion",
    "title": "Integer vs.¬†Linear Programming in Python",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we dived deeper into our understanding of mathematical optimization.\n\nWe talked about solvers and types of optimization problems: LP, MIP, NLP;\nWe modeled and solved an extremely common optimization problem in an optimal way and generalized our model through a function;\nWe reframed this problem and merged two sets of constraints to obtain the best army composition for the lowest price;\nWe compared the pros and cons of linear programming and machine learning.\n\nThere are a lot more problems where optimization can be applied. For instance, how to create school timetables that satisfy everybody‚Äôs requirements? How to deliver 1,000 different orders in a minimum amount of time? Where to create a new metro line to maximize its usefulness?\nIn future articles, we‚Äôll talk about new types of applications for these techniques, including satisfiability and nonlinear problems.\nI hope you enjoyed this more advanced article. If you like machine learning and optimization, let‚Äôs connect on Twitter!"
  },
  {
    "objectID": "posts/2022-03-05-integer_programming.html#linear-programming-course",
    "href": "posts/2022-03-05-integer_programming.html#linear-programming-course",
    "title": "Integer vs.¬†Linear Programming in Python",
    "section": "ü•á Linear Programming Course",
    "text": "ü•á Linear Programming Course\nüîé Course overview\nüìù Chapter 1: Introduction to Linear Programming\nüìù Chapter 2: Integer vs.¬†Linear Programming\nüìù Chapter 3: Constraint Programming"
  },
  {
    "objectID": "posts/2022-03-09-graph_attention_network.html",
    "href": "posts/2022-03-09-graph_attention_network.html",
    "title": "Graph Attention Networks: Self-Attention for GNNs",
    "section": "",
    "text": "Graph Attention Networks (GATs) are one of the most popular types of Graph Neural Networks.\nInstead of calculating static weights based on node degrees like Graph Convolutional Networks (GCNs), they assign dynamic weights to node features through a process called self-attention. The main idea behind GATs is that some neighbors are more important than others, regardless of their node degrees.\nIn this article, we will see how to calculate these attention scores and implement an efficient GAT in PyTorch Geometric (PyG). You can run the code of this tutorial with the following Google Colab notebook.\n# Install PyTorch Geometric\nimport torch\n!pip install -q torch-scatter -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q torch-sparse -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q git+https://github.com/pyg-team/pytorch_geometric.git\n\n# Numpy for matrices\nimport numpy as np\nnp.random.seed(0)\n\n# Visualization\nimport networkx as nx\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.dpi'] = 300\nplt.rcParams.update({'font.size': 24})"
  },
  {
    "objectID": "posts/2022-03-09-graph_attention_network.html#i.-graph-data",
    "href": "posts/2022-03-09-graph_attention_network.html#i.-graph-data",
    "title": "Graph Attention Networks: Self-Attention for GNNs",
    "section": "üåê I. Graph data",
    "text": "üåê I. Graph data\n\nCiteSeer dataset\n\nLet‚Äôs perform a node classification task with a GAT. We can use three classic graph datasets (MIT license) for this work. They represent networks of research papers, where each connection is a citation.\n\nCora: it consists of 2,708 machine learning papers that belong to one of seven categories. ‚û°Ô∏è Node features represent the presence (1) or absence (0) of 1,433 words in a paper (binary bag of words).\nCiteSeer: it is a bigger but similar dataset of 3,327 scientific papers to classify into one of six categories. ‚û°Ô∏è Node features represent the presence (1) or absence (0) of 3,703 words in a paper.\nPubMed: it is an even bigger dataset with 19,717 scientific publications about diabetes from PubMed‚Äôs database, classified into three categories. ‚û°Ô∏è Node features are TF-IDF weighted word vector from a dictionary of 500 unique words.\n\nThese datasets have been widely used by the scientific community. As a challenge, we can compare our accuracy scores to those obtained in the literature (with standard deviation) using Multilayer Perceptrons (MLPs), GCNs, and GATs:\n\n\n\nDataset\nüìùCora\nüìùCiteSeer\nüìùPubMed\n\n\n\n\nMLP\n55.1%\n46.5%\n71.4%\n\n\nGCN\n81.4 ¬± 0.5%\n70.9% ¬± 0.5%\n79.0% ¬± 0.3%\n\n\nGAT\n83.0% ¬± 0.7%\n72.5% ¬± 0.7%\n79.0% ¬± 0.3%\n\n\n\nPubMed is quite large, so it would take longer to process and train a GNN on it. On the other hand, Cora is the most studied one in the literature, so let‚Äôs focus on CiteSeer as a middle ground.\nWe can directly import any of these datasets in PyTorch Geometric with the Planetoid class:\n\nfrom torch_geometric.datasets import Planetoid\n\n# Import dataset from PyTorch Geometric\ndataset = Planetoid(root=\".\", name=\"CiteSeer\")\ndata = dataset[0]\n\n# Print information about the dataset\nprint(f'Number of graphs: {len(dataset)}')\nprint(f'Number of nodes: {data.x.shape[0]}')\nprint(f'Number of features: {dataset.num_features}')\nprint(f'Number of classes: {dataset.num_classes}')\nprint(f'Has isolated nodes: {data.has_isolated_nodes()}')\n\nNumber of graphs: 1\nNumber of nodes: 3327\nNumber of features: 3703\nNumber of classes: 6\nHas isolated nodes: True\n\n\nThe CiteSeer dataset correctly exhibits the characteristics we previously described. However, some nodes are isolated (48 to be precise)! Correctly classifying these isolated nodes will be a challenge since we cannot rely on any aggregation. This is how an MLP processes nodes: it cannot consider the adjacency matrix, which decreases its accuracy.\nLet‚Äôs plot the number of connections of each node with degree:\n\nfrom torch_geometric.utils import degree\nfrom collections import Counter\n\n# Get the list of degrees for each node\ndegrees = degree(data.edge_index[0]).numpy()\n\n# Count the number of nodes for each degree\nnumbers = Counter(degrees)\n\n# Bar plot\nfig, ax = plt.subplots(figsize=(18, 6))\nax.set_xlabel('Node degree')\nax.set_ylabel('Number of nodes')\nplt.bar(numbers.keys(),\n        numbers.values(),\n        color='#0A047A')\n\n&lt;BarContainer object of 32 artists&gt;\n\n\n\n\n\nMost nodes only have 1 or 2 neighbors. It could explain why CiteSeer obtains lower accuracy scores than the two other datasets‚Ä¶"
  },
  {
    "objectID": "posts/2022-03-09-graph_attention_network.html#ii.-graph-attention-layer",
    "href": "posts/2022-03-09-graph_attention_network.html#ii.-graph-attention-layer",
    "title": "Graph Attention Networks: Self-Attention for GNNs",
    "section": "‚ö†Ô∏è II. Graph Attention Layer",
    "text": "‚ö†Ô∏è II. Graph Attention Layer\nIntroduced by Veliƒçkoviƒá et al. in 2017, self-attention in GATs relies on a simple idea: some nodes are more important than others. In this context, we talk about self-attention (and not just attention) because inputs are compared to each other.\n\n\n\nIn the previous figure, self-attention calculates the importance of nodes 2, 3, and 4‚Äôs features to node 1. We denote \\(\\alpha_{ij}\\) the importance of node \\(j\\)‚Äôs features to node \\(i\\).\nEach node \\(i\\) has an attribute vector \\(x_i\\). The GAT layer calculates the embedding of node 1 as a sum of attention coefficients multiplied by a shared weight matrix \\(\\mathbf{W}\\) :\n\\[h_i = \\alpha_{11}\\mathbf{W}x_1 + \\alpha_{12}\\mathbf{W}x_2 + \\alpha_{13}\\mathbf{W}x_3 + \\alpha_{14}\\mathbf{W}x_4\\]\nBut how do we calculate these attention coefficients? We could write a static formula, but there‚Äôs a smarter solution: we can learn their values with a neural network. There are four steps in this process:\n\nLinear transformation\nActivation function\nSoftmax normalization\nMulti-head attention\n\n\n1. Linear transformation\nTo calculate the attention coefficient, we need to consider pairs of nodes. An easy way to create these pairs is to concatenate attribute vectors from both nodes.\nThen, we can apply a new linear transformation with a weight matrix \\(W_{att}\\):\n\\[a_{ij} = W_{att}^t[\\mathbf{W}x_i\\mathbin\\Vert \\mathbf{W}x_j]\\]\n\n\n\n\n\n2. Activation function\nWe‚Äôre building a neural network, so the second step is to add nonlinearity with an activation function. In this case, the paper‚Äôs authors chose the LeakyReLU function.\n\\[e_{ij} = LeakyReLU(a_{ij})\\]\n\n\n\n\n\n3. Softmax normalization\nThe output of our neural network is not normalized, which is a problem since we want to compare these coefficients. For example, to be able to say if node 2 is more important to node 1 than node 3 (\\(\\alpha_{12} &gt; \\alpha_{13}\\)), we need to use the same scale.\nA common way to do it with neural networks is to use the softmax function. Here, we apply it to every neighboring node, including the target node itself:\n\\[\\alpha_{ij} = softmax_j(e_{ij}) = \\frac{exp(e_{ij})}{\\sum_{k \\in \\mathcal{N}_i}{exp(e_{ik})}}\\]\n\n\n\nThis equation produces the final attention coefficients \\(\\alpha_{ij}\\). The only problem is‚Ä¶ self-attention is not very stable. In order to improve performance, Vaswani et al. introduced multi-head attention in the transformer architecture.\n\n\n4. Multi-head attention\nThis should not be a big surprise if you‚Äôre familiar with the transformer architecture, but transformers are a special case of GNNs. This is why GATs look so much like a simplified version of transformers. The good thing is that we can reuse some ideas from Natural Language Processing here, like multi-head attention.\n\n\n\nIn GATs, multi-head attention consists of replicating the same three steps several times in order to average or concatenate the results. Instead of a single embedding \\(h_1\\), we get one embedding per attention head (denoted \\(h_1^k\\) for the head \\(k\\)). One of the two following schemes can then be applied:\n\nAverage: we sum the different \\(h_i^k\\) and normalize the result by the number of attention heads \\(n\\);\n\n\\[h_i = \\frac{1}{n}\\sum_{k=1}^n{h_i^k}\\]\n\nConcatenation: we concatenate the different \\(h_i^k\\).\n\n\\[h_i = \\mathbin\\Vert_{k=1}^n{h_i^k}\\]\nIn practice, we use the concatenation scheme when it‚Äôs a hidden layer and the average scheme when it‚Äôs the last (output) layer. Most of the time, we will stack several GAT layers to aggregate a larger neighborhood and thus combine these two schemes in the same GAT model."
  },
  {
    "objectID": "posts/2022-03-09-graph_attention_network.html#iii.-implementing-a-graph-attention-network",
    "href": "posts/2022-03-09-graph_attention_network.html#iii.-implementing-a-graph-attention-network",
    "title": "Graph Attention Networks: Self-Attention for GNNs",
    "section": "üß† III. Implementing a Graph Attention Network",
    "text": "üß† III. Implementing a Graph Attention Network\nLet‚Äôs now implement a GAT in PyTorch Geometric. This library has two different graph attention layers: GATConv and GATv2Conv.\nThe layer we talked about in the previous section is the GatConv layer, but in 2021 Brody et al. introduced an improved layer by modifying the order of operations. In Gatv2Conv, the weight matrix \\(\\mathbf{W}\\) is applied after the concatenation and the attention weight matrix \\(W_{att}\\) after the \\(LeakyReLU\\) function. In summary:\n\nGatConv: \\(e_{ij} = LeakyReLU(W_{att}^t[\\mathbf{W}x_i\\mathbin\\Vert \\mathbf{W}x_j])\\)\nGatv2Conv: \\(e_{ij} = W_{att}^tLeakyReLU(\\mathbf{W}[x_i\\mathbin\\Vert x_j])\\)\n\nWhich one should you use? According to the authors, Gatv2Conv consistently outperforms GatConv and thus should be preferred. We‚Äôll follow their advice and implement this improved layer in our example.\nOkay, let‚Äôs classify the papers from CiteSeer! I tried to (roughly) reproduce the experiments of the original authors without adding too much complexity. You can find the official implementation of GAT on GitHub.\nNote that we use graph attention layers in two configurations:\n\nThe first layer concatenates 8 outputs (multi-head attention);\nThe second layer only has 1 head, which produces our final embeddings.\n\nWe‚Äôre also going to train and test a GCN with two GCN layers (and dropout) to compare the accuracy scores.\n\nimport torch.nn.functional as F\nfrom torch.nn import Linear, Dropout\nfrom torch_geometric.nn import GCNConv, GATv2Conv\n\n\nclass GCN(torch.nn.Module):\n    \"\"\"Graph Convolutional Network\"\"\"\n    def __init__(self, dim_in, dim_h, dim_out):\n      super().__init__()\n      self.gcn1 = GCNConv(dim_in, dim_h)\n      self.gcn2 = GCNConv(dim_h, dim_out)\n      self.optimizer = torch.optim.Adam(self.parameters(),\n                                        lr=0.01,\n                                        weight_decay=5e-4)\n\n    def forward(self, x, edge_index):\n        h = F.dropout(x, p=0.5, training=self.training)\n        h = self.gcn1(h, edge_index).relu()\n        h = F.dropout(h, p=0.5, training=self.training)\n        h = self.gcn2(h, edge_index)\n        return h, F.log_softmax(h, dim=1)\n\n\nclass GAT(torch.nn.Module):\n    \"\"\"Graph Attention Network\"\"\"\n    def __init__(self, dim_in, dim_h, dim_out, heads=8):\n        super().__init__()\n        self.gat1 = GATv2Conv(dim_in, dim_h, heads=heads)\n        self.gat2 = GATv2Conv(dim_h*heads, dim_out, heads=1)\n        self.optimizer = torch.optim.Adam(self.parameters(),\n                                          lr=0.005,\n                                          weight_decay=5e-4)\n\n    def forward(self, x, edge_index):\n        h = F.dropout(x, p=0.6, training=self.training)\n        h = self.gat1(h, edge_index)\n        h = F.elu(h)\n        h = F.dropout(h, p=0.6, training=self.training)\n        h = self.gat2(h, edge_index)\n        return h, F.log_softmax(h, dim=1)\n\ndef accuracy(pred_y, y):\n    \"\"\"Calculate accuracy.\"\"\"\n    return ((pred_y == y).sum() / len(y)).item()\n\ndef train(model, data):\n    \"\"\"Train a GNN model and return the trained model.\"\"\"\n    criterion = torch.nn.CrossEntropyLoss()\n    optimizer = model.optimizer\n    epochs = 200\n\n    model.train()\n    for epoch in range(epochs+1):\n        # Training\n        optimizer.zero_grad()\n        _, out = model(data.x, data.edge_index)\n        loss = criterion(out[data.train_mask], data.y[data.train_mask])\n        acc = accuracy(out[data.train_mask].argmax(dim=1), data.y[data.train_mask])\n        loss.backward()\n        optimizer.step()\n\n        # Validation\n        val_loss = criterion(out[data.val_mask], data.y[data.val_mask])\n        val_acc = accuracy(out[data.val_mask].argmax(dim=1), data.y[data.val_mask])\n\n        # Print metrics every 10 epochs\n        if(epoch % 10 == 0):\n            print(f'Epoch {epoch:&gt;3} | Train Loss: {loss:.3f} | Train Acc: '\n                  f'{acc*100:&gt;6.2f}% | Val Loss: {val_loss:.2f} | '\n                  f'Val Acc: {val_acc*100:.2f}%')\n          \n    return model\n\n@torch.no_grad()\ndef test(model, data):\n    \"\"\"Evaluate the model on test set and print the accuracy score.\"\"\"\n    model.eval()\n    _, out = model(data.x, data.edge_index)\n    acc = accuracy(out.argmax(dim=1)[data.test_mask], data.y[data.test_mask])\n    return acc\n\n\n%%time\n# Create GCN model\ngcn = GCN(dataset.num_features, 16, dataset.num_classes)\nprint(gcn)\n\n# Train and test\ntrain(gcn, data)\nacc = test(gcn, data)\nprint(f'\\nGCN test accuracy: {acc*100:.2f}%\\n')\n\nGCN(\n  (gcn1): GCNConv(3703, 16)\n  (gcn2): GCNConv(16, 6)\n)\nEpoch   0 | Train Loss: 1.782 | Train Acc:  20.83% | Val Loss: 1.79 | Val Acc: 17.40%\nEpoch  10 | Train Loss: 0.580 | Train Acc:  89.17% | Val Loss: 1.31 | Val Acc: 55.40%\nEpoch  20 | Train Loss: 0.165 | Train Acc:  95.00% | Val Loss: 1.30 | Val Acc: 56.20%\nEpoch  30 | Train Loss: 0.113 | Train Acc:  97.50% | Val Loss: 1.49 | Val Acc: 54.40%\nEpoch  40 | Train Loss: 0.069 | Train Acc:  99.17% | Val Loss: 1.66 | Val Acc: 54.60%\nEpoch  50 | Train Loss: 0.037 | Train Acc: 100.00% | Val Loss: 1.65 | Val Acc: 55.60%\nEpoch  60 | Train Loss: 0.053 | Train Acc:  99.17% | Val Loss: 1.50 | Val Acc: 56.60%\nEpoch  70 | Train Loss: 0.084 | Train Acc:  97.50% | Val Loss: 1.50 | Val Acc: 58.00%\nEpoch  80 | Train Loss: 0.054 | Train Acc: 100.00% | Val Loss: 1.67 | Val Acc: 54.40%\nEpoch  90 | Train Loss: 0.048 | Train Acc:  98.33% | Val Loss: 1.54 | Val Acc: 57.80%\nEpoch 100 | Train Loss: 0.062 | Train Acc:  99.17% | Val Loss: 1.62 | Val Acc: 56.20%\nEpoch 110 | Train Loss: 0.082 | Train Acc:  96.67% | Val Loss: 1.52 | Val Acc: 56.60%\nEpoch 120 | Train Loss: 0.043 | Train Acc: 100.00% | Val Loss: 1.66 | Val Acc: 55.00%\nEpoch 130 | Train Loss: 0.058 | Train Acc:  98.33% | Val Loss: 1.55 | Val Acc: 59.80%\nEpoch 140 | Train Loss: 0.058 | Train Acc:  98.33% | Val Loss: 1.68 | Val Acc: 58.40%\nEpoch 150 | Train Loss: 0.031 | Train Acc: 100.00% | Val Loss: 1.65 | Val Acc: 58.40%\nEpoch 160 | Train Loss: 0.037 | Train Acc: 100.00% | Val Loss: 1.44 | Val Acc: 64.20%\nEpoch 170 | Train Loss: 0.025 | Train Acc: 100.00% | Val Loss: 1.58 | Val Acc: 58.40%\nEpoch 180 | Train Loss: 0.036 | Train Acc:  99.17% | Val Loss: 1.65 | Val Acc: 58.00%\nEpoch 190 | Train Loss: 0.041 | Train Acc:  97.50% | Val Loss: 1.69 | Val Acc: 57.60%\nEpoch 200 | Train Loss: 0.093 | Train Acc:  95.83% | Val Loss: 1.73 | Val Acc: 56.80%\n\nGCN test accuracy: 67.70%\n\nCPU times: user 25.1 s, sys: 847 ms, total: 25.9 s\nWall time: 32.4 s\n\n\n\n%%time\n# Create GAT model\ngat = GAT(dataset.num_features, 8, dataset.num_classes)\nprint(gat)\n\n# Train and test\ntrain(gat, data)\nacc = test(gat, data)\nprint(f'\\nGAT test accuracy: {acc*100:.2f}%\\n')\n\nGAT(\n  (gat1): GATv2Conv(3703, 8, heads=8)\n  (gat2): GATv2Conv(64, 6, heads=1)\n)\nEpoch   0 | Train Loss: 1.790 | Train Acc:  17.50% | Val Loss: 1.81 | Val Acc: 12.80%\nEpoch  10 | Train Loss: 0.114 | Train Acc:  96.67% | Val Loss: 1.05 | Val Acc: 67.20%\nEpoch  20 | Train Loss: 0.040 | Train Acc:  98.33% | Val Loss: 1.21 | Val Acc: 64.80%\nEpoch  30 | Train Loss: 0.021 | Train Acc:  99.17% | Val Loss: 1.30 | Val Acc: 65.80%\nEpoch  40 | Train Loss: 0.027 | Train Acc:  99.17% | Val Loss: 1.20 | Val Acc: 67.20%\nEpoch  50 | Train Loss: 0.012 | Train Acc:  99.17% | Val Loss: 1.18 | Val Acc: 67.20%\nEpoch  60 | Train Loss: 0.009 | Train Acc: 100.00% | Val Loss: 1.11 | Val Acc: 67.00%\nEpoch  70 | Train Loss: 0.007 | Train Acc: 100.00% | Val Loss: 1.19 | Val Acc: 64.80%\nEpoch  80 | Train Loss: 0.013 | Train Acc: 100.00% | Val Loss: 1.16 | Val Acc: 66.80%\nEpoch  90 | Train Loss: 0.009 | Train Acc: 100.00% | Val Loss: 1.10 | Val Acc: 66.60%\nEpoch 100 | Train Loss: 0.013 | Train Acc: 100.00% | Val Loss: 1.07 | Val Acc: 67.20%\nEpoch 110 | Train Loss: 0.012 | Train Acc: 100.00% | Val Loss: 1.14 | Val Acc: 67.20%\nEpoch 120 | Train Loss: 0.014 | Train Acc: 100.00% | Val Loss: 1.12 | Val Acc: 66.40%\nEpoch 130 | Train Loss: 0.009 | Train Acc: 100.00% | Val Loss: 1.12 | Val Acc: 68.20%\nEpoch 140 | Train Loss: 0.007 | Train Acc: 100.00% | Val Loss: 1.19 | Val Acc: 65.40%\nEpoch 150 | Train Loss: 0.008 | Train Acc: 100.00% | Val Loss: 1.14 | Val Acc: 66.80%\nEpoch 160 | Train Loss: 0.007 | Train Acc: 100.00% | Val Loss: 1.16 | Val Acc: 68.40%\nEpoch 170 | Train Loss: 0.008 | Train Acc: 100.00% | Val Loss: 1.11 | Val Acc: 68.20%\nEpoch 180 | Train Loss: 0.006 | Train Acc: 100.00% | Val Loss: 1.13 | Val Acc: 68.60%\nEpoch 190 | Train Loss: 0.005 | Train Acc: 100.00% | Val Loss: 1.14 | Val Acc: 68.60%\nEpoch 200 | Train Loss: 0.007 | Train Acc: 100.00% | Val Loss: 1.13 | Val Acc: 68.40%\n\nGAT test accuracy: 70.00%\n\nCPU times: user 53.4 s, sys: 2.68 s, total: 56.1 s\nWall time: 55.9 s\n\n\nThis experiment is not super rigorous: we‚Äôd need to repeat it \\(n\\) times and report the average accuracy with a standard deviation as the final result.\nIn this example, we can see that the GAT outperforms the GCN in terms of accuracy (70.00% vs.¬†67.70%), but takes longer to train (55.9s vs.¬†32.4s). It‚Äôs a tradeoff that can cause scalability issues when working with large graphs.\nThe authors obtained 72.5% for the GAT and 70.3% for the GCN, which is significantly better than what we got. The difference can be explained by additional preprocessing steps, some tweaks in the models, and a different training setting (e.g., a patience of 100 instead of a fixed number of epochs). We kept the code as simple as possible here, but feel free to modify it to improve the results.\nBeyond the accuracy score, it is interesting to see what the GAT actually learned. We can visualize it with t-SNE plot, a powerful method to plot high-dimensional data in 2D or 3D. First, let‚Äôs see what the embeddings looked like before any training: it should be random since they‚Äôre produced by randomly initialized weight matrices.\n\n# Initialize new untrained model\nuntrained_gat = GAT(dataset.num_features, 8, dataset.num_classes)\n\n# Get embeddings\nh, _ = untrained_gat(data.x, data.edge_index)\n\n# Train TSNE\ntsne = TSNE(n_components=2, learning_rate='auto',\n         init='pca').fit_transform(h.detach())\n\n# Plot TSNE\nplt.figure(figsize=(10, 10))\nplt.axis('off')\nplt.scatter(tsne[:, 0], tsne[:, 1], s=50, c=data.y)\nplt.show()\n\n/usr/local/lib/python3.7/dist-packages/sklearn/manifold/_t_sne.py:986: FutureWarning: The PCA initialization in TSNE will change to have the standard deviation of PC1 equal to 1e-4 in 1.2. This will ensure better convergence.\n  FutureWarning,\n\n\n\n\n\nIndeed, there‚Äôs no apparent structure. But do the embeddings produced by our trained model look better?\n\n# Get embeddings\nh, _ = gat(data.x, data.edge_index)\n\n# Train TSNE\ntsne = TSNE(n_components=2, learning_rate='auto',\n         init='pca').fit_transform(h.detach())\n\n# Plot TSNE\nplt.figure(figsize=(10, 10))\nplt.axis('off')\nplt.scatter(tsne[:, 0], tsne[:, 1], s=50, c=data.y)\nplt.show()\n\n/usr/local/lib/python3.7/dist-packages/sklearn/manifold/_t_sne.py:986: FutureWarning: The PCA initialization in TSNE will change to have the standard deviation of PC1 equal to 1e-4 in 1.2. This will ensure better convergence.\n  FutureWarning,\n\n\n\n\n\nThe difference is noticeable: nodes belonging to the same classes cluster together. We can see six clusters, corresponding to the six classes of papers. There are outliers, but this was to be expected: our accuracy score is far from perfect.\nPreviously, I speculated that poorly connected nodes might negatively impact performance on CiteSeer. So let‚Äôs verify that by calculating the model‚Äôs accuracy for each degree.\n\nfrom torch_geometric.utils import degree\n\n# Get model's classifications\n_, out = gat(data.x, data.edge_index)\n\n# Calculate the degree of each node\ndegrees = degree(data.edge_index[0]).numpy()\n\n# Store accuracy scores and sample sizes\naccuracies = []\nsizes = []\n\n# Accuracy for degrees between 0 and 5\nfor i in range(0, 6):\n  mask = np.where(degrees == i)[0]\n  accuracies.append(accuracy(out.argmax(dim=1)[mask], data.y[mask]))\n  sizes.append(len(mask))\n\n# Accuracy for degrees &gt; 5\nmask = np.where(degrees &gt; 5)[0]\naccuracies.append(accuracy(out.argmax(dim=1)[mask], data.y[mask]))\nsizes.append(len(mask))\n\n# Bar plot\nfig, ax = plt.subplots(figsize=(18, 9))\nax.set_xlabel('Node degree')\nax.set_ylabel('Accuracy score')\nax.set_facecolor('#EFEEEA')\nplt.bar(['0','1','2','3','4','5','&gt;5'],\n        accuracies,\n        color='#0A047A')\nfor i in range(0, 7):\n    plt.text(i, accuracies[i], f'{accuracies[i]*100:.2f}%',\n             ha='center', color='#0A047A')\nfor i in range(0, 7):\n    plt.text(i, accuracies[i]//2, sizes[i],\n             ha='center', color='white')\n\n\n\n\nThese results confirm our intuition: nodes with few neighbors are indeed harder to classify. This is due to the nature of GNNs: the more relevant connections you have, the more information you can aggregate."
  },
  {
    "objectID": "posts/2022-03-09-graph_attention_network.html#conclusion",
    "href": "posts/2022-03-09-graph_attention_network.html#conclusion",
    "title": "Graph Attention Networks: Self-Attention for GNNs",
    "section": "Conclusion",
    "text": "Conclusion\nWhile they take longer to train, GATs often provide a substantial improvement over GCNs in terms of accuracy. The self-attention mechanism automatically calculates weights instead of static coefficients to produce better embeddings. In this article,\n\nWe learned how to calculate dynamic weights using self-attention\nWe implemented and compared two architectures (a GCN and a GAT) in PyTorch Geometric\nWe visualized what the GAT learned with a t-SNE plot and the accuracy score for each degree\n\nGATs are a standard architecture in a lot of GNN applications. However, their slow training time can become a problem when applied to massive graph datasets. Scalability is an important factor in deep learning: more data can often lead to better performance.\nIn the next article, we‚Äôll see how to improve scalability with mini-batching and a new GNN architecture, called GraphSAGE.\nIf you enjoyed this tutorial, feel free to follow me on Twitter for more GNN content. Thank you, and see you in the next article! üì£"
  },
  {
    "objectID": "posts/2022-03-09-graph_attention_network.html#graph-neural-network-course",
    "href": "posts/2022-03-09-graph_attention_network.html#graph-neural-network-course",
    "title": "Graph Attention Networks: Self-Attention for GNNs",
    "section": "üåê Graph Neural Network Course",
    "text": "üåê Graph Neural Network Course\nüîé Course overview\nüìù Chapter 1: Introduction to Graph Neural Networks\nüìù Chapter 2: Graph Attention Network\nüìù Chapter 3: GraphSAGE\nüìù Chapter 4: Graph Isomorphism Network"
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "",
    "text": "When I started machine learning, I followed the guidelines and created my own features by combining multiple columns in my dataset. It‚Äôs all well and good, but the way I did it was horribly inefficient. I had to wait several minutes to do the most basic operations.\nMy problem was simple: I didn‚Äôt know the fastest way to iterate over rows in Pandas.\nI often see people online using the same techniques I used to apply. It‚Äôs not elegant but it‚Äôs ok if you don‚Äôt have much data. However, if you process more than 10k rows, it quickly becomes an obvious performance issue.\nIn this article, I‚Äôm gonna give you the best way to iterate over rows in a Pandas DataFrame, with no extra code required. It‚Äôs not just about performance: it‚Äôs also about understanding what‚Äôs going on under the hood to become a better data scientist.\nLet‚Äôs import a dataset in Pandas. In this case, I chose the one I worked on when I started: it‚Äôs time to fix my past mistakes! ü©π\nYou can run the code with the following Google Colab notebook.\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('https://raw.githubusercontent.com/mlabonne/how-to-data-science/main/data/nslkdd_test.txt')\ndf\n\n\n  \n    \n      \n\n\n\n\n\n\nduration\nprotocol_type\nservice\nflag\nsrc_bytes\ndst_bytes\nland\nwrong_fragment\nurgent\nhot\n...\ndst_host_same_srv_rate\ndst_host_diff_srv_rate\ndst_host_same_src_port_rate\ndst_host_srv_diff_host_rate\ndst_host_serror_rate\ndst_host_srv_serror_rate\ndst_host_rerror_rate\ndst_host_srv_rerror_rate\nattack_type\nother\n\n\n\n\n0\n0\ntcp\nprivate\nREJ\n0\n0\n0\n0\n0\n0\n...\n0.04\n0.06\n0.00\n0.00\n0.00\n0.0\n1.00\n1.00\nneptune\n21\n\n\n1\n0\ntcp\nprivate\nREJ\n0\n0\n0\n0\n0\n0\n...\n0.00\n0.06\n0.00\n0.00\n0.00\n0.0\n1.00\n1.00\nneptune\n21\n\n\n2\n2\ntcp\nftp_data\nSF\n12983\n0\n0\n0\n0\n0\n...\n0.61\n0.04\n0.61\n0.02\n0.00\n0.0\n0.00\n0.00\nnormal\n21\n\n\n3\n0\nicmp\neco_i\nSF\n20\n0\n0\n0\n0\n0\n...\n1.00\n0.00\n1.00\n0.28\n0.00\n0.0\n0.00\n0.00\nsaint\n15\n\n\n4\n1\ntcp\ntelnet\nRSTO\n0\n15\n0\n0\n0\n0\n...\n0.31\n0.17\n0.03\n0.02\n0.00\n0.0\n0.83\n0.71\nmscan\n11\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22539\n0\ntcp\nsmtp\nSF\n794\n333\n0\n0\n0\n0\n...\n0.72\n0.06\n0.01\n0.01\n0.01\n0.0\n0.00\n0.00\nnormal\n21\n\n\n22540\n0\ntcp\nhttp\nSF\n317\n938\n0\n0\n0\n0\n...\n1.00\n0.00\n0.01\n0.01\n0.01\n0.0\n0.00\n0.00\nnormal\n21\n\n\n22541\n0\ntcp\nhttp\nSF\n54540\n8314\n0\n0\n0\n2\n...\n1.00\n0.00\n0.00\n0.00\n0.00\n0.0\n0.07\n0.07\nback\n15\n\n\n22542\n0\nudp\ndomain_u\nSF\n42\n42\n0\n0\n0\n0\n...\n0.99\n0.01\n0.00\n0.00\n0.00\n0.0\n0.00\n0.00\nnormal\n21\n\n\n22543\n0\ntcp\nsunrpc\nREJ\n0\n0\n0\n0\n0\n0\n...\n0.08\n0.03\n0.00\n0.00\n0.00\n0.0\n0.44\n1.00\nmscan\n14\n\n\n\n\n\n22544 rows √ó 43 columns\nThis dataset has 22k rows and 43 columns with a combination of categorical and numerical values. Each row describes a connection between two computers.\nLet‚Äôs say we want to create a new feature: the total number of bytes in the connection. We just have to sum up two existing features: src_bytes and dst_bytes. Let‚Äôs see different methods to calculate this new feature."
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#iterrows",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#iterrows",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "‚ùå‚ùå 1. Iterrows",
    "text": "‚ùå‚ùå 1. Iterrows\nAccording to the official documentation, iterrows() iterates ‚Äúover the rows of a Pandas DataFrame as (index, Series) pairs‚Äù. It converts each row into a Series object, which causes two problems: 1. It can change the type of your data (dtypes); 2. The conversion greatly degrades performance.\nFor these reasons, the ill-named iterrows() is the WORST possible method to actually iterate over rows.\n\n%%timeit -n 10\n# Iterrows\ntotal = []\nfor index, row in df.iterrows():\n    total.append(row['src_bytes'] + row['dst_bytes'])\n\n10 loops, best of 5: 1.07 s per loop\n\n\nNow let‚Äôs see slightly better techniques‚Ä¶"
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#for-loop-with-.loc-or-.iloc-3-faster",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#for-loop-with-.loc-or-.iloc-3-faster",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "‚ùå 2. For loop with .loc or .iloc (3√ó faster)",
    "text": "‚ùå 2. For loop with .loc or .iloc (3√ó faster)\nThis is what I used to do when I started: a basic for loop to select rows by index (with .loc or .iloc).\nWhy is it bad? Because DataFrames are not designed for this purpose. As with the previous method, rows are converted into Pandas Series objects, which degrades performance.\nInterestingly enough, .iloc is faster than .loc. It makes sense since Python doesn‚Äôt have to check user-defined labels and directly look at where the row is stored in memory.\n\n%%timeit -n 10\n# For loop with .loc\ntotal = []\nfor index in range(len(df)):\n    total.append(df['src_bytes'].loc[index] + df['dst_bytes'].loc[index])\n\n10 loops, best of 5: 600 ms per loop\n\n\n\n%%timeit -n 10\n# For loop with .iloc\ntotal = []\nfor index in range(len(df)):\n    total.append(df['src_bytes'].iloc[index] + df['dst_bytes'].iloc[index])\n\n10 loops, best of 5: 377 ms per loop\n\n\nEven this basic for loop with .iloc is 3 times faster than the first method!"
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#apply-4-faster",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#apply-4-faster",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "‚ùå 3. Apply (4√ó faster)",
    "text": "‚ùå 3. Apply (4√ó faster)\nThe apply() method is another popular choice to iterate over rows. It creates code that is easy to understand but at a cost: performance is nearly as bad as the previous for loop.\nThis is why I would strongly advise you to avoid this function for this specific purpose (it‚Äôs fine for other applications).\nNote that I convert the DataFrame into a list using the to_list() method to obtain identical results.\n\n%%timeit -n 10\n# Apply\ndf.apply(lambda row: row['src_bytes'] + row['dst_bytes'], axis=1).to_list()\n\n10 loops, best of 5: 282 ms per loop\n\n\nThe apply() method is a for loop in disguise, which is why the performance doesn‚Äôt improve that much: it‚Äôs only 4 times faster than the first technique."
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#itertuples-10-faster",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#itertuples-10-faster",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "‚ùå 4. Itertuples (10√ó faster)",
    "text": "‚ùå 4. Itertuples (10√ó faster)\nIf you know about iterrows(), you probably know about itertuples(). According to the official documentation, it iterates ‚Äúover the rows of a DataFrame as namedtuples of the values‚Äù. In practice, it means that rows are converted into tuples, which are much lighter objects than Pandas Series.\nThis is why itertuples() is a better version of iterrows(). This time, we need to access the values with an attribute (or an index). If you want to access them with a string (e.g., if there‚Äôs a space in the string), you can use the getattr() function instead.\n\n%%timeit -n 10\n# Itertuples\ntotal = []\nfor row in df.itertuples():\n    total.append(row.src_bytes + row.dst_bytes)\n\n10 loops, best of 5: 99.3 ms per loop\n\n\nThis is starting to look better: it is now 10 times faster than iterrows()."
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#list-comprehensions-200-faster",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#list-comprehensions-200-faster",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "‚ùå 5. List comprehensions (200√ó faster)",
    "text": "‚ùå 5. List comprehensions (200√ó faster)\nList comprehensions are a fancy way to iterate over a list as a one-liner.\nFor instance, [print(i) for i in range(10)] prints numbers from 0 to 9 without any explicit for loop. I say ‚Äúexplicit‚Äù because Python actually processes it as a for loop if we look at the bytecode.\nSo why is it faster? Quite simply because we don‚Äôt call the .append() method in this version.\n\n%%timeit -n 100\n# List comprehension\n[src + dst for src, dst in zip(df['src_bytes'], df['dst_bytes'])]\n\n100 loops, best of 5: 5.54 ms per loop\n\n\nIndeed, this technique is 200 times faster than the first one! But we can still do better."
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#pandas-vectorization-1500-faster",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#pandas-vectorization-1500-faster",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "‚úÖ 6. Pandas vectorization (1500√ó faster)",
    "text": "‚úÖ 6. Pandas vectorization (1500√ó faster)\nUntil now, all the techniques used simply add up single values. Instead of adding single values, why not group them into vectors to sum them up? The difference between adding two numbers or two vectors is not significant for a CPU, which should speed things up.\nOn top of that, Pandas can process Series objects in parallel, using every CPU core available!\nThe syntax is also the simplest imaginable: this solution is extremely intuitive. Under the hood, Pandas takes care of vectorizing our data with an optimized C code using contiguous memory blocks.\n\n%%timeit -n 1000\n# Vectorization\n(df['src_bytes'] + df['dst_bytes']).to_list()\n\n1000 loops, best of 5: 734 ¬µs per loop\n\n\nThis code is 1500 times faster than iterrows() and it is even simpler to write."
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#numpy-vectorization-1900-faster",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#numpy-vectorization-1900-faster",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "‚úÖ‚úÖ 7. NumPy vectorization (1900√ó faster)",
    "text": "‚úÖ‚úÖ 7. NumPy vectorization (1900√ó faster)\nNumPy is designed to handle scientific computing. It has less overhead than Pandas methods since rows and dataframes all become np.array. It relies on the same optimizations as Pandas vectorization.\nThere are two ways of converting a Series into a np.array: using .values or .to_numpy(). The former has been deprecated for years, which is why we‚Äôre gonna use .to_numpy() in this example.\n\n%%timeit -n 1000\n# Numpy vectorization\n(df['src_bytes'].to_numpy() + df['dst_bytes'].to_numpy()).tolist()\n\n1000 loops, best of 5: 575 ¬µs per loop\n\n\nWe found our winner with a technique that is 1900 times faster than our first competitor! Let‚Äôs wrap things up."
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#conclusion",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#conclusion",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "Conclusion",
    "text": "Conclusion\n\n\n\nDon‚Äôt be like me: if you need to iterate over rows in a DataFrame, vectorization is the way to go! You can find the code to reproduce the experiments at this address. Vectorization is not harder to read, it doesn‚Äôt take longer to write, and the performance gain is incredible.\nIt‚Äôs not just about performance: understanding how each method works under the hood helped me to write better code. Performance gains are always based on the same techniques: transforming data into vectors and matrices to take advantage of parallel processing. Alas, this is often at the expense of readability. But it doesn‚Äôt have to be.\nIterating over rows is just an example but it shows that, sometimes, you can have the cake and eat it. üéÇ\nIf you liked this article, follow me on Twitter @maximelabonne for more tips about data science and machine learning!"
  },
  {
    "objectID": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#bonus",
    "href": "posts/2022-03-21-efficiently_iterating_over_rows_in_a_pandas_dataframe.html#bonus",
    "title": "Efficiently iterating over rows in a Pandas DataFrame",
    "section": "üìà Bonus",
    "text": "üìà Bonus\nWe can measure the performance of each method depending on the size of the DataFrame. I reimplemented all of them in this dummy example using perfplot to show that the leaderboard might be different under 300 rows. Anyway, such a dataset would be so small that we wouldn‚Äôt need much optimization.\n\n!pip install -q perfplot\n\nimport perfplot \nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 22})\n\n# Techniques\ndef forloop(df):\n    total = []\n    for index in range(len(df)):\n        total.append(df['col1'].iloc[index] \n                   + df['col2'].iloc[index])\n    return total\n\ndef itertuples(df):\n    total = []\n    for row in df.itertuples():\n        total.append(row[1] + row[2])\n    return total\n\ndef iterrows(df):\n    total = []\n    for index, row in df.iterrows():\n        total.append(row['col1']\n                   + row['col2'])\n    return total\n\ndef apply(df):\n    return df.apply(lambda row: row['col1']\n                              + row['col2'], axis=1).to_list()\n\ndef comprehension(df):\n    return [src + dst for src, dst in zip(df['col1'], df['col2'])]\n\ndef pd_vectorize(df):\n    return (df['col1'] + df['col2']).to_list()\n\ndef np_vectorize(df):\n    return (df['col1'].to_numpy() + df['col2'].to_numpy()).tolist()\n\n# Perfplot\nfunctions = [iterrows, forloop, apply, itertuples,\n             comprehension, pd_vectorize, np_vectorize]\ndf = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n\nout = perfplot.bench(\n      setup=lambda n: pd.concat([df]*n, ignore_index=True),\n      kernels=functions,\n      labels=[str(f.__name__) for f in functions],\n      n_range=[2**n for n in range(20)],\n      xlabel='Number of rows',\n)\n\nplt.figure(figsize=(20,12))\nout.show()\n\n\n\n\n\n\n\n\n\n\n(8.117999999999996e-06, 51.558470168)"
  },
  {
    "objectID": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html",
    "href": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html",
    "title": "What is a Tensor in Machine Learning?",
    "section": "",
    "text": "What is a tensor, exactly?\nMost deep learning practitioners know about them but can‚Äôt pinpoint an exact definition.\nTensorFlow, PyTorch: every deep learning framework relies on the same basic object: tensors. They‚Äôre used to store almost everything in deep learning: input data, weights, biases, predictions, etc.\nAnd yet, their definition is incredibly fuzzy: the Wikipedia category alone has over 100 pages related to tensors.\nIn this article, we‚Äôll give a definitive answer to the following question: what is a tensor in neural networks?"
  },
  {
    "objectID": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#tensors-in-computer-science",
    "href": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#tensors-in-computer-science",
    "title": "What is a Tensor in Machine Learning?",
    "section": "üíª Tensors in computer science",
    "text": "üíª Tensors in computer science\nSo why are there so many definitions?\nIt‚Äôs quite simple: different fields have different definitions. Tensors in mathematics are not quite the same as tensors in physics, which are different from tensors in computer science.\n\n\n\nThese definitions can be divided into two categories: tensors as a data structure or as objects (in an object-oriented programming sense).\n\nData structure: this is the definition we use in computer science. Tensors are multidimensional arrays that store a specific type of value.\nObjects: this is the definition used in other fields. In mathematics and physics, tensors are not just a data structure: they also have a list of properties, like a specific product.\n\nThis is why you see a lot of people (sometimes quite pedantically) saying ‚Äútensors are not n-dimensional arrays/matrices‚Äù: they don‚Äôt talk about data structures, but about objects with properties.\nEven the same words have different meanings. For instance, in computer science, a 2D tensor is a matrix (it‚Äôs a tensor of rank 2). In linear algebra, a tensor with 2 dimensions means it only stores two values. The rank also has a completely different definition: it is the maximum number of its linearly independent column (or row) vectors.\nIn computer science, we‚Äôre only interested in a definition focused on the data structure. From this point of view, tensors truly are a generalization in \\(n\\) dimensions of matrices.\nBut we‚Äôre still missing an important nuance when talking about tensors specifically in the context of deep learning‚Ä¶"
  },
  {
    "objectID": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#tensors-in-deep-learning",
    "href": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#tensors-in-deep-learning",
    "title": "What is a Tensor in Machine Learning?",
    "section": "üß† Tensors in deep learning",
    "text": "üß† Tensors in deep learning\n\n Icons created by Freepik and smashingstocks - Flaticon\n\nSo why are they called ‚Äútensors‚Äù instead of ‚Äúmultidimensional arrays‚Äù? Ok, it is shorter, but is it all there is to it? Actually, people make an implicit assumption when they talk about tensors.\nPyTorch‚Äôs official documentation gives us a practical answer:\n\nThe biggest difference between a numpy array and a PyTorch Tensor is that a PyTorch Tensor can run on either CPU or GPU.\n\nIn deep learning, we need performance to compute a lot of matrix multiplications in a highly parallel way. These matrices (and n-dimensional arrays in general) are generally stored and processed on GPUs to speed up training and inference times.\nThis is what was missing in our previous definition: tensors in deep learning are not just n-dimensional arrays, there‚Äôs also the implicit assumption they can be run on a GPU."
  },
  {
    "objectID": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#numpy-vs-pytorch",
    "href": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#numpy-vs-pytorch",
    "title": "What is a Tensor in Machine Learning?",
    "section": "‚öîÔ∏è NumPy vs PyTorch",
    "text": "‚öîÔ∏è NumPy vs PyTorch\nLet‚Äôs see the difference between NumPy arrays and PyTorch tensors.\n\n\n\nThese two objects are very similar: we can initialize a 1D array and a 1D tensor with nearly the same syntax. They also share a lot of methods and can be easily converted into one another.\nYou can find the code used in this article at this address\n\nimport numpy as np\nimport torch\n\narray = np.array([1, 2, 3])\nprint(f'NumPy Array: {array}')\n\ntensor = torch.tensor([1, 2, 3])\nprint(f'PyTorch Tensor: {tensor}')\n\nNumPy Array: [1 2 3]\nPyTorch Tensor: tensor([1, 2, 3])\n\n\nInitializing 2D arrays and 2D tensors is not more complicated.\n\nx = np.array([[1, 2, 3],\n              [4, 5, 6]])\nprint(f'NumPy Array:\\n{x}')\n\nx = torch.tensor([[1, 2, 3],\n                  [4, 5, 6]])\nprint(f'\\nPyTorch Tensor:\\n{x}')\n\nNumPy Array:\n[[1 2 3]\n [4 5 6]]\n\nPyTorch Tensor:\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n\n\nWe said that the only difference between tensors and arrays was the fact that tensors can be run on GPUs. So in the end, this distinction is based on performance. But is this boost that important?\nLet‚Äôs compare the performance between NumPy arrays and PyTorch tensors on matrix multiplication. In the following example, we randomly initialize 4D arrays/tensors and multiply them.\n\n# You need to run this code on a computer with a GPU\ndevice = torch.device(\"cuda\")\n\n# 4D arrays\narray1 = np.random.rand(100, 100, 100, 100)\narray2 = np.random.rand(100, 100, 100, 100)\n\n# 4D tensors\ntensor1 = torch.rand(100, 100, 100, 100).to(device)\ntensor2 = torch.rand(100, 100, 100, 100).to(device)\n\n\n%%timeit\nnp.matmul(array1, array2)\n\n1 loop, best of 5: 1.32 s per loop\n\n\n\n%%timeit\ntorch.matmul(tensor1, tensor2)\n\n1000 loops, best of 5: 25.2 ms per loop\n\n\nAs we can see, PyTorch tensors completed outperformed NumPy arrays: they completed the multiplication 52 times faster!\nWe could attribute this performance to different factors, such as: * NumPy arrays use a float64 format, whereas PyTorch tensors leverage the more efficient float32 format. However, even when NumPy arrays are converted to float32, PyTorch tensors are still 40 times faster. * PyTorch tensors are stored on a GPU, unlike NumPy arrays. But if we repeat the same experiment on a CPU, PyTorch tensors still manage to be 2.8 times faster on average.\nEven when combining both factors, PyTorch tensors prove to be 1.4 times faster, showing that NumPy arrays are truly less performant for matrix multiplication.\nThis is the true power of tensors: they‚Äôre blazingly fast! Performance might vary depending on the dimensions, the implementation, and the hardware, but this speed is the reason why tensors (and not arrays) are so common in deep learning."
  },
  {
    "objectID": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#conclusion",
    "href": "posts/2022-03-28-what_is_a_tensor_in_deep_learning.html#conclusion",
    "title": "What is a Tensor in Machine Learning?",
    "section": "Conclusion",
    "text": "Conclusion\nIn this article, we wrote a definition of tensors based on:\n\nTheir use in computer science (data structure);\nMore specifically, in deep learning (they can run on GPUs).\n\nHere‚Äôs how we can summarize it in one sentence:\n\nTensors are n-dimensional arrays with the implicit assumption that they can run on a GPU.\n\nFinally, we saw the difference in performance between tensors and arrays, which motivates the need for tensors in deep learning.\nSo next time someone tries to explain to you that tensors are not exactly a generalization of matrices, you‚Äôll know that they‚Äôre right in a particular definition of tensors, but not in the computer science/deep learning one.\nIf you‚Äôre looking for more data science and machine learning content in n-dimensions, please follow me on twitter @maximelabonne. üì£"
  },
  {
    "objectID": "posts/2022-04-06-graphsage.html",
    "href": "posts/2022-04-06-graphsage.html",
    "title": "GraphSAGE: Scaling up Graph Neural Networks",
    "section": "",
    "text": "What do UberEats and Pinterest have in common?\nThey both use GraphSAGE to power their recommender systems on a massive scale: millions and billions of nodes and edges.\nIn this tutorial, we‚Äôll use a dataset with 20k nodes instead of billions because Google Colab cannot handle our ambitions. We will stick to the original GraphSAGE architecture, but the previous variants also bring exciting features we will discuss.\nYou can run the code with the following Google Colab notebook.\n# Install PyTorch Geometric\nimport torch\n!pip install -q torch-scatter -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q torch-sparse -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q git+https://github.com/pyg-team/pytorch_geometric.git\n\n# Visualization\nimport networkx as nx\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.dpi'] = 300\nplt.rcParams.update({'font.size': 24})"
  },
  {
    "objectID": "posts/2022-04-06-graphsage.html#i.-pubmed-dataset",
    "href": "posts/2022-04-06-graphsage.html#i.-pubmed-dataset",
    "title": "GraphSAGE: Scaling up Graph Neural Networks",
    "section": "üåê I. PubMed dataset",
    "text": "üåê I. PubMed dataset\n\n\n\nAs we saw in the previous article, PubMed is part of the Planetoid dataset (MIT license). Here‚Äôs a quick summary:\n\nIt contains 19,717 scientific publications about diabetes from PubMed‚Äôs database\nNode features are TF-IDF weighted word vectors with 500 dimensions, which is an efficient way of summarizing documents without transformers\nThe task is quite straightforward since it‚Äôs a multi-class classification with three categories: diabetes mellitus experimental, diabetes mellitus type 1, and diabetes mellitus type 2\n\nLet‚Äôs load the dataset and print some information about the graph.\n\nfrom torch_geometric.datasets import Planetoid\n\ndataset = Planetoid(root='.', name=\"Pubmed\")\ndata = dataset[0]\n\n# Print information about the dataset\nprint(f'Dataset: {dataset}')\nprint('-------------------')\nprint(f'Number of graphs: {len(dataset)}')\nprint(f'Number of nodes: {data.x.shape[0]}')\nprint(f'Number of features: {dataset.num_features}')\nprint(f'Number of classes: {dataset.num_classes}')\n\n# Print information about the graph\nprint(f'\\nGraph:')\nprint('------')\nprint(f'Training nodes: {sum(data.train_mask).item()}')\nprint(f'Evaluation nodes: {sum(data.val_mask).item()}')\nprint(f'Test nodes: {sum(data.test_mask).item()}')\nprint(f'Edges are directed: {data.is_directed()}')\nprint(f'Graph has isolated nodes: {data.has_isolated_nodes()}')\nprint(f'Graph has loops: {data.has_self_loops()}')\n\nDataset: Pubmed()\n-------------------\nNumber of graphs: 1\nNumber of nodes: 19717\nNumber of features: 500\nNumber of classes: 3\n\nGraph:\n------\nTraining nodes: 60\nEvaluation nodes: 500\nTest nodes: 1000\nEdges are directed: False\nGraph has isolated nodes: False\nGraph has loops: False\n\n\nAs we can see, PubMed has an insanely low number of training nodes compared to the whole graph. There are only 60 samples to learn how to classify the 1000 test nodes.\nDespite this challenge, GNNs manage to obtain high levels of accuracy. Here‚Äôs the leaderboard of known techniques (a more exhaustive benchmark can be found on PapersWithCode):\n\n\n\nModel\nüìùPubMed (accuracy)\n\n\n\n\nMultilayer Perceptron\n71.4%\n\n\nGraph Convolutional Network\n79.0% ¬± 0.3%\n\n\nGraph Attention Network\n79.0% ¬± 0.3%\n\n\nGraphSAGE\n???\n\n\n\nI couldn‚Äôt find any result for GraphSAGE on PubMed with this specific setting (60 training nodes, 1000 test nodes), so I don‚Äôt expect a great accuracy. But another metric can be just as relevant when working with large graphs: training time."
  },
  {
    "objectID": "posts/2022-04-06-graphsage.html#ii.-graphsage-in-theory",
    "href": "posts/2022-04-06-graphsage.html#ii.-graphsage-in-theory",
    "title": "GraphSAGE: Scaling up Graph Neural Networks",
    "section": "üßô‚Äç‚ôÇÔ∏è II. GraphSAGE in theory",
    "text": "üßô‚Äç‚ôÇÔ∏è II. GraphSAGE in theory\n\n\n\nThe GraphSAGE algorithm can be divided into two steps:\n\nNeighbor sampling;\nAggregation.\n\n\nüé∞ A. Neighbor sampling\nNeighbor sampling relies on a classic technique used to train neural networks: mini-batch gradient descent.\nMini-batch gradient descent works by breaking down a dataset into smaller batches. During training, we compute the gradient for every mini-batch instead of every epoch (batch gradient descent) or every training sample (stochastic gradient descent). Mini-batching has several benefits:\n\nImproved accuracy ‚Äî mini-batches help to reduce overfitting (gradients are averaged), as well as variance in error rates\nIncreased speed ‚Äî mini-batches are processed in parallel and take less time to train than larger batches\nImproved scalability ‚Äî an entire dataset can exceed the GPU memory, but smaller batches can get around this limitation\n\nMore advanced optimizes like Adam also rely on mini-batching. However, it is not as straightforward with graph data since splitting the dataset into smaller chunks would break essential connections between nodes.\nSo, what can we do? In recent years, researchers developed different strategies to create graph mini-batches. The one we‚Äôre interested in is called neighbor sampling). There are many other techniques you can find on PyG‚Äôs documentation, such as subgraph clustering).\n\n\n\n\n\n\nNeighbor sampling considers only a fixed number of random neighbors. Here‚Äôs the process:\n\nThe sampler randomly selects a defined number of neighbors (1 hop), neighbors of neighbors (2 hops), etc. we would like to have\nThe sampler outputs a subgraph containing the target and sampled nodes\n\nThis process is repeated for every node in a list or the entirety of the graph. However, creating a subgraph for each node is not efficient, which is why we can process them in batches instead. In this case, each subgraph is shared by multiple target nodes.\nNeighbor sampling has an added benefit. Sometimes, we observe extremely popular nodes that act like hubs, such as celebrities on social media. Calculating embeddings for these nodes can be computationally very expensive since it requires calculating the hidden vectors of thousands or even millions of neighbors. GraphSAGE fixes this issue by only considering a fixed number of neighbors.\nIn PyG, neighbor sampling is implemented through the NeighborLoader object. Let‚Äôs say we want 5 neighbors and 10 of their neighbors (num_neighbors). As we discussed, we can also specify a batch_size to speed up the process by creating subgraphs for multiple target nodes.\n\nfrom torch_geometric.loader import NeighborLoader\nfrom torch_geometric.utils import to_networkx\n\n# Create batches with neighbor sampling\ntrain_loader = NeighborLoader(\n    data,\n    num_neighbors=[5, 10],\n    batch_size=16,\n    input_nodes=data.train_mask,\n)\n\n# Print each subgraph\nfor i, subgraph in enumerate(train_loader):\n    print(f'Subgraph {i}: {subgraph}')\n\n# Plot each subgraph\nfig = plt.figure(figsize=(16,16))\nfor idx, (subdata, pos) in enumerate(zip(train_loader, [221, 222, 223, 224])):\n    G = to_networkx(subdata, to_undirected=True)\n    ax = fig.add_subplot(pos)\n    ax.set_title(f'Subgraph {idx}')\n    plt.axis('off')\n    nx.draw_networkx(G,\n                    pos=nx.spring_layout(G, seed=0),\n                    with_labels=True,\n                    node_size=200,\n                    node_color=subdata.y,\n                    cmap=\"cool\",\n                    font_size=10\n                    )\nplt.show()\n\nSubgraph 0: Data(x=[389, 500], edge_index=[2, 448], y=[389], train_mask=[389], val_mask=[389], test_mask=[389], batch_size=16)\nSubgraph 1: Data(x=[264, 500], edge_index=[2, 314], y=[264], train_mask=[264], val_mask=[264], test_mask=[264], batch_size=16)\nSubgraph 2: Data(x=[283, 500], edge_index=[2, 330], y=[283], train_mask=[283], val_mask=[283], test_mask=[283], batch_size=16)\nSubgraph 3: Data(x=[189, 500], edge_index=[2, 229], y=[189], train_mask=[189], val_mask=[189], test_mask=[189], batch_size=12)\n\n\n\n\n\nWe created four subgraphs of various sizes. It allows us to process them in parallel and they‚Äôre easier to fit on a GPU since they‚Äôre smaller.\nThe number of neighbors is an important parameter since pruning our graph removes a lot of information. How much, exactly? Well, quite a lot. We can visualize this effect by looking at the node degrees (number of neighbors).\n\nfrom torch_geometric.utils import degree\nfrom collections import Counter\n\ndef plot_degree(data):\n    # Get list of degrees for each node\n    degrees = degree(data.edge_index[0]).numpy()\n\n    # Count the number of nodes for each degree\n    numbers = Counter(degrees)\n\n    # Bar plot\n    fig, ax = plt.subplots(figsize=(14, 6))\n    ax.set_xlabel('Node degree')\n    ax.set_ylabel('Number of nodes')\n    plt.bar(numbers.keys(),\n            numbers.values(),\n            color='#0A047A')\n\n# Plot node degrees from the original graph\nplot_degree(data)\n\n# Plot node degrees from the last subgraph\nplot_degree(subdata)\n\n\n\n\n\n\n\nThe first plot shows the original distribution of node degrees, and the second one shows the distribution we obtain after neighbor sampling. In this example, we chose to only consider five neighbors, which is much lower than the original maximal value. It‚Äôs important to remember this tradeoff when talking about GraphSAGE.\nPinSAGE proposes another solution. Instead of neighbor sampling, PinSAGE simulates random walks for each node, which captures a better representation of their neighborhoods. Then, it selects a predefined number of neighbors with the highest visit counts. This technique allows PinSAGE to consider the importance of each neighbor while controlling the size of the computation graph.\n\n\nüí• B. Aggregation\nThe aggregation process determines how to combine the feature vectors to produce the node embeddings. The original paper presents three ways of aggregating features:\n\nMean aggregator\nLSTM aggregator\nPooling aggregator\n\n\n\n\n\n\n\nThe mean aggregator is the simplest one. The idea is close to a GCN approach: 1. The hidden features of the target node and its selected neighbors are averaged (nodes in \\(\\mathcal{\\tilde{N}}_i\\)). 2. A linear transformation with a weight matrix \\(\\textbf{W}\\) is applied.\nIn other words, we can write:\n\\[\\textbf{h}_i' = \\textbf{W} \\cdot mean_{j \\in \\mathcal{\\tilde{N}}_i}(\\textbf{h}_j)\\]\nThe result can then be fed to a nonlinear activation function like ReLU.\nThe LSTM aggregator may seem counter-intuitive because this architecture is sequential: it assigns an order to our unordered nodes. This is why the authors randomly shuffle them to force the LSTM only to consider the hidden features. Nevertheless, it is the best-performing technique in their benchmarks.\nThe pooling aggregator feeds each neighbor‚Äôs hidden vector to a feedforward neural network. Then, an elementwise max operation is applied to the result to keep the highest value for each feature."
  },
  {
    "objectID": "posts/2022-04-06-graphsage.html#iii.-graphsage-in-pytorch-geometric",
    "href": "posts/2022-04-06-graphsage.html#iii.-graphsage-in-pytorch-geometric",
    "title": "GraphSAGE: Scaling up Graph Neural Networks",
    "section": "üß† III. GraphSAGE in PyTorch Geometric",
    "text": "üß† III. GraphSAGE in PyTorch Geometric\nWe can easily implement a GraphSAGE architecture in PyTorch Geometric with the SAGEConv layer. This implementation uses two weight matrices instead of one, like UberEats‚Äô version of GraphSAGE:\n\\[\\textbf{h}_i' = \\textbf{W}_1\\textbf{h}_i + \\textbf{W}_2 \\cdot mean_{j \\in \\mathcal{N}_i}(\\textbf{h}_j)\\]\nLet‚Äôs create a network with two SAGEConv layers: * The first one uses \\(ReLU\\) as the activation function and a dropout layer; * The second one directly outputs the node embeddings.\nAs we‚Äôre dealing with a multi-class classification task, we‚Äôll use the cross-entropy loss as our loss function. I also added an L2 regularization of 0.0005 for good measure.\nTo see the benefits of GraphSAGE, let‚Äôs compare it with a GCN and a GAT without any sampling.\n\nimport torch\nfrom torch.nn import Linear, Dropout\nfrom torch_geometric.nn import SAGEConv, GATv2Conv, GCNConv\nimport torch.nn.functional as F\n\n\nclass GraphSAGE(torch.nn.Module):\n  \"\"\"GraphSAGE\"\"\"\n  def __init__(self, dim_in, dim_h, dim_out):\n    super().__init__()\n    self.sage1 = SAGEConv(dim_in, dim_h)\n    self.sage2 = SAGEConv(dim_h, dim_out)\n    self.optimizer = torch.optim.Adam(self.parameters(),\n                                      lr=0.01,\n                                      weight_decay=5e-4)\n\n  def forward(self, x, edge_index):\n    h = self.sage1(x, edge_index).relu()\n    h = F.dropout(h, p=0.5, training=self.training)\n    h = self.sage2(h, edge_index)\n    return F.log_softmax(h, dim=1)\n\n  def fit(self, data, epochs):\n    criterion = torch.nn.CrossEntropyLoss()\n    optimizer = self.optimizer\n\n    self.train()\n    for epoch in range(epochs+1):\n      total_loss = 0\n      acc = 0\n      val_loss = 0\n      val_acc = 0\n\n      # Train on batches\n      for batch in train_loader:\n        optimizer.zero_grad()\n        out = self(batch.x, batch.edge_index)\n        loss = criterion(out[batch.train_mask], batch.y[batch.train_mask])\n        total_loss += loss\n        acc += accuracy(out[batch.train_mask].argmax(dim=1), \n                        batch.y[batch.train_mask])\n        loss.backward()\n        optimizer.step()\n\n        # Validation\n        val_loss += criterion(out[batch.val_mask], batch.y[batch.val_mask])\n        val_acc += accuracy(out[batch.val_mask].argmax(dim=1), \n                            batch.y[batch.val_mask])\n\n      # Print metrics every 10 epochs\n      if(epoch % 10 == 0):\n          print(f'Epoch {epoch:&gt;3} | Train Loss: {total_loss/len(train_loader):.3f} '\n                f'| Train Acc: {acc/len(train_loader)*100:&gt;6.2f}% | Val Loss: '\n                f'{val_loss/len(train_loader):.2f} | Val Acc: '\n                f'{val_acc/len(train_loader)*100:.2f}%')\n\nclass GAT(torch.nn.Module):\n  \"\"\"Graph Attention Network\"\"\"\n  def __init__(self, dim_in, dim_h, dim_out, heads=8):\n    super().__init__()\n    self.gat1 = GATv2Conv(dim_in, dim_h, heads=heads)\n    self.gat2 = GATv2Conv(dim_h*heads, dim_out, heads=heads)\n    self.optimizer = torch.optim.Adam(self.parameters(),\n                                      lr=0.005,\n                                      weight_decay=5e-4)\n\n  def forward(self, x, edge_index):\n    h = F.dropout(x, p=0.6, training=self.training)\n    h = self.gat1(x, edge_index)\n    h = F.elu(h)\n    h = F.dropout(h, p=0.6, training=self.training)\n    h = self.gat2(h, edge_index)\n    return F.log_softmax(h, dim=1)\n\n  def fit(self, data, epochs):\n    criterion = torch.nn.CrossEntropyLoss()\n    optimizer = self.optimizer\n\n    self.train()\n    for epoch in range(epochs+1):\n        # Training\n        optimizer.zero_grad()\n        out = self(data.x, data.edge_index)\n        loss = criterion(out[data.train_mask], data.y[data.train_mask])\n        acc = accuracy(out[data.train_mask].argmax(dim=1),\n                       data.y[data.train_mask])\n        loss.backward()\n        optimizer.step()\n\n        # Validation\n        val_loss = criterion(out[data.val_mask], data.y[data.val_mask])\n        val_acc = accuracy(out[data.val_mask].argmax(dim=1),\n                           data.y[data.val_mask])\n\n        # Print metrics every 10 epochs\n        if(epoch % 10 == 0):\n            print(f'Epoch {epoch:&gt;3} | Train Loss: {loss:.3f} | Train Acc:'\n                  f' {acc*100:&gt;6.2f}% | Val Loss: {val_loss:.2f} | '\n                  f'Val Acc: {val_acc*100:.2f}%')\n\nclass GCN(torch.nn.Module):\n  \"\"\"Graph Convolutional Network\"\"\"\n  def __init__(self, dim_in, dim_h, dim_out):\n    super().__init__()\n    self.gcn1 = GCNConv(dim_in, dim_h)\n    self.gcn2 = GCNConv(dim_h, dim_out)\n    self.optimizer = torch.optim.Adam(self.parameters(),\n                                      lr=0.01,\n                                      weight_decay=5e-4)\n\n  def forward(self, x, edge_index):\n    h = F.dropout(x, p=0.5, training=self.training)\n    h = self.gcn1(h, edge_index).relu()\n    h = F.dropout(h, p=0.5, training=self.training)\n    h = self.gcn2(h, edge_index)\n    return F.log_softmax(h, dim=1)\n\n  def fit(self, data, epochs):\n    criterion = torch.nn.CrossEntropyLoss()\n    optimizer = self.optimizer\n\n    self.train()\n    for epoch in range(epochs+1):\n        # Training\n        optimizer.zero_grad()\n        out = self(data.x, data.edge_index)\n        loss = criterion(out[data.train_mask], data.y[data.train_mask])\n        acc = accuracy(out[data.train_mask].argmax(dim=1),\n                       data.y[data.train_mask])\n        loss.backward()\n        optimizer.step()\n\n        # Validation\n        val_loss = criterion(out[data.val_mask], data.y[data.val_mask])\n        val_acc = accuracy(out[data.val_mask].argmax(dim=1),\n                           data.y[data.val_mask])\n\n        # Print metrics every 10 epochs\n        if(epoch % 10 == 0):\n            print(f'Epoch {epoch:&gt;3} | Train Loss: {loss:.3f} | Train Acc:'\n                  f' {acc*100:&gt;6.2f}% | Val Loss: {val_loss:.2f} | '\n                  f'Val Acc: {val_acc*100:.2f}%')\n            \ndef accuracy(pred_y, y):\n    \"\"\"Calculate accuracy.\"\"\"\n    return ((pred_y == y).sum() / len(y)).item()\n\n@torch.no_grad()\ndef test(model, data):\n    \"\"\"Evaluate the model on test set and print the accuracy score.\"\"\"\n    model.eval()\n    out = model(data.x, data.edge_index)\n    acc = accuracy(out.argmax(dim=1)[data.test_mask], data.y[data.test_mask])\n    return acc\n\nWith GraphSAGE, we loop through batches (our four subgraphs) created by the neighbor sampling process. The way we calculate the accuracy and the validation loss is also different because of that.\n\n%%time\n\n# Create GraphSAGE\ngraphsage = GraphSAGE(dataset.num_features, 64, dataset.num_classes)\nprint(graphsage)\n\n# Train\ngraphsage.fit(data, 200)\n\n# Test\nprint(f'\\nGraphSAGE test accuracy: {test(graphsage, data)*100:.2f}%\\n')\n\nGraphSAGE(\n  (sage1): SAGEConv(500, 64)\n  (sage2): SAGEConv(64, 3)\n)\nEpoch   0 | Train Loss: 0.332 | Train Acc:  30.24% | Val Loss: 1.13 | Val Acc: 18.33%\nEpoch  10 | Train Loss: 0.020 | Train Acc: 100.00% | Val Loss: 0.63 | Val Acc: 72.50%\nEpoch  20 | Train Loss: 0.005 | Train Acc: 100.00% | Val Loss: 0.57 | Val Acc: 73.17%\nEpoch  30 | Train Loss: 0.005 | Train Acc: 100.00% | Val Loss: 0.49 | Val Acc: 79.96%\nEpoch  40 | Train Loss: 0.002 | Train Acc: 100.00% | Val Loss: 0.63 | Val Acc: 63.33%\nEpoch  50 | Train Loss: 0.009 | Train Acc: 100.00% | Val Loss: 0.61 | Val Acc: 75.56%\nEpoch  60 | Train Loss: 0.003 | Train Acc: 100.00% | Val Loss: 0.77 | Val Acc: 71.25%\nEpoch  70 | Train Loss: 0.003 | Train Acc: 100.00% | Val Loss: 0.50 | Val Acc: 79.79%\nEpoch  80 | Train Loss: 0.003 | Train Acc: 100.00% | Val Loss: 0.54 | Val Acc: 76.74%\nEpoch  90 | Train Loss: 0.002 | Train Acc: 100.00% | Val Loss: 0.65 | Val Acc: 76.74%\nEpoch 100 | Train Loss: 0.002 | Train Acc: 100.00% | Val Loss: 0.49 | Val Acc: 78.87%\nEpoch 110 | Train Loss: 0.002 | Train Acc: 100.00% | Val Loss: 0.59 | Val Acc: 78.87%\nEpoch 120 | Train Loss: 0.003 | Train Acc: 100.00% | Val Loss: 0.61 | Val Acc: 73.33%\nEpoch 130 | Train Loss: 0.002 | Train Acc: 100.00% | Val Loss: 0.74 | Val Acc: 66.67%\nEpoch 140 | Train Loss: 0.002 | Train Acc: 100.00% | Val Loss: 0.74 | Val Acc: 59.35%\nEpoch 150 | Train Loss: 0.001 | Train Acc: 100.00% | Val Loss: 0.82 | Val Acc: 65.06%\nEpoch 160 | Train Loss: 0.002 | Train Acc: 100.00% | Val Loss: 0.73 | Val Acc: 65.00%\nEpoch 170 | Train Loss: 0.003 | Train Acc: 100.00% | Val Loss: 0.85 | Val Acc: 67.92%\nEpoch 180 | Train Loss: 0.003 | Train Acc: 100.00% | Val Loss: 0.48 | Val Acc: 81.67%\nEpoch 190 | Train Loss: 0.000 | Train Acc: 100.00% | Val Loss: 0.50 | Val Acc: 85.83%\nEpoch 200 | Train Loss: 0.001 | Train Acc: 100.00% | Val Loss: 0.52 | Val Acc: 83.54%\n\nGraphSAGE test accuracy: 77.20%\n\nCPU times: user 9.17 s, sys: 370 ms, total: 9.54 s\nWall time: 12.4 s\n\n\n\n%%time\n\n# Create GCN\ngcn = GCN(dataset.num_features, 64, dataset.num_classes)\nprint(gcn)\n\n# Train\ngcn.fit(data, 200)\n\n# Test\nprint(f'\\nGCN test accuracy: {test(gcn, data)*100:.2f}%\\n')\n\nGCN(\n  (gcn1): GCNConv(500, 64)\n  (gcn2): GCNConv(64, 3)\n)\nEpoch   0 | Train Loss: 1.098 | Train Acc:  33.33% | Val Loss: 1.10 | Val Acc: 32.20%\nEpoch  10 | Train Loss: 0.736 | Train Acc:  91.67% | Val Loss: 0.87 | Val Acc: 74.60%\nEpoch  20 | Train Loss: 0.400 | Train Acc:  96.67% | Val Loss: 0.67 | Val Acc: 73.80%\nEpoch  30 | Train Loss: 0.214 | Train Acc:  93.33% | Val Loss: 0.61 | Val Acc: 76.80%\nEpoch  40 | Train Loss: 0.124 | Train Acc: 100.00% | Val Loss: 0.58 | Val Acc: 75.60%\nEpoch  50 | Train Loss: 0.092 | Train Acc: 100.00% | Val Loss: 0.62 | Val Acc: 77.20%\nEpoch  60 | Train Loss: 0.095 | Train Acc: 100.00% | Val Loss: 0.58 | Val Acc: 76.80%\nEpoch  70 | Train Loss: 0.087 | Train Acc: 100.00% | Val Loss: 0.58 | Val Acc: 77.20%\nEpoch  80 | Train Loss: 0.085 | Train Acc: 100.00% | Val Loss: 0.63 | Val Acc: 75.60%\nEpoch  90 | Train Loss: 0.088 | Train Acc:  98.33% | Val Loss: 0.62 | Val Acc: 76.60%\nEpoch 100 | Train Loss: 0.074 | Train Acc:  98.33% | Val Loss: 0.63 | Val Acc: 75.80%\nEpoch 110 | Train Loss: 0.085 | Train Acc: 100.00% | Val Loss: 0.62 | Val Acc: 76.60%\nEpoch 120 | Train Loss: 0.069 | Train Acc: 100.00% | Val Loss: 0.63 | Val Acc: 74.20%\nEpoch 130 | Train Loss: 0.062 | Train Acc: 100.00% | Val Loss: 0.62 | Val Acc: 76.20%\nEpoch 140 | Train Loss: 0.043 | Train Acc: 100.00% | Val Loss: 0.61 | Val Acc: 75.20%\nEpoch 150 | Train Loss: 0.045 | Train Acc: 100.00% | Val Loss: 0.62 | Val Acc: 75.60%\nEpoch 160 | Train Loss: 0.068 | Train Acc: 100.00% | Val Loss: 0.61 | Val Acc: 76.80%\nEpoch 170 | Train Loss: 0.070 | Train Acc: 100.00% | Val Loss: 0.60 | Val Acc: 76.80%\nEpoch 180 | Train Loss: 0.060 | Train Acc: 100.00% | Val Loss: 0.61 | Val Acc: 75.40%\nEpoch 190 | Train Loss: 0.057 | Train Acc: 100.00% | Val Loss: 0.66 | Val Acc: 75.00%\nEpoch 200 | Train Loss: 0.052 | Train Acc: 100.00% | Val Loss: 0.65 | Val Acc: 75.20%\n\nGCN test accuracy: 78.40%\n\nCPU times: user 52.4 s, sys: 606 ms, total: 53 s\nWall time: 52.6 s\n\n\n\n%%time\n\n# Create GAT\ngat = GAT(dataset.num_features, 64, dataset.num_classes)\nprint(gat)\n\n# Train\ngat.fit(data, 200)\n\n# Test\nprint(f'\\nGAT test accuracy: {test(gat, data)*100:.2f}%\\n')\n\nGAT(\n  (gat1): GATv2Conv(500, 64, heads=8)\n  (gat2): GATv2Conv(512, 3, heads=8)\n)\nEpoch   0 | Train Loss: 3.174 | Train Acc:   1.67% | Val Loss: 3.18 | Val Acc: 1.00%\nEpoch  10 | Train Loss: 0.707 | Train Acc:  86.67% | Val Loss: 0.87 | Val Acc: 71.00%\nEpoch  20 | Train Loss: 0.363 | Train Acc:  93.33% | Val Loss: 0.64 | Val Acc: 77.20%\nEpoch  30 | Train Loss: 0.178 | Train Acc:  96.67% | Val Loss: 0.58 | Val Acc: 78.40%\nEpoch  40 | Train Loss: 0.101 | Train Acc: 100.00% | Val Loss: 0.56 | Val Acc: 78.40%\nEpoch  50 | Train Loss: 0.087 | Train Acc: 100.00% | Val Loss: 0.57 | Val Acc: 77.80%\nEpoch  60 | Train Loss: 0.072 | Train Acc: 100.00% | Val Loss: 0.57 | Val Acc: 78.40%\nEpoch  70 | Train Loss: 0.076 | Train Acc: 100.00% | Val Loss: 0.58 | Val Acc: 77.40%\nEpoch  80 | Train Loss: 0.064 | Train Acc: 100.00% | Val Loss: 0.59 | Val Acc: 76.40%\nEpoch  90 | Train Loss: 0.058 | Train Acc: 100.00% | Val Loss: 0.58 | Val Acc: 77.20%\nEpoch 100 | Train Loss: 0.062 | Train Acc: 100.00% | Val Loss: 0.57 | Val Acc: 79.00%\nEpoch 110 | Train Loss: 0.050 | Train Acc: 100.00% | Val Loss: 0.59 | Val Acc: 77.80%\nEpoch 120 | Train Loss: 0.044 | Train Acc: 100.00% | Val Loss: 0.60 | Val Acc: 75.40%\nEpoch 130 | Train Loss: 0.042 | Train Acc: 100.00% | Val Loss: 0.57 | Val Acc: 78.00%\nEpoch 140 | Train Loss: 0.045 | Train Acc: 100.00% | Val Loss: 0.60 | Val Acc: 78.00%\nEpoch 150 | Train Loss: 0.038 | Train Acc: 100.00% | Val Loss: 0.60 | Val Acc: 77.20%\nEpoch 160 | Train Loss: 0.041 | Train Acc: 100.00% | Val Loss: 0.64 | Val Acc: 77.00%\nEpoch 170 | Train Loss: 0.033 | Train Acc: 100.00% | Val Loss: 0.62 | Val Acc: 76.00%\nEpoch 180 | Train Loss: 0.031 | Train Acc: 100.00% | Val Loss: 0.62 | Val Acc: 77.60%\nEpoch 190 | Train Loss: 0.028 | Train Acc: 100.00% | Val Loss: 0.64 | Val Acc: 78.40%\nEpoch 200 | Train Loss: 0.026 | Train Acc: 100.00% | Val Loss: 0.65 | Val Acc: 76.60%\n\nGAT test accuracy: 77.10%\n\nCPU times: user 17min 43s, sys: 9.46 s, total: 17min 53s\nWall time: 18min 7s\n\n\nThe three models obtain similar results in terms of accuracy. We expect the GAT to perform better because its aggregation mechanism is more nuanced, but it‚Äôs not always the case.\nThe real difference is the training time: GraphSAGE is 88 times faster than the GAT and four times faster than the GCN in this example!\nThis is the true benefit of GraphSAGE. While it loses a lot of information by pruning the graph with neighbor sampling, it greatly improves scalability. In turn, it can lead to building larger graphs that can improve accuracy.\n\n\n\nGraphSAGE is a popular framework with many flavors.\nIn this example, we have used GraphSAGE in a transductive setting. We masked information about test nodes during training, but we didn‚Äôt hide their presence in the adjacency matrix. On the contrary, in an inductive setting, the test set is never encountered during training.\nThis difference is essential: an inductive model can calculate embeddings for nodes that have never been seen before. On the other hand, a transductive model has to be re-trained, which can quickly become computationally costly. Thanks to neighbor sampling, GraphSAGE is designed to be an inductive model: it does not require seeing every neighbor to calculate an embedding.\nBesides these two settings, GraphSAGE can be trained in an unsupervised way. In this case, we can‚Äôt use the cross-entropy loss. We have to engineer a loss function that forces nodes that are nearby in the original graph to remain close to each other in the embedding space. Conversely, the same function must ensure that distant nodes in the graph must have distant representations in the embedding space. This is the loss that is presented in GraphSAGE‚Äôs paper.\nPinSAGE and UberEeats‚Äô modified GraphSAGE are also slightly different since we‚Äôre dealing with recommender systems. Their goal is to correctly rank the most relevant items (pins, restaurants) for each user. We don‚Äôt only want to get the closest embeddings, but we also have to produce the best rankings possible. This is why these systems are trained in an unsupervised way but with another loss function: a max-margin ranking loss."
  },
  {
    "objectID": "posts/2022-04-06-graphsage.html#conclusion",
    "href": "posts/2022-04-06-graphsage.html#conclusion",
    "title": "GraphSAGE: Scaling up Graph Neural Networks",
    "section": "Conclusion",
    "text": "Conclusion\nGraphSAGE is an incredibly fast architecture that can process large graphs. It might not be as accurate as a GCN or a GAT, but it is an essential model for handling massive amounts of data. It delivers this speed thanks to a clever combination of neighbor sampling and fast aggregation. In this article,\n\nWe explored a new dataset with PubMed, which has almost ten times more connections than the previous one (CiteSeer)\nWe explained the idea behind neighbor sampling, which only considers a predefined number of random neighbors at each hop\nWe saw the three aggregators presented in GraphSAGE‚Äôs paper and focused on the mean aggregator\nWe benchmarked three models (GraphSAGE, GAT, and GCN) in terms of accuracy and training time\n\nWe saw three architectures with the same end application: node classification. But GNNs have been successfully applied to other tasks. In the next tutorials, I‚Äôd like to use them in two different contexts: graph and edge prediction. This will be a good way to discover new datasets and applications where GNNs dominate the state of the art.\nIf you enjoyed this article, let‚Äôs connect on Twitter @maximelabonne for more graph learning content.\nThanks for your attention! üì£"
  },
  {
    "objectID": "posts/2022-04-06-graphsage.html#graph-neural-network-course",
    "href": "posts/2022-04-06-graphsage.html#graph-neural-network-course",
    "title": "GraphSAGE: Scaling up Graph Neural Networks",
    "section": "üåê Graph Neural Network Course",
    "text": "üåê Graph Neural Network Course\nüîé Course overview\nüìù Chapter 1: Introduction to Graph Neural Networks\nüìù Chapter 2: Graph Attention Network\nüìù Chapter 3: GraphSAGE\nüìù Chapter 4: Graph Isomorphism Network"
  },
  {
    "objectID": "posts/2022-04-25-graph_isomorphism_network.html",
    "href": "posts/2022-04-25-graph_isomorphism_network.html",
    "title": "GIN: How to Design the Most Powerful Graph Neural Network",
    "section": "",
    "text": "Graph Neural Networks are not limited to classifying nodes.\nOne of the most popular applications is graph classification. This is a common task when dealing with molecules: they are represented as graphs and features about each atom (node) can be used to predict the behavior of the entire molecule.\nHowever, GNNs only learn node embeddings. How to combine them in order to produce an entire graph embedding? In this article, we will:\nWe‚Äôll detail the advantages of GIN in terms of discriminative power compared to a GCN or GraphSAGE, and its connection to the Weisfeiler-Lehman test. Beyond its powerful aggregator, GIN brings exciting takeaways about GNNs in general.\nYou can run the code with the following Google Colab notebook.\n# Install PyTorch Geometric\nimport torch\n!pip install -q torch-scatter -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q torch-sparse -f https://data.pyg.org/whl/torch-{torch.__version__}.html\n!pip install -q git+https://github.com/pyg-team/pytorch_geometric.git\n\n# Visualization\nimport networkx as nx\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.dpi'] = 300\nplt.rcParams.update({'font.size': 24})"
  },
  {
    "objectID": "posts/2022-04-25-graph_isomorphism_network.html#i.-proteins-dataset",
    "href": "posts/2022-04-25-graph_isomorphism_network.html#i.-proteins-dataset",
    "title": "GIN: How to Design the Most Powerful Graph Neural Network",
    "section": "üåê I. PROTEINS dataset",
    "text": "üåê I. PROTEINS dataset\n\n3D plot of a protein by DeepMind.\n\nPROTEINS is a popular dataset in bioinformatics. It is a collection of 1113 graphs representing proteins, where nodes are amino acids. Two nodes are connected by an edge when they are close enough (&lt; 0.6 nanometers). The goal is to classify each protein as an enzyme or not.\nEnzymes are a particular type of proteins that act as catalysts to speed up chemical reactions in the cell. They are essential for digestion (e.g., lipases), respiration (e.g., oxidases), and other crucial functions of the human body. They are also used in commercial applications, like the production of antibiotics.\nThis dataset is also available on TUDataset and implemented in PyTorch Geometric.\n\nfrom torch_geometric.datasets import TUDataset\n\ndataset = TUDataset(root='.', name='PROTEINS').shuffle()\n\n# Print information about the dataset\nprint(f'Dataset: {dataset}')\nprint('-------------------')\nprint(f'Number of graphs: {len(dataset)}')\nprint(f'Number of nodes: {dataset[0].x.shape[0]}')\nprint(f'Number of features: {dataset.num_features}')\nprint(f'Number of classes: {dataset.num_classes}')\n\nDataset: PROTEINS(1113)\n-------------------\nNumber of graphs: 1113\nNumber of nodes: 117\nNumber of features: 3\nNumber of classes: 2\n\n\nI‚Äôm not a biochemist so I‚Äôm curious about these proteins. Let‚Äôs plot one as a graph to see what it looks like.\n\nfrom torch_geometric.utils import to_networkx\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nG = to_networkx(dataset[2], to_undirected=True)\n\n# 3D spring layout\npos = nx.spring_layout(G, dim=3, seed=0)\n\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n\n# Create the 3D figure\nfig = plt.figure(figsize=(16,16))\nax = fig.add_subplot(111, projection=\"3d\")\n\n# Suppress tick labels\nfor dim in (ax.xaxis, ax.yaxis, ax.zaxis):\n    dim.set_ticks([])\n\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=500, c=\"#0A047A\")\n\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\n\n# fig.tight_layout()\nplt.show()\n\n\n\n\nThe previous 3D structure is randomly generated: obtaining the correct 3D representation is a problem so difficult it‚Äôs the whole point of AlphaFold.\nGraphs are not the only way to represent molecules. The simplified molecular-input line-entry system (SMILES) is another popular method, which uses a line (string) notation. It is obtained by printing the nodes encountered in a depth-first tree traversal of a slightly modified molecular graph.\nResearchers often use this representation when working with molecules or chemical compounds. Fortunately for us, the PROTEINS dataset is already encoded in the form of graphs. Otherwise, we could have to translate the SMILES strings into networkx graphs.\nIt doesn‚Äôt mean we‚Äôll directly feed the PROTEINS dataset to our GNN. If GraphSAGE taught us anything, it‚Äôs that mini-batching is incredibly efficient. It is now an indispensable tool whenever we implement a GNN.\n\nfrom torch_geometric.loader import DataLoader\n\n# Create training, validation, and test sets\ntrain_dataset = dataset[:int(len(dataset)*0.8)]\nval_dataset   = dataset[int(len(dataset)*0.8):int(len(dataset)*0.9)]\ntest_dataset  = dataset[int(len(dataset)*0.9):]\n\nprint(f'Training set   = {len(train_dataset)} graphs')\nprint(f'Validation set = {len(val_dataset)} graphs')\nprint(f'Test set       = {len(test_dataset)} graphs')\n\n# Create mini-batches\ntrain_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=64, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n\nprint('\\nTrain loader:')\nfor i, subgraph in enumerate(train_loader):\n    print(f' - Subgraph {i}: {subgraph}')\n\nprint('\\nValidation loader:')\nfor i, subgraph in enumerate(val_loader):\n    print(f' - Subgraph {i}: {subgraph}')\n\nprint('\\nTest loader:')\nfor i, subgraph in enumerate(test_loader):\n    print(f' - Subgraph {i}: {subgraph}')\n\nTraining set   = 890 graphs\nValidation set = 111 graphs\nTest set       = 112 graphs\n\nTrain loader:\n - Subgraph 0: DataBatch(edge_index=[2, 7966], x=[2114, 3], y=[64], batch=[2114], ptr=[65])\n - Subgraph 1: DataBatch(edge_index=[2, 8492], x=[2263, 3], y=[64], batch=[2263], ptr=[65])\n - Subgraph 2: DataBatch(edge_index=[2, 9518], x=[2589, 3], y=[64], batch=[2589], ptr=[65])\n - Subgraph 3: DataBatch(edge_index=[2, 10846], x=[3008, 3], y=[64], batch=[3008], ptr=[65])\n - Subgraph 4: DataBatch(edge_index=[2, 9618], x=[2586, 3], y=[64], batch=[2586], ptr=[65])\n - Subgraph 5: DataBatch(edge_index=[2, 7572], x=[2027, 3], y=[64], batch=[2027], ptr=[65])\n - Subgraph 6: DataBatch(edge_index=[2, 10512], x=[2875, 3], y=[64], batch=[2875], ptr=[65])\n - Subgraph 7: DataBatch(edge_index=[2, 7034], x=[1855, 3], y=[64], batch=[1855], ptr=[65])\n - Subgraph 8: DataBatch(edge_index=[2, 11966], x=[3313, 3], y=[64], batch=[3313], ptr=[65])\n - Subgraph 9: DataBatch(edge_index=[2, 9898], x=[2764, 3], y=[64], batch=[2764], ptr=[65])\n - Subgraph 10: DataBatch(edge_index=[2, 8798], x=[2411, 3], y=[64], batch=[2411], ptr=[65])\n - Subgraph 11: DataBatch(edge_index=[2, 9922], x=[2736, 3], y=[64], batch=[2736], ptr=[65])\n - Subgraph 12: DataBatch(edge_index=[2, 10772], x=[2787, 3], y=[64], batch=[2787], ptr=[65])\n - Subgraph 13: DataBatch(edge_index=[2, 11140], x=[2782, 3], y=[58], batch=[2782], ptr=[59])\n\nValidation loader:\n - Subgraph 0: DataBatch(edge_index=[2, 8240], x=[2088, 3], y=[64], batch=[2088], ptr=[65])\n - Subgraph 1: DataBatch(edge_index=[2, 5626], x=[1503, 3], y=[47], batch=[1503], ptr=[48])\n\nTest loader:\n - Subgraph 0: DataBatch(edge_index=[2, 7946], x=[2156, 3], y=[64], batch=[2156], ptr=[65])\n - Subgraph 1: DataBatch(edge_index=[2, 6222], x=[1614, 3], y=[48], batch=[1614], ptr=[49])\n\n\nPROTEINS is not a huge dataset, but mini-batching will speed up the training nonetheless. We could use a GCN or a GAT, but there‚Äôs a new architecture I‚Äôd like to introduce: the Graph Isomorphism Network."
  },
  {
    "objectID": "posts/2022-04-25-graph_isomorphism_network.html#ii.-graph-isomorphism-network-gin",
    "href": "posts/2022-04-25-graph_isomorphism_network.html#ii.-graph-isomorphism-network-gin",
    "title": "GIN: How to Design the Most Powerful Graph Neural Network",
    "section": "üçæ II. Graph Isomorphism Network (GIN)",
    "text": "üçæ II. Graph Isomorphism Network (GIN)\nGIN was designed by researchers trying to maximize the representational (or discriminative) power of a GNN. But how do you define a ‚Äúrepresentational power‚Äù?\n\nA. Weisfeiler-Lehman test\nA way to characterize the ‚Äúpower‚Äù of a GNN is to use the Weisfeiler-Lehman (WL) graph isomorphism test. Isomorphic graphs mean that they have the same structure: identical connections but a permutation of nodes. The WL test is able to tell if two graphs are non-isomorphic, but it cannot guarantee that they are isomorphic.\n\nTwo isomorphic graphs.\n\nThis might not seem like much, but it can be extremely difficult to tell two large graphs apart. In fact, this problem is not known to be solvable in polynomial time, nor to be NP-complete. It might even be somewhere in between, in the computational complexity class NP-intermediate (if it only exists).\nOkay, but how is it related to GNNs? Some researchers in graph learning noticed that this test and the way GNNs learn are oddly similar. In the WL test, 1. Every node starts with the same label; 2. Labels from neighboring nodes are aggregated and hashed to produce a new label; 3. The previous step is repeated until the labels stop changing.\nIf you‚Äôre interested in the WL test, I would recommend this blog post by David Bieber and this article by Michael Bronstein.\nNot only this test is similar to how feature vectors are aggregated in GNNs, but its ability to tell graphs apart makes it more powerful than a lot of architectures, including GCNs and GraphSAGE. This is what inspired Xu et al. to design a new aggregator that is proven to be as good as the WL test.\n\n\nB. One aggregator to rule them all\nTo be as good as the WL test, this new aggregator must produce different node embeddings when dealing with non-isomorphic graphs.\nWe‚Äôll skip the math-heavy part of the paper, but the solution they found is to use two injective functions. Which ones? We don‚Äôt know, we can just learn them with a MLP!\n\nWith GATs, we used a neural network to learn the best weighting factors for a given task;\nWith GINs, we now learn the approximation of two injective functions thanks to the Universal Approximation Theorem.\n\nHere‚Äôs how to calculate the hidden vector of a particular node \\(i\\) with GIN:\n\\[h_i = MLP\\bigg((1+…õ) \\cdot x_i + \\sum_{j \\in \\mathcal{N}_i}x_j\\bigg)\\]\nIn this formula, \\(…õ\\) determines the importance of the target node compared to its neighbors (it has the same importance if \\(…õ = 0\\)). It can be a learnable parameter or a fixed scalar.\nNote that we talk about MLPs to highlight the fact there is more than one layer. According to the authors, one layer is not sufficient for graph learning in general.\n\n\nC. Global pooling\nGlobal pooling or graph-level readout consists of producing a graph embedding using the node embeddings calculated by the GNN.\nA simple way to obtain a graph embedding \\(h_G\\) is to use the mean, sum, or max of every node embedding \\(h_i\\):\n\\[{Mean}: h_G = \\frac{1}{N} \\sum_{i=0}^N h_i \\\\\n{Sum}: h_G = \\sum_{i=0}^N h_i \\\\\n{Max}: h_G = {max}_{i=0}^N(h_i)\\]\nThe authors make two important points about graph-level readout: * To consider all structural information, it is necessary to keep embeddings from previous layers; * The sum operator is surprisingly more expressive than the mean and the max.\nThese observations lead them to propose the following global pooling method:\n\\[h_G = \\sum_{i=0}^N{h_i^0}\\ || \\ \\dots \\ || \\ \\sum_{i=0}^N{h_i^k}\\]\nFor each layer, embeddings nodes are summed and the result is concatenated. This solution combines the expressiveness of the sum operator with the memory of previous iterations from the concatenation."
  },
  {
    "objectID": "posts/2022-04-25-graph_isomorphism_network.html#iii.-gin-in-pytorch-geometric",
    "href": "posts/2022-04-25-graph_isomorphism_network.html#iii.-gin-in-pytorch-geometric",
    "title": "GIN: How to Design the Most Powerful Graph Neural Network",
    "section": "üß† III. GIN in PyTorch Geometric",
    "text": "üß† III. GIN in PyTorch Geometric\nIt is always interesting to see the differences between the original design and its implementations.\nThere is a GINConv layer in PyTorch Geometric with different parameters:\n\nnn: the MLP that is used to approximate our two injective functions;\neps: the initial value of \\(…õ\\), which is 0 by default;\ntrain_eps: a True/False statement to determine if \\(…õ\\) is trainable, which is False by default.\n\nYou can see that \\(…õ\\) is entirely removed by default in this implementation: it‚Äôs a hyperparameter we can tune, but probably not an essential one.\nThere is a second GIN layer in PyTorch Geometric, called GINEConv. It comes from this paper‚Äôs implementation of GIN, which applies a \\(ReLU\\) function to the neighbors‚Äô features. We won‚Äôt use it in this tutorial, since the benefits are not clear.\nWe still need to design a MLP for the GINConv layer. Here‚Äôs the design we‚Äôll implement, inspired by the original paper:\n\n\n\nThe paper stacks 5 layers but we‚Äôll be more humble with 3 layers instead. Here is what the entire architecture looks like:\n\n\n\nI could not find any implementation of GIN with graph embedding concatenation, so here is my version (it improves the accuracy by 1% on average). Let‚Äôs compare it to a GCN with a simple mean pooling (and no concatenation).\n\nimport torch\nimport torch.nn.functional as F\nfrom torch.nn import Linear, Sequential, BatchNorm1d, ReLU, Dropout\nfrom torch_geometric.nn import GCNConv, GINConv\nfrom torch_geometric.nn import global_mean_pool, global_add_pool\n\n\nclass GCN(torch.nn.Module):\n    \"\"\"GCN\"\"\"\n    def __init__(self, dim_h):\n        super(GCN, self).__init__()\n        self.conv1 = GCNConv(dataset.num_node_features, dim_h)\n        self.conv2 = GCNConv(dim_h, dim_h)\n        self.conv3 = GCNConv(dim_h, dim_h)\n        self.lin = Linear(dim_h, dataset.num_classes)\n\n    def forward(self, x, edge_index, batch):\n        # Node embeddings \n        h = self.conv1(x, edge_index)\n        h = h.relu()\n        h = self.conv2(h, edge_index)\n        h = h.relu()\n        h = self.conv3(h, edge_index)\n\n        # Graph-level readout\n        hG = global_mean_pool(h, batch)\n\n        # Classifier\n        h = F.dropout(hG, p=0.5, training=self.training)\n        h = self.lin(h)\n        \n        return hG, F.log_softmax(h, dim=1)\n\nclass GIN(torch.nn.Module):\n    \"\"\"GIN\"\"\"\n    def __init__(self, dim_h):\n        super(GIN, self).__init__()\n        self.conv1 = GINConv(\n            Sequential(Linear(dataset.num_node_features, dim_h),\n                       BatchNorm1d(dim_h), ReLU(),\n                       Linear(dim_h, dim_h), ReLU()))\n        self.conv2 = GINConv(\n            Sequential(Linear(dim_h, dim_h), BatchNorm1d(dim_h), ReLU(),\n                       Linear(dim_h, dim_h), ReLU()))\n        self.conv3 = GINConv(\n            Sequential(Linear(dim_h, dim_h), BatchNorm1d(dim_h), ReLU(),\n                       Linear(dim_h, dim_h), ReLU()))\n        self.lin1 = Linear(dim_h*3, dim_h*3)\n        self.lin2 = Linear(dim_h*3, dataset.num_classes)\n\n    def forward(self, x, edge_index, batch):\n        # Node embeddings \n        h1 = self.conv1(x, edge_index)\n        h2 = self.conv2(h1, edge_index)\n        h3 = self.conv3(h2, edge_index)\n\n        # Graph-level readout\n        h1 = global_add_pool(h1, batch)\n        h2 = global_add_pool(h2, batch)\n        h3 = global_add_pool(h3, batch)\n\n        # Concatenate graph embeddings\n        h = torch.cat((h1, h2, h3), dim=1)\n\n        # Classifier\n        h = self.lin1(h)\n        h = h.relu()\n        h = F.dropout(h, p=0.5, training=self.training)\n        h = self.lin2(h)\n        \n        return h, F.log_softmax(h, dim=1)\n\ngcn = GCN(dim_h=32)\ngin = GIN(dim_h=32)\n\n\ndef train(model, loader):\n    criterion = torch.nn.CrossEntropyLoss()\n    optimizer = torch.optim.Adam(model.parameters(),\n                                      lr=0.01,\n                                      weight_decay=0.01)\n    epochs = 100\n\n    model.train()\n    for epoch in range(epochs+1):\n        total_loss = 0\n        acc = 0\n        val_loss = 0\n        val_acc = 0\n\n        # Train on batches\n        for data in loader:\n          optimizer.zero_grad()\n          _, out = model(data.x, data.edge_index, data.batch)\n          loss = criterion(out, data.y)\n          total_loss += loss / len(loader)\n          acc += accuracy(out.argmax(dim=1), data.y) / len(loader)\n          loss.backward()\n          optimizer.step()\n\n          # Validation\n          val_loss, val_acc = test(model, val_loader)\n\n    # Print metrics every 10 epochs\n    if(epoch % 10 == 0):\n        print(f'Epoch {epoch:&gt;3} | Train Loss: {total_loss:.2f} '\n              f'| Train Acc: {acc*100:&gt;5.2f}% '\n              f'| Val Loss: {val_loss:.2f} '\n              f'| Val Acc: {val_acc*100:.2f}%')\n          \n    test_loss, test_acc = test(model, test_loader)\n    print(f'Test Loss: {test_loss:.2f} | Test Acc: {test_acc*100:.2f}%')\n    \n    return model\n\n@torch.no_grad()\ndef test(model, loader):\n    criterion = torch.nn.CrossEntropyLoss()\n    model.eval()\n    loss = 0\n    acc = 0\n\n    for data in loader:\n        _, out = model(data.x, data.edge_index, data.batch)\n        loss += criterion(out, data.y) / len(loader)\n        acc += accuracy(out.argmax(dim=1), data.y) / len(loader)\n\n    return loss, acc\n\ndef accuracy(pred_y, y):\n    \"\"\"Calculate accuracy.\"\"\"\n    return ((pred_y == y).sum() / len(y)).item()\n\ngcn = train(gcn, train_loader)\ngin = train(gin, train_loader)\n\nEpoch 100 | Train Loss: 0.67 | Train Acc: 60.61% | Val Loss: 0.70 | Val Acc: 54.50%\nTest Loss: 0.69 | Test Acc: 55.99%\nEpoch 100 | Train Loss: 0.49 | Train Acc: 75.61% | Val Loss: 0.53 | Val Acc: 78.99%\nTest Loss: 0.60 | Test Acc: 66.93%\n\n\nThis time, there‚Äôs no competition!\nThe GIN architecture completely outperforms the GCN. This gap (10% accuracy on average) is due to several reasons:\n\nGIN‚Äôs aggregator is specifically designed to discriminate graphs that the GCN‚Äôs aggregator cannot;\nGraph hidden vectors from every layer are concatenated instead of only considering the last one;\nThe sum operator is superior to the mean operator (at least in theory).\n\nLet‚Äôs visualize the proteins we classified with the GCN and the GIN.\n\nfig, ax = plt.subplots(4, 4, figsize=(16,16))\nfig.suptitle('GCN - Graph classification')\n\nfor i, data in enumerate(dataset[1113-16:]):\n    # Calculate color (green if correct, red otherwise)\n    _, out = gcn(data.x, data.edge_index, data.batch)\n    color = \"green\" if out.argmax(dim=1) == data.y else \"red\"\n\n    # Plot graph\n    ix = np.unravel_index(i, ax.shape)\n    ax[ix].axis('off')\n    G = to_networkx(dataset[i], to_undirected=True)\n    nx.draw_networkx(G,\n                    pos=nx.spring_layout(G, seed=0),\n                    with_labels=False,\n                    node_size=150,\n                    node_color=color,\n                    width=0.8,\n                    ax=ax[ix]\n                    )\n\n\n\n\n\nfig, ax = plt.subplots(4, 4, figsize=(16,16))\nfig.suptitle('GIN - Graph classification')\n\nfor i, data in enumerate(dataset[1113-16:]):\n    # Calculate color (green if correct, red otherwise)\n    _, out = gin(data.x, data.edge_index, data.batch)\n    color = \"green\" if out.argmax(dim=1) == data.y else \"red\"\n\n    # Plot graph\n    ix = np.unravel_index(i, ax.shape)\n    ax[ix].axis('off')\n    G = to_networkx(dataset[i], to_undirected=True)\n    nx.draw_networkx(G,\n                    pos=nx.spring_layout(G, seed=0),\n                    with_labels=False,\n                    node_size=150,\n                    node_color=color,\n                    width=0.8,\n                    ax=ax[ix]\n                    )\n\n\n\n\nInterestingly enough, the two models make different mistakes. This is a common result in machine learning when different algorithms are applied to the same problem.\nWe can take advantage of this behavior by creating an ensemble. There are many ways of combining our graph embeddings. The simplest method is to take the mean of the normalized output vectors.\n\ngcn.eval()\ngin.eval()\nacc_gcn = 0\nacc_gin = 0\nacc = 0\n\nfor data in test_loader:\n    # Get classifications\n    _, out_gcn = gcn(data.x, data.edge_index, data.batch)\n    _, out_gin = gin(data.x, data.edge_index, data.batch)\n    out = (out_gcn + out_gin)/2\n\n    # Calculate accuracy scores\n    acc_gcn += accuracy(out_gcn.argmax(dim=1), data.y) / len(test_loader)\n    acc_gin += accuracy(out_gin.argmax(dim=1), data.y) / len(test_loader)\n    acc += accuracy(out.argmax(dim=1), data.y) / len(test_loader)\n\n# Print results\nprint(f'GCN accuracy:     {acc_gcn*100:.2f}%')\nprint(f'GIN accuracy:     {acc_gin*100:.2f}%')\nprint(f'GCN+GIN accuracy: {acc*100:.2f}%')\n\nGCN accuracy:     55.99%\nGIN accuracy:     66.93%\nGCN+GIN accuracy: 67.45%\n\n\nThis time, we‚Äôre lucky enough to see the accuracy improved.\nObviously, it‚Äôs not always the case. More sophisticated methods involve building an entirely different ML algorithm for classification, such as a Random Forest. This classifier takes graph embeddings as inputs and outputs the final classification."
  },
  {
    "objectID": "posts/2022-04-25-graph_isomorphism_network.html#conclusion",
    "href": "posts/2022-04-25-graph_isomorphism_network.html#conclusion",
    "title": "GIN: How to Design the Most Powerful Graph Neural Network",
    "section": "Conclusion",
    "text": "Conclusion\nGraph Isomorphism Networks are an important step in the understanding of GNNs.\nThey not only improve the accuracy scores on several benchmarks but also provide a theoretical framework to explain why one architecture is better than another. In this article,\n\nWe saw a new task with graph classification, performed with global pooling;\nWe introduced the WL test and its connection with the new GIN layer;\nWe implemented a GIN and a GCN and made an simple ensemble with their classifications.\n\nAlthough GINs achieve good performance, especially with social graphs, their theoretical superiority doesn‚Äôt always translate well in the real world. It is true with other ‚Äúprovably powerful‚Äù architectures, which tend to underperform in practice, such as the 3WLGNN.\nIf you enjoyed this article, please leave a few claps and follow me on Twitter for more graph content! üì£"
  },
  {
    "objectID": "posts/2022-04-25-graph_isomorphism_network.html#graph-neural-network-course",
    "href": "posts/2022-04-25-graph_isomorphism_network.html#graph-neural-network-course",
    "title": "GIN: How to Design the Most Powerful Graph Neural Network",
    "section": "üåê Graph Neural Network Course",
    "text": "üåê Graph Neural Network Course\nüîé Course overview\nüìù Chapter 1: Introduction to Graph Neural Networks\nüìù Chapter 2: Graph Attention Network\nüìù Chapter 3: GraphSAGE\nüìù Chapter 4: Graph Isomorphism Network"
  },
  {
    "objectID": "posts/2022-05-02-constraint_programming.html",
    "href": "posts/2022-05-02-constraint_programming.html",
    "title": "Introduction to Constraint Programming in Python",
    "section": "",
    "text": "Constraint Programming is a technique to find every solution that respects a set of predefined constraints.\nIt is an invaluable tool for data scientists to solve a huge variety of problems, such as scheduling, timetabling, sequencing, etc. In this article, we‚Äôll see how to use CP in two different ways:\nWe‚Äôll use CP-SAT from Google OR-Tools, an excellent free and open source CP solver. Note that it is different from MPSolver, which is dedicated to Linear and Mixed Integer Programming. The difference between CP and LP is quite confusing, we‚Äôll touch on this topic at the end of the article.\nYou can run the code with the following Google Colab notebook.\n!python -m pip install --upgrade --user -q ortools"
  },
  {
    "objectID": "posts/2022-05-02-constraint_programming.html#i.-satisfiability-with-the-3-scouts-problem",
    "href": "posts/2022-05-02-constraint_programming.html#i.-satisfiability-with-the-3-scouts-problem",
    "title": "Introduction to Constraint Programming in Python",
    "section": "ü™ñ I. Satisfiability with the 3 scouts problem",
    "text": "ü™ñ I. Satisfiability with the 3 scouts problem\n\n\n\nIn the previous article, we created an army to defeat our opponent. But there was one small problem: we had to guess how powerful his army was.\nThis time, let‚Äôs send scouts to know the exact number. Our 3 scouts observed the enemy camp, and this is what they tell us:\n\nScout 1: ‚Äúthe number of soldiers is a multiple of 13‚Äù;\nScout 2: ‚Äúthe number of soldiers is a multiple of 19‚Äù;\nScout 3: ‚Äúthe number of soldiers is a multiple of 37‚Äù;\nThey all agree that the number of soldiers doesn‚Äôt exceed 10,000.\n\nOur scouts have a personal way of counting soldiers, but we can combine these three observations to make a model.\nLet‚Äôs call the number of soldiers \\(army\\). We can translate our problem into the following congruence system:\n\\[\n    army \\equiv 0 \\mod 13\\\\\n    army \\equiv 0 \\mod 19\\\\\n    army \\equiv 0 \\mod 37\n\\]\nIf you‚Äôre not familiar with this notation, this is what it means in programming terms:\n\\[\n    army\\ \\% \\ 13 = 0\\\\\n    army\\ \\% \\ 19 = 0\\\\\n    army\\ \\% \\ 37 = 0\n\\]\nLet‚Äôs implement it with OR-Tools. The first thing we need to do is to import and create the CP-SAT model and solver.\n\nfrom ortools.sat.python import cp_model\n\n# Instantiate model and solver\nmodel = cp_model.CpModel()\nsolver = cp_model.CpSolver()\n\nThe modeling process is very similar to what we did in Linear Programming.\nThe first step to create our CP model is to declare the variables. In this example, we only have one: \\(army\\), the number of soldiers.\nWe have to give lower and upper bounds. The lower bound is 1 since we know there‚Äôs an army, and the upper bound is 10,000 according to the scouts:\n\\[1 \\leq army \\leq 10\\ 000\\]\nIn OR-Tools, we use the NewIntVar method to create this variable.\n\n# 1. Variable\narmy = model.NewIntVar(1, 10000, 'army')\n\nThe second step is to declare the constraints.\nWe identified three constraints in this example. Modulo is a special operator, so we need a specific function to handle it with CP-SAT: AddModuloEquality. You can find a reference guide at this address if you need other methods.\n\n# 2. Constraints\n# variable % mod = target ‚Üí (target, variable, mod)\nmodel.AddModuloEquality(0, army, 13)\nmodel.AddModuloEquality(0, army, 19)\nmodel.AddModuloEquality(0, army, 37)\n\nUnlike Linear Programming, we don‚Äôt have to define an objective function here.\nThe reason is simple: there is nothing to optimize! We just want to find a feasible solution that satisfies our constraints, but there is no ‚Äúgood‚Äù or ‚Äúbad‚Äù answers. This is a key feature of Constraint Programming.\nOur model is complete, we can now ask OR-Tools to solve it.\n\n# Find the variable that satisfies these constraints\nstatus = solver.Solve(model)\n\n# If a solution has been found, print results\nif status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n    print('================= Solution =================')\n    print(f'Solved in {solver.WallTime():.2f} milliseconds')\n    print()\n    print(f'ü™ñ Army = {solver.Value(army)}')\n    print()\n    print('Check solution:')\n    print(f' - Constraint 1: {solver.Value(army)} % 13 = {solver.Value(army) % 13}')\n    print(f' - Constraint 2: {solver.Value(army)} % 19 = {solver.Value(army) % 19}')\n    print(f' - Constraint 3: {solver.Value(army)} % 37 = {solver.Value(army) % 37}')\n\nelse:\n    print('The solver could not find a solution.')\n\n================= Solution =================\nSolved in 0.01 milliseconds\n\nü™ñ Army = 9139\n\nCheck solution:\n - Constraint 1: 9139 % 13 = 0\n - Constraint 2: 9139 % 19 = 0\n - Constraint 3: 9139 % 37 = 0\n\n\nWe obtained our solution in less than a millisecond: there are 9,139 soldiers in the enemy army. Huzzah, we can now fire the scouts!\nWe limited the search space with an upper bound of 10,000, which gave us a unique solution. But is it still the case if we push this limit?\nAnother perk of CP is the ability to find every possible solution to a problem. This might take a long time when the search space is large because the solver has to brute force the entire space (instead of reducing it with heuristics). Let‚Äôs explore this feature by printing every possible solution with a new upper bound of 100,000.\nWith OR-Tools, we ask the solver to look for every possible solution thanks to the enumerate_all_solutions parameter. We then assign it a callback class that prints every solution the solver finds.\n\nmodel = cp_model.CpModel()\nsolver = cp_model.CpSolver()\n\n# 1. Variable\narmy = model.NewIntVar(1, 100000, 'army')\n\n# 2. Constraints\nmodel.AddModuloEquality(0, army, 13)\nmodel.AddModuloEquality(0, army, 19)\nmodel.AddModuloEquality(0, army, 37)\n\n\nclass PrintSolutions(cp_model.CpSolverSolutionCallback):\n    \"\"\"Callback to print every solution.\"\"\"\n\n    def __init__(self, variable):\n        cp_model.CpSolverSolutionCallback.__init__(self)\n        self.__variable = variable\n\n    def on_solution_callback(self):\n        print(self.Value(self.__variable))\n\n# Solve with callback\nsolution_printer = PrintSolutions(army)\nsolver.parameters.enumerate_all_solutions = True\nstatus = solver.Solve(model, solution_printer)\n\n9139\n18278\n27417\n36556\n45695\n54834\n63973\n73112\n82251\n91390\n\n\nWe found 10 solutions! This was to be expected since we increased the upper bound tenfold: these solutions all are multiples of 9,139.\nAs you can see, this example has nothing to do with optimization: it‚Äôs a pure satisfiability problem. On another note, this congruence system can be solved manually with the Chinese remainder theorem. But CP is not limited to that‚Ä¶"
  },
  {
    "objectID": "posts/2022-05-02-constraint_programming.html#ii.-optimization-and-beer",
    "href": "posts/2022-05-02-constraint_programming.html#ii.-optimization-and-beer",
    "title": "Introduction to Constraint Programming in Python",
    "section": "üçª II. Optimization and beer",
    "text": "üçª II. Optimization and beer\n\n\n\nLet‚Äôs see another problem: our army will face the enemy in a few days. In the meantime, the quartermaster has to prepare the rations that will be used during the campaign.\nThe space in the supply wagons is limited and some rations are more popular than others. There are three possible rations:\n\nü•ñ Bread: it takes only 1 space but soldiers don‚Äôt like it that much with a popularity of 3;\nü•© Meat: it takes 3 spaces and has a popularity of 10;\nüç∫ Beer: it takes 7 spaces but soldiers love it with a popularity of 26.\n\n\n\n\nThe supply wagons have a capacity of 19 spaces. How to select the best rations to maximize the popularity?\nThis is an optimization problem we‚Äôve already seen: actually, it is a variant of the famous knapsack problem. We could reuse the code from the previous article and just change the input parameters.\nThis time, we‚Äôll solve it using Constraint Programming. This paradigm is not limited to finding feasible solutions. It can also perform optimization using different algorithms to handle this overhead.\nLet‚Äôs create a model of the problem. First of all, we have to declare three variables: ü•ñbread, ü•©meat, and üç∫beer. It‚Äôs possible to have 0 of them, but their number cannot exceed the maximal capacity.\n\\[0 \\leq bread \\leq capacity \\\\\n0 \\leq meat \\leq capacity \\\\\n0 \\leq beer \\leq capacity\\]\n\n# Instantiate model and solver\nmodel = cp_model.CpModel()\nsolver = cp_model.CpSolver()\n\n# 1. Variables\ncapacity = 19\nbread = model.NewIntVar(0, capacity, 'bread')\nmeat  = model.NewIntVar(0, capacity, 'meat')\nbeer  = model.NewIntVar(0, capacity, 'beer')\n\nThis time, we only have one constraint: the space occupied by the bread, the meat, and the beer cannot exceed the wagons‚Äô capacity (19).\n\\[1 \\times bread + 3 \\times meat + 7 \\times beer \\leq 19\\]\n\n# 2. Constraints\nmodel.Add(1 * bread\n        + 3 * meat \n        + 7 * beer &lt;= capacity)\n\nWe want to maximize the total popularity of the rations that are selected:\n\\[max\\ 3 \\times bread + 10 \\times meat + 26 \\times beer\\]\n\n# 3. Objective\nmodel.Maximize(3  * bread\n             + 10 * meat\n             + 26 * beer)\n\nThe model is complete, CP-SAT can solve the problem!\n\n# Solve problem\nstatus = solver.Solve(model)\n\n# If an optimal solution has been found, print results\nif status == cp_model.OPTIMAL:\n    print('================= Solution =================')\n    print(f'Solved in {solver.WallTime():.2f} milliseconds')\n    print()\n    print(f'Optimal value = {3*solver.Value(bread)+10*solver.Value(meat)+26*solver.Value(beer)} popularity')\n    print('Food:')\n    print(f' - ü•ñBread = {solver.Value(bread)}')\n    print(f' - ü•©Meat  = {solver.Value(meat)}')\n    print(f' - üç∫Beer  = {solver.Value(beer)}')\nelse:\n    print('The solver could not find an optimal solution.')\n\n================= Solution =================\nSolved in 0.01 milliseconds\n\nOptimal value = 68 popularity\nFood:\n - ü•ñBread = 2\n - ü•©Meat  = 1\n - üç∫Beer  = 2\n\n\nWe obtained the highest popularity (68) possible with a capacity of 19.\nIs the constraint respected? Let‚Äôs quickly check it: 1√ó2ü•ñ + 3√ó1ü•© + 7√ó2üç∫ = 19, which is indeed ‚â§ 19.\nOkay, I‚Äôd like to ask another question: how many solutions to this problem are there? Once again, we can answer it with a specific callback to count them.\n\nclass CountSolutions(cp_model.CpSolverSolutionCallback):\n    \"\"\"Count the number of solutions.\"\"\"\n\n    def __init__(self):\n        cp_model.CpSolverSolutionCallback.__init__(self)\n        self.__solution_count = 0\n\n    def on_solution_callback(self):\n        self.__solution_count += 1\n\n    def solution_count(self):\n        return self.__solution_count\n\nsolution_printer = CountSolutions()\n\n# Instantiate model and solver\nmodel = cp_model.CpModel()\nsolver = cp_model.CpSolver()\n\n# 1. Variables\ncapacity = 19\n\nbread = model.NewIntVar(0, capacity, 'Bread')\nmeat  = model.NewIntVar(0, capacity, 'Meat')\nbeer  = model.NewIntVar(0, capacity, 'Beer')\n\n# 2. Constraints\nmodel.Add(1 * bread\n        + 3 * meat \n        + 7 * beer &lt;= capacity)\n\n# Print results\nsolver.parameters.enumerate_all_solutions = True\nstatus = solver.Solve(model, solution_printer)\nprint(solution_printer.solution_count())\n\n121\n\n\nWe found 121 solutions with a capacity of 19. But this number quickly increases: with a capacity of 1000, there are 8,080,104 possible solutions! And yet, CP-SAT finds the optimal solution in less than a second. How is it possible?\nCP solvers do not brute force the problem with an exhaustive search, but combine heuristics and combinatorial search instead. More specifically, the three most popular techniques for constraint satisfaction problems are backtracking, constraint propagation, and local search.\nCP-SAT is quite particular since it combines CP and SAT: it is part of a broader trend of merging CP, LP, SAT, and metaheuristics.\nWe said that the previous problem could be solved with Linear Programming, so let‚Äôs compare the code of both solutions:\n\n\n\nAs you can see, the syntax is quite similar but it‚Äôs not the same: model/solver vs.¬†solver, NewIntVar instead of IntVar, etc. There‚Äôs a bit of translation to do, but it‚Äôs easily manageable.\nThese two techniques are incredibly close to each other: they both handle variables with constraints and perform optimization using math and heuristics. However, CP is limited to discrete parameters, while LP handles continuous ones. On the other hand, you can implement specialized constraints like ‚Äúall different‚Äù in CP, but not in LP. Here is a summary of the main differences between these two technologies:\n\n\n\nIf you want to know more about this topic, I would recommend this article by Irvin J. Lustig and Jean-Fran√ßois Puget. CPLEX‚Äôs documentation also details the differences at this address, in terms of modeling and optimization."
  },
  {
    "objectID": "posts/2022-05-02-constraint_programming.html#conclusion",
    "href": "posts/2022-05-02-constraint_programming.html#conclusion",
    "title": "Introduction to Constraint Programming in Python",
    "section": "Conclusion",
    "text": "Conclusion\n\n\n\nConstraint Programming is another incredible technique in the mathematical optimization toolbox. It is a radically different approach compared to traditional, declarative programming. In this article,\n\nWe saw two applications of CP with satisfiability and optimization;\nWe implemented CP models in OR-Tools and played with the callback function;\nWe highlighted the differences between CP and LP.\n\nWe limited ourselves to simple problems in this introduction, but CP has amazing applications in complex scheduling and routing problems. This is a topic I‚Äôd love to address in a future article.\nIf you‚Äôre interested to know more about it, feel free to follow me on Twitter @maximelabonne. Thanks for your attention!"
  },
  {
    "objectID": "posts/2022-05-02-constraint_programming.html#linear-programming-course",
    "href": "posts/2022-05-02-constraint_programming.html#linear-programming-course",
    "title": "Introduction to Constraint Programming in Python",
    "section": "ü•á Linear Programming Course",
    "text": "ü•á Linear Programming Course\nüîé Course overview\nüìù Chapter 1: Introduction to Linear Programming\nüìù Chapter 2: Integer vs.¬†Linear Programming\nüìù Chapter 3: Constraint Programming"
  },
  {
    "objectID": "posts/2022-05-25-minecraft.html",
    "href": "posts/2022-05-25-minecraft.html",
    "title": "Create a Bot to Find Diamonds in Minecraft",
    "section": "",
    "text": "Minecraft is the next frontier for Artificial Intelligence.\nIt‚Äôs a huge game, with many mechanics and complex sequences of actions. It takes an entire wiki with over 8000 pages just to teach humans how to play Minecraft. So how good can be artificial intelligence?\nThis is the question we‚Äôll answer in this article. We‚Äôll design a bot and try to achieve one of the most difficult challenges in Minecraft: finding diamonds from scratch. To make things even worse, we will take on this challenge in randomly generated worlds so we can‚Äôt learn a particular seed.\nWhat we‚Äôre gonna talk about is not limited to Minecraft. It can be applied to similar complex environments . More specifically, we will implement two different techniques that will become the backbone of our intelligent agent.\nBut before we can train an agent, we need to understand how to interact with the environment. Let‚Äôs start with a scripted bot to get familiar with the syntax. We‚Äôll use MineRL, a fantastic library to build AI applications in Minecraft.\nThe code used in this article is available on Google Colab. It is a simplified and finetuned version of the excellent notebooks made by the organizers of the MineRL 2021 competition (MIT License).\n# # Install JDK, OpenGL, etc.\n!sudo add-apt-repository -y ppa:openjdk-r/ppa &gt; /dev/null 2&gt;&1\n!sudo apt purge openjdk-* &gt; /dev/null 2&gt;&1\n!sudo apt install openjdk-8-jdk xvfb xserver-xephyr vnc4server python-opengl ffmpeg &gt; /dev/null 2&gt;&1\n\n# # Install MineRL, the virtual display, and a video renderer\n!pip install -q -U minerl pyvirtualdisplay colabgymrender imageio==2.4.1\n\n# RL environment\nimport gym\nimport minerl\n\n# Visualization\nfrom colabgymrender.recorder import Recorder\nfrom pyvirtualdisplay import Display\n\n# Others\nimport numpy as np\nfrom tqdm.notebook import tqdm\nimport logging\nlogging.disable(logging.ERROR)\n\n# Create virtual display\ndisplay = Display(visible=0, size=(400, 300))\ndisplay.start()"
  },
  {
    "objectID": "posts/2022-05-25-minecraft.html#i.-scripted-bot",
    "href": "posts/2022-05-25-minecraft.html#i.-scripted-bot",
    "title": "Create a Bot to Find Diamonds in Minecraft",
    "section": "üìú I. Scripted bot",
    "text": "üìú I. Scripted bot\nMineRL allows us to launch Minecraft in Python and interact with the game. This is done through the popular gym library.\n\nenv = gym.make('MineRLObtainDiamond-v0')\nenv = Recorder(env, './video', fps=60)\nenv.seed(21)\nobs = env.reset()\nenv.release()\nenv.play()\n\n\n\n\nWe are in front of a tree. As you can see, the resolution is quite low. A low resolution means fewer pixels, which speeds things up. Fortunately for us, neural networks don‚Äôt need a 4K resolution to understand what‚Äôs happening on screen.\nNow, we would like to interact with the game. What can our agent do? Here‚Äôs the list of possible actions:\n\n\n\nThe first step to find diamonds is to get wood to make a crafting table and a wooden pickaxe.\nLet‚Äôs try to get closer to the tree. It means that we need to hold the ‚Äúforward‚Äù button for less than a second. With MineRL, there are 20 actions processed per second: we don‚Äôt need a full second so let‚Äôs process it 5 times, and wait for 40 more ticks.\n\n\n\n\n# Define the sequence of actions\nscript = ['forward'] * 5 + [''] * 40\n\nenv = gym.make('MineRLObtainDiamond-v0')\nenv = Recorder(env, './video', fps=60)\nenv.seed(21)\nobs = env.reset()\n\nfor action in script:\n    # Get the action space (dict of possible actions)\n    action_space = env.action_space.noop()\n\n    # Activate the selected action in the script\n    action_space[action] = 1\n\n    # Update the environment with the new action space\n    obs, reward, done, _ = env.step(action_space)\n\nenv.release()\nenv.play()\n\n\n\n\nGreat, let‚Äôs chop this tree now. We need four actions in total:\n\nForward to go in front of the tree;\nAttack to chop the tree;\nCamera to look up or down;\nJump to get the final piece of wood.\n\n\n\n\nHandling the camera can be a hassle. To simplify the syntax, we‚Äôre gonna use the str_to_act function from this GitHub repository (MIT license). This is what the new script looks like:\n\nscript = []\nscript += [''] * 20 \nscript += ['forward'] * 5\nscript += ['attack'] * 61\nscript += ['camera:[-10,0]'] * 7  # Look up\nscript += ['attack'] * 240\nscript += ['jump']\nscript += ['forward'] * 10        # Jump forward\nscript += ['camera:[-10,0]'] * 2  # Look up\nscript += ['attack'] * 150\nscript += ['camera:[10,0]'] * 7   # Look down\nscript += [''] * 40\n\n\n# Code from https://github.com/KarolisRam/MineRL2021-Intro-baselines\ndef str_to_act(env, actions):\n    action_space = env.action_space.noop()\n    for action in actions.split():\n        if ':' in action:\n            k, v = action.split(':')\n            if k == 'camera':\n                action_space[k] = eval(v)\n            else:\n                action_space[k] = v\n        else:\n            action_space[action] = 1\n    return action_space\n    \nenv = gym.make('MineRLObtainDiamond-v0')\nenv = Recorder(env, './video', fps=60)\nenv.seed(21)\nobs = env.reset()\n \nfor action in tqdm(script):\n    obs, reward, done, _ = env.step(str_to_act(env, action))\n\nenv.release()\nenv.play()\n\n\nThe agent efficiently chopped the entire tree. This is a good start, but we would like to do it in a more automated way‚Ä¶"
  },
  {
    "objectID": "posts/2022-05-25-minecraft.html#ii.-deep-learning",
    "href": "posts/2022-05-25-minecraft.html#ii.-deep-learning",
    "title": "Create a Bot to Find Diamonds in Minecraft",
    "section": "üß† II. Deep Learning",
    "text": "üß† II. Deep Learning\nOur bot works well in a fixed environment, but what happens if we change the seed or its starting point?\nEverything is scripted so the agent would probably try to chop a non-existent tree.\nThis approach is too static for our requirements: we need something that can adapt to new environments. Instead of scripting orders, we want an AI that knows how to chop trees. Naturally, reinforcement learning is a pertinent framework to train this agent. More specifically, deep RL seems to be the solution since we‚Äôre processing images to select the best actions.\nThere are two ways of implementing it:\n\nPure deep RL: the agent is trained from scratch by interacting with the environment. It is rewarded every time it chops a tree.\nImitation learning: the agent learns how to chop trees from a dataset. In this case, it is a sequence of actions to chop trees made by a human.\n\nThe two approaches have the same outcome, but they‚Äôre not equivalent. According to the authors of the MineRL 2021 competition, it takes 8 hours for the pure RL solution and 15 minutes for the imitation learning agent to reach the same level of performance.\nWe don‚Äôt have that much time to spend, so we‚Äôre going for the Imitation Learning solution. This technique is also called Behavior Cloning, which is the simplest form of imitation.\nNote that Imitation Learning is not always more efficient than RL. If you want to know more about it, Kumar et al.¬†wrote a great blog post about this topic.\n\n\n\nThe problem is reduced to a multi-class classification task. Our dataset consists of mp4 videos, so we‚Äôll use a Convolutional Neural Network (CNN) to translate these images into relevant actions. Our goal is also to limit the number of actions (classes) that can be taken so the CNN has fewer options, which means it‚Äôll be trained more efficiently.\n\nimport torch\nimport torch.nn as nn\n\n\nclass CNN(nn.Module):\n    def __init__(self, input_shape, output_dim):\n        super().__init__()\n        n_input_channels = input_shape[0]\n        self.cnn = nn.Sequential(\n            nn.Conv2d(n_input_channels, 32, kernel_size=8, stride=4),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, kernel_size=4, stride=2),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.Conv2d(64, 64, kernel_size=3, stride=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.Flatten(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, output_dim)\n        )\n\n    def forward(self, observations):\n        return self.cnn(observations)\n\ndef dataset_action_batch_to_actions(dataset_actions, camera_margin=5):\n    camera_actions = dataset_actions[\"camera\"].squeeze()\n    attack_actions = dataset_actions[\"attack\"].squeeze()\n    forward_actions = dataset_actions[\"forward\"].squeeze()\n    jump_actions = dataset_actions[\"jump\"].squeeze()\n    batch_size = len(camera_actions)\n    actions = np.zeros((batch_size,), dtype=int)\n\n    for i in range(len(camera_actions)):\n        if camera_actions[i][0] &lt; -camera_margin:\n            actions[i] = 3\n        elif camera_actions[i][0] &gt; camera_margin:\n            actions[i] = 4\n        elif camera_actions[i][1] &gt; camera_margin:\n            actions[i] = 5\n        elif camera_actions[i][1] &lt; -camera_margin:\n            actions[i] = 6\n        elif forward_actions[i] == 1:\n            if jump_actions[i] == 1:\n                actions[i] = 2\n            else:\n                actions[i] = 1\n        elif attack_actions[i] == 1:\n            actions[i] = 0\n        else:\n            actions[i] = -1\n    return actions\n\nclass ActionShaping(gym.ActionWrapper):\n    def __init__(self, env, camera_angle=10):\n        super().__init__(env)\n        self.camera_angle = camera_angle\n        self._actions = [\n            [('attack', 1)],\n            [('forward', 1)],\n            [('jump', 1)],\n            [('camera', [-self.camera_angle, 0])],\n            [('camera', [self.camera_angle, 0])],\n            [('camera', [0, self.camera_angle])],\n            [('camera', [0, -self.camera_angle])],\n        ]\n        self.actions = []\n        for actions in self._actions:\n            act = self.env.action_space.noop()\n            for a, v in actions:\n                act[a] = v\n                act['attack'] = 1\n            self.actions.append(act)\n        self.action_space = gym.spaces.Discrete(len(self.actions))\n\n    def action(self, action):\n        return self.actions[action]\n\nIn this example, we manually define 7 relevant actions: attack, forward, jump, and move the camera (left, right, up, down). Another popular approach is to apply K-means in order to automatically retrieve the most relevant actions taken by humans. In any case, the objective is to discard the least useful actions to complete our objective, such as crafting in our example.\nLet‚Äôs train our CNN on the MineRLTreechop-v0 dataset. Other datasets can be found at this address. We chose a learning rate of 0.0001 and 6 epochs with a batch size of 32.\n\n%%time\n\n# Get data\nminerl.data.download(directory='data', environment='MineRLTreechop-v0')\ndata = minerl.data.make(\"MineRLTreechop-v0\", data_dir='data', num_workers=2)\n\n# Model\nmodel = CNN((3, 64, 64), 7).cuda()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.0001)\ncriterion = nn.CrossEntropyLoss()\n\n# Training loop\nstep = 0\nlosses = []\nfor state, action, _, _, _ \\\n          in tqdm(data.batch_iter(num_epochs=6, batch_size=32, seq_len=1)):\n    # Get pov observations\n    obs = state['pov'].squeeze().astype(np.float32)\n    # Transpose and normalize\n    obs = obs.transpose(0, 3, 1, 2) / 255.0\n\n    # Translate batch of actions for the ActionShaping wrapper\n    actions = dataset_action_batch_to_actions(action)\n\n    # Remove samples with no corresponding action\n    mask = actions != -1\n    obs = obs[mask]\n    actions = actions[mask]\n\n    # Update weights with backprop\n    logits = model(torch.from_numpy(obs).float().cuda())\n    loss = criterion(logits, torch.from_numpy(actions).long().cuda())\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n    # Print loss\n    step += 1\n    losses.append(loss.item())\n    if (step % 2000) == 0:\n        mean_loss = sum(losses) / len(losses)\n        tqdm.write(f'Step {step:&gt;5} | Training loss = {mean_loss:.3f}')\n        losses.clear()\n\ntorch.save(model.state_dict(), 'model.pth')\ndel data\n\nDownload: https://minerl.s3.amazonaws.com/v4/MineRLTreechop-v0.tar: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 1511.0/1510.73792 [00:25&lt;00:00, 58.46MB/s]\n\n\n\n\n\nStep  2000 | Training loss = 0.901\nStep  4000 | Training loss = 0.878\nStep  6000 | Training loss = 0.836\nStep  8000 | Training loss = 0.826\nStep 10000 | Training loss = 0.828\nStep 12000 | Training loss = 0.805\nStep 14000 | Training loss = 0.804\nStep 16000 | Training loss = 0.773\nStep 18000 | Training loss = 0.791\nStep 20000 | Training loss = 0.789\nStep 22000 | Training loss = 0.789\nStep 24000 | Training loss = 0.816\nStep 26000 | Training loss = 0.785\nStep 28000 | Training loss = 0.769\nStep 30000 | Training loss = 0.789\nStep 32000 | Training loss = 0.777\nStep 34000 | Training loss = 0.763\nStep 36000 | Training loss = 0.738\nStep 38000 | Training loss = 0.744\nStep 40000 | Training loss = 0.751\nStep 42000 | Training loss = 0.763\nStep 44000 | Training loss = 0.764\nStep 46000 | Training loss = 0.744\nStep 48000 | Training loss = 0.732\nStep 50000 | Training loss = 0.740\nStep 52000 | Training loss = 0.748\nStep 54000 | Training loss = 0.678\nStep 56000 | Training loss = 0.765\nStep 58000 | Training loss = 0.727\nStep 60000 | Training loss = 0.735\nStep 62000 | Training loss = 0.707\nStep 64000 | Training loss = 0.716\nStep 66000 | Training loss = 0.718\nStep 68000 | Training loss = 0.710\nStep 70000 | Training loss = 0.692\nStep 72000 | Training loss = 0.693\nStep 74000 | Training loss = 0.687\nStep 76000 | Training loss = 0.695\nCPU times: user 15min 21s, sys: 55.3 s, total: 16min 16s\nWall time: 26min 46s\n\n\nOur model is trained. We can now instantiate an environment and see how it behaves. If the training was successful, it should frantically cut all the trees in sight.\nThis time, we‚Äôll use the ActionShaping wrapper to map the array of numbers created with dataset_action_batch_to_actions to discrete actions in MineRL.\nOur model needs a pov observation in the correct format and outputs logits. These logits can be turned into a probability distribution over a set of 7 actions with the softmax function. We then randomly choose an action based on the probabilities. The selected action is implemented in MineRL thanks to env.step(action).\nThis process is repeated as many times as we want. Let‚Äôs do it 1000 times and watch the result.\n\nmodel = CNN((3, 64, 64), 7).cuda()\nmodel.load_state_dict(torch.load('model.pth'))\n\nenv = gym.make('MineRLObtainDiamond-v0')\nenv1 = Recorder(env, './video', fps=60)\nenv = ActionShaping(env1)\n\naction_list = np.arange(env.action_space.n)\n\nobs = env.reset()\n\nfor step in tqdm(range(1000)):\n    # Get input in the correct format\n    obs = torch.from_numpy(obs['pov'].transpose(2, 0, 1)[None].astype(np.float32) / 255).cuda()\n    # Turn logits into probabilities\n    probabilities = torch.softmax(model(obs), dim=1)[0].detach().cpu().numpy()\n    # Sample action according to the probabilities\n    action = np.random.choice(action_list, p=probabilities)\n\n    obs, reward, _, _ = env.step(action)\n\nenv1.release()\nenv1.play()\n\n\nOur agent is quite chaotic but it manages to chop trees in this new, unseen environment. Now, how to find diamonds?"
  },
  {
    "objectID": "posts/2022-05-25-minecraft.html#iii.-script-imitation-learning",
    "href": "posts/2022-05-25-minecraft.html#iii.-script-imitation-learning",
    "title": "Create a Bot to Find Diamonds in Minecraft",
    "section": "‚õèÔ∏è III. Script + Imitation Learning",
    "text": "‚õèÔ∏è III. Script + Imitation Learning\nA simple yet powerful approach consists of combining scripted actions with artificial intelligence. Learn the boring stuff, script the knowledge.\nIn this paradigm, we‚Äôll use the CNN to get a healthy amount of wood (3000 steps). Then, we can script a sequence to craft planks, sticks, a crafting table, a wooden pickaxe, and start mining stone (it should be below our feet). This stone can then be used to craft a stone pickaxe, which can mine iron ore.\n\n\n\nThis is when things get complicated: iron ore is quite rare, so we would need to run the game for a while to find a deposit. Then, we would have to craft a furnace and melt it to get the iron pickaxe. Finally, we would have to go even deeper and be even luckier to obtain a diamond without falling into lava.\nAs you can see, it‚Äôs doable but the outcome is fairly random. We could train another agent to find diamonds, and even a third one to create the iron pickaxe. If you‚Äôre interested in more complex approaches, you can read the results of the MineRL Diamond 2021 Competition by Kanervisto et al.¬†It describes several solutions using different clever techniques, including end-to-end deep learning architectures. Nonetheless, it is a complex problem and no team managed to consistently find diamonds, if at all.\nThis is why we will limit ourselves to obtaining a stone pickaxe in the following example, but you can modify the code to go further.\n\n# Craft 4 planks, 2 sticks, 2 crafting tables, and place it\nscript = []\nscript += ['craft:planks'] * 6\nscript += ['craft:stick'] * 2\nscript += ['craft:crafting_table'] * 2\nscript += ['camera:[10,0]'] * 18\nscript += ['attack'] * 20\nscript += [''] * 10\nscript += ['jump']\nscript += [''] * 5\nscript += ['place:crafting_table']\nscript += [''] * 10\n\n# Craft a wooden pickaxe and equip it\nscript += ['camera:[-1,0]']\nscript += ['nearbyCraft:wooden_pickaxe']\nscript += ['camera:[1,0]']\nscript += [''] * 10\nscript += ['equip:wooden_pickaxe']\nscript += [''] * 10\n\n# Dig stone\nscript += ['attack'] * 500\n\n# Craft stone pickaxe\nscript += [''] * 10\nscript += ['jump']\nscript += [''] * 5\nscript += ['place:crafting_table']\nscript += [''] * 10\nscript += ['camera:[-1,0]']\nscript += ['nearbyCraft:stone_pickaxe']\nscript += ['camera:[1,0]']\nscript += [''] * 10\nscript += ['equip:stone_pickaxe']\nscript += [''] * 10\n\n\nmodel = CNN((3, 64, 64), 7).cuda()\nmodel.load_state_dict(torch.load('model.pth'))\n\nenv_script = gym.make('MineRLObtainDiamond-v0')\nenv_cnn = Recorder(env_script, './video', fps=60)\nenv_script = ActionShaping(env_cnn)\n\naction_list = np.arange(env_script.action_space.n)\n\nfor _ in range(10):\n    obs = env_script.reset()\n    done = False\n\n    # 1. Get wood with the CNN\n    for i in tqdm(range(3000)):\n        obs = torch.from_numpy(obs['pov'].transpose(2, 0, 1)[None].astype(np.float32) / 255).cuda()\n        probabilities = torch.softmax(model(obs), dim=1)[0].detach().cpu().numpy()\n        action = np.random.choice(action_list, p=probabilities)\n        obs, reward, done, _ = env_script.step(action)\n        if done:\n            break\n\n    # 2. Craft stone pickaxe with scripted actions\n    if not done:\n        for action in tqdm(script):\n            obs, reward, done, _ = env_cnn.step(str_to_act(env_cnn, action))\n            if done:\n                break\n\n    print(obs[\"inventory\"])\n    env_cnn.release()\n    env_cnn.play()\n\n\nWe can see our agent chopping wood like a madman during the first 3000 steps, then our script takes over and completes the task. It might not be obvious, but the command print(obs.inventory) shows a stone pickaxe. Note that this is a cherry-picked example: most of the runs don‚Äôt end that well.\nThere are several reasons why the agent may fail: it can spawn in a hostile environment (water, lava, etc.), in an area without wood, or even fall and die. Playing with different seeds will give you a good understanding of the complexity of this problem and, hopefully, ideas to build event better agents."
  },
  {
    "objectID": "posts/2022-05-25-minecraft.html#conclusion",
    "href": "posts/2022-05-25-minecraft.html#conclusion",
    "title": "Create a Bot to Find Diamonds in Minecraft",
    "section": "Conclusion",
    "text": "Conclusion\nI hope you enjoyed this little guide to reinforcement learning in Minecraft. Beyond its obvious popularity, Minecraft is an interesting environment to try and test RL agents. Like NetHack, it requires a thorough knowledge of its mechanics to plan precise sequences of actions in a procedurally-generated world. In this article,\n\nWe learned how to use MineRL;\nWe saw two approaches (script and behavior cloning) and how to combine them;\nWe visualized the agent‚Äôs actions with short videos.\n\nThe main drawback of the environment is its slow processing time. Minecraft is not a lightweight game like NetHack or Pong, which is why the agents take a long time to be trained. If this is a problem for you, I would recommend lighter environments like Gym Retro.\nThank you for your attention! Feel free to follow me on Twitter if you‚Äôre interested in AI applied to video games."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "üìú Thesis\n\n\nAnomaly-based network intrusion detection using machine learningMaxime LabonnePolytechnic Institute of Paris (Institut Polytechnique de Paris), 2020\n\n\nüìù Proceedings\n\n\nSpam-T5: Benchmarking Large Language Models for Few-Shot Email Spam DetectionMaxime Labonne, Sean MoranPreprint\nToward Formal Data Set Verification for Building Effective Machine Learning ModelsJorge L√≥pez, Maxime Labonne, Claude PolettiKDIR 2021 - 13th International Conference on Knowledge Discovery and Information Retrieval\nShort-Term Flow-Based Bandwidth Forecasting using Machine LearningMaxime Labonne, Jorge L√≥pez, Claude Poletti, Jean-Baptiste Munier2021 IEEE 22nd International Symposium on a World of Wireless, Mobile and Multimedia Networks (WoWMoM)\nPriority flow admission and routing in sdn: Exact and heuristic approachesJorge L√≥pez, Maxime Labonne, Claude Poletti, Dallal Belabed2020 IEEE 19th International Symposium on Network Computing and Applications (NCA)\nPredicting Bandwidth Utilization on Network Links Using Machine LearningMaxime Labonne, Charalampos Chatzinakis, Alexis Olivereau2020 European Conference on Networks and Communications (EuCNC)\nUnsupervised protocol-based intrusion detection for real-world networksMaxime Labonne, Alexis Olivereau, Baptise Polv√©, Djamal Zeghlache2020 International Conference on Computing, Networking and Communications (ICNC)\nA Cascade-structured Meta-Specialists Approach for Neural Network-based Intrusion DetectionMaxime Labonne, Alexis Olivereau, Baptiste Polv√©, Djamal Zeghlache2019 16th IEEE Annual Consumer Communications & Networking Conference (CCNC)\nAnomaly detection in vehicle-to-infrastructure communicationsMichele Russo, Maxime Labonne, Alexis Olivereau, Mohammad Rmayti2018 IEEE 87th Vehicular Technology Conference (VTC Spring)"
  }
]