{
  
    
        "post0": {
            "title": "Become a Master Strategist with OR-Tools",
            "content": "In real warfare and strategy games, strategists are faced with a common problem: how to allocate their resources to be the most efficient possible? Let&#39;s take an example, we have three resources: 🌾food, 🪵wood, and 🪙gold. We can produce three types of units: 🗡️swordsmen, 🏹bowmen, and 🐎horsemen. 🐎Horsemen are better than 🏹bowmen, who are in turn better than 🗡️swordsmen. The following table provides the cost and power of each unit (they&#39;re freely inspired by a real strategy game, Age of Empires IV): . Unit 🌾Food 🪵Wood 🪙Gold 💪Power . 🗡️Swordsman | 60 | 20 | 0 | 70 | . 🏹Bowman | 80 | 10 | 40 | 95 | . 🐎Horseman | 140 | 0 | 100 | 230 | . . Imagine that we have 1200 🌾food, 800 🪵wood, and 600 🪙gold. How to maximize the power of our army considering these resources? We could simply find the unit with the best power/cost ratio, take as many of them as possible, and repeat the process with the other two units. But this &quot;guess and check&quot; solution might not even be optimal. Now imagine we have millions of units and resources and other constraints: this greedy strategy is very likely to completely miss the optimal solution. It is possible to use a machine learning (ML) algorithm (a metaheuristic like a genetic algorithm) to solve this problem, but we have no guarantee that the solution will be optimal either. . Fortunately for us, there is a method that can solve our problem in an optimal way: linear optimization (or linear programming), which is part of the field of operations research (OR). In this article, we&#39;re going to find the best solution possible to this problem. We&#39;ll use OR-Tools, a powerful Python library specialized in optimization. It will help us to model this problem in linear optimization terms and output an optimal solution with a solver. Finally, we will write a model and a function that can take on a bigger challenge and actually solve a whole class of optimization problems. . &#129351; I. Finding the optimal solution . Okay, let&#39;s play with linear optimization in Python. There are different libraries such as the multi-purposed SciPy, the beginner-friendly PuLP, the exhaustive pyomo, and many others. Today, we are going to use Google OR-Tools, which is quite user-friendly, comes with several prepackaged solvers, and has by far the most stars on GitHub. If the installation doesn&#39;t work, please restart the kernel and try again: it can fail sometimes. ¯ _(ツ)_/¯ . !python -m pip install --upgrade --user -q ortools . All these libraries have a hidden benefit: they act as interfaces to use the same model with different solvers. Solvers like Gurobi, Cplex, or SCIP have their own APIs, but the models they create are linked to a specific solver. OR-Tools allows us to use an abstract and quite pythonic way of modeling our problems, and then choose one or several solvers to find an optimal solution. . &lt;/source&gt; OR-Tools comes with its own linear programming solver, called GLOP for Google Linear Optimization Package. It is an open source project created by Google&#39;s Operations Research Team and written in C++. According to Google, it is used to stabilize YouTube videos and in various projects such a cooperative multi-agent reinforcement learning architecture. Other solvers are available, such as SCIP, an excellent non-commercial solver created in 2005 and updated and maintained to this day. We could use other options like Gurobi and Cplex but we would need to install them on top of OR-Tools and get the appropriate licenses (which can be quite costly). For now, let&#39;s try GLOP. . from ortools.linear_solver import pywraplp # Create a linear solver using the GLOP backend solver = pywraplp.Solver(&#39;Maximize army power&#39;, pywraplp.Solver.GLOP_LINEAR_PROGRAMMING) . We created an instance of the OR-Tools solver using GLOP. The first thing we want to define are the variables we want to optimize. In our example, we have three variables: the number of 🗡️swordsmen, 🏹bowmen, and 🐎horsemen in the army. OR-Tools accepts three types of variables: . NumVar for continuous variables; | IntVar for integer variables; | BoolVar for boolean variables. | . We&#39;re looking for round numbers of units, so let&#39;s choose IntVar. We then need to specify lower and upper bounds for these variables. We want at least 0 unit, but we don&#39;t really have an upper bound. So we can argue that our upper bound is infinity and solver.infinity() instead. Actually $ infty$ might be a little too much considering the number of resources we have. We could also take $1000$ as an upper bound for instance, since we can&#39;t go that high anyway. But let&#39;s keep $∞$ for now. . Let&#39;s call the number of 🗡️swordsmen $swordsmen$, the number of 🏹bowmen $bowmen$, and the number of 🐎horsemen $horsemen$. We can formally write: . $$0 leq swordsmen &lt; infty 0 leq bowmen &lt; infty 0 leq horsemen &lt; infty$$ . Good, let&#39;s translate it into code. The syntax is quite straightforward with OR-Tools. . swordsmen = solver.IntVar(0, solver.infinity(), &#39;swordsmen&#39;) bowmen = solver.IntVar(0, solver.infinity(), &#39;bowmen&#39;) horsemen = solver.IntVar(0, solver.infinity(), &#39;horsemen&#39;) . We defined our variables, but another essential parameter are the constraints. In our case, we have a limited number of resources we can use to produce units. In other words, we can&#39;t spend more resources than we have: for instance, the 🌾food spent to recruit units cannot be higher than 1200. The same is true with 🪵wood (800) and 🪙gold (600). . According to our table, units have the following costs: . 1 swordsman = 🌾60 + 🪵20; | 1 bowman = 🌾80 + 🪵10 + 🪙40; | 1 horseman = 🌾140 + 🪙100. | . We can write these constraints as follows: . $$60 times swordsmen + 80 times bowmen + 140 times horsemen leq 1200 20 times swordsmen + 10 times bowmen leq 800 40 times bowmen + 100 times horsemen leq 600$$In OR-Tools, we simply add the constraints to our solver instance with solver.Add(). . solver.Add(swordsmen*60 + bowmen*80 + horsemen*140 &lt;= 1200) # Food solver.Add(swordsmen*20 + bowmen*10 &lt;= 800) # Wood solver.Add(bowmen*40 + horsemen*100 &lt;= 600) # Gold . &lt;ortools.linear_solver.pywraplp.Constraint; proxy of &lt;Swig Object of type &#39;operations_research::MPConstraint *&#39; at 0x7f68c2688c90&gt; &gt; . Now that we have our variables and constraints, we want to define our goal (or objective function). In linear optimization, this function has to be linear, so of the form $f(x, y, z) = ax + by + cz + d$. In our example, the objective is quite clear: we want to recruit the army with the highest power. The table gives us the following power values: . 1 swordsman = 💪70; | 1 bowman = 💪95; | 1 horseman = 💪230. | . Maximizing the power of the army amounts to maximizing the sum of the power of each unit. Let&#39;s call $units$ the set of our three parameters $ {swordsmen, bowmen, horsemen }$. Our objective function can be written as: . $$max f(units) = 70 times swordsmen + 95 times bowmen + 230 times horsemen$$ . In general, there are two types of objective functions: minimizing and maximizing. In OR-Tools, we declare this goal with solver.Maximize() or solver.Minimize(). . solver.Maximize(swordsmen*70 + bowmen*95 + horsemen*230) . And we&#39;re done! There are three steps to model an optimization problem: . Declaring the variables to optimize with lower and upper bounds; | Adding constraints on these variables; | Defining the objective function to maximize or to minimize. | Now that is clear, we can ask the solver to find an optimal solution for us. This is done with solver.Solve() and returns a status. This status can then be used to check if the solution is indeed optimal. Let&#39;s print the highest total power we can get with the best army configuration. . status = solver.Solve() # If an optimal solution has been found, print results if status == pywraplp.Solver.OPTIMAL: print(&#39;================= Solution =================&#39;) print(f&#39;Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations&#39;) print() print(f&#39;Optimal power = {solver.Objective().Value()} 💪power&#39;) print(&#39;Army:&#39;) print(f&#39; - 🗡️Swordsmen = {swordsmen.solution_value()}&#39;) print(f&#39; - 🏹Bowmen = {bowmen.solution_value()}&#39;) print(f&#39; - 🐎Horsemen = {horsemen.solution_value()}&#39;) else: print(&#39;The solver could not find an optimal solution.&#39;) . ================= Solution ================= Solved in 87.00 milliseconds in 2 iterations Optimal power = 1800.0 💪power Army: - 🗡️Swordsmen = 6.0000000000000036 - 🏹Bowmen = 0.0 - 🐎Horsemen = 5.999999999999999 . Great! The solver found an optimal solution: our army has a total power of 💪1800 with 6 🗡️swordsmen and 6 🐎horsemen (sorry bowmen!). . Let&#39;s unpack this result: the solver decided to take the maximum number of 🐎horsemen (6, since we only have 🪙600 and they each cost 🪙100). The remaining resources are spent in 🗡️swordsmen: we have $1200 - 6 times 140 = 360$ 🌾food left, which is why the solver chose 6 🗡️swordsmen. We can deduce that the horsemen are the best unit and the bowmen are the worst one because they haven&#39;t been chosen at all. . Okay, but there&#39;s something quite weird: these numbers are not round, even though we specified that we wanted integers. So what happened? This strange behavior is due to the GLOP solver: it is a linear programming (LP) solver, and not an integer linear programming (ILP) one. In summary, it can only use real numbers and not integers as variables. So why did we declare our variables as integers if it doesn&#39;t take it into account? . GLOP cannot solve ILP problems, but other solvers can. Actually, a lot of them are mixed integer linear programming (MILP, commonly called MIP) solvers. This means that they can consider both continuous (real numbers) and discrete (integers) variables. A particular case of discrete values are boolean variables to represent decisions with 0-1 values. . We talked about SCIP earlier, which is a good example since it can solve both MILP and MINLP (mixed integer nonlinear programming) problems. Another potential candidate is CBC, an open source MIP solver directly available through OR-Tools. Thanks to library, we can use the same model and just change the solver to SCIP or CBC. . solver = pywraplp.Solver(&#39;Maximize army power&#39;, pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING) # 1. Create the variables we want to optimize swordsmen = solver.IntVar(0, solver.infinity(), &#39;swordsmen&#39;) bowmen = solver.IntVar(0, solver.infinity(), &#39;bowmen&#39;) horsemen = solver.IntVar(0, solver.infinity(), &#39;horsemen&#39;) # 2. Add constraints for each resource solver.Add(swordsmen*60 + bowmen*80 + horsemen*140 &lt;= 1200) solver.Add(swordsmen*20 + bowmen*10 &lt;= 800) solver.Add(bowmen*40 + horsemen*100 &lt;= 600) # 3. Maximize the objective function solver.Maximize(swordsmen*70 + bowmen*95 + horsemen*230) # Solve problem status = solver.Solve() # If an optimal solution has been found, print results if status == pywraplp.Solver.OPTIMAL: print(&#39;================= Solution =================&#39;) print(f&#39;Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations&#39;) print() print(f&#39;Optimal value = {solver.Objective().Value()} 💪power&#39;) print(&#39;Army:&#39;) print(f&#39; - 🗡️Swordsmen = {swordsmen.solution_value()}&#39;) print(f&#39; - 🏹Bowmen = {bowmen.solution_value()}&#39;) print(f&#39; - 🐎Horsemen = {horsemen.solution_value()}&#39;) else: print(&#39;The solver could not find an optimal solution.&#39;) . ================= Solution ================= Solved in 3.00 milliseconds in 0 iterations Optimal value = 1800.0 💪power Army: - 🗡️Swordsmen = 6.0 - 🏹Bowmen = 0.0 - 🐎Horsemen = 6.0 . Strictly speaking, our variables are still floats (type(swordsmen.solution_value()) = float) but we can see that they don&#39;t have weird decimals anymore: the CBC solver really considered them as integers. In general, we can just round up these values since the error is insignificant, but it is important to remember to choose the appropriate solver according to the studied problem: LP (continuous variables) or MIP (combination of continuous and discrete variables). There are other types such as quadratic (QP) or nonlinear (NLP or MINLP, with an exponential objective function or constraints for instance). . &#129521; III. Building a general model . But what if our resources change? Or if the cost of a unit is not the same? What if we upgraded horsemen and their power increased? One of the best perks of OR-Tools is that it uses a general-purpose programming language like Python. Instead of static numbers, we can store our parameters in objects like dictionaries or arrays. The code won&#39;t be as readable, but it becomes much more flexible: actually, it can be so flexible than we can solve an entire class of optimization problems without changing the model (just the parameters). . Let&#39;s transform our input parameters into arrays and feed them to the solver through a function. . UNITS = [&#39;🗡️Swordsmen&#39;, &#39;🏹Bowmen&#39;, &#39;🐎Horsemen&#39;] DATA = [[60, 20, 0, 70], [80, 10, 40, 95], [140, 0, 100, 230]] RESOURCES = [1200, 800, 600] def solve_army(UNITS, DATA, RESOURCES): # Create the linear solver using the CBC backend solver = pywraplp.Solver(&#39;Maximize army power&#39;, pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING) # 1. Create the variables we want to optimize units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS] # 2. Add constraints for each resource for r, _ in enumerate(RESOURCES): solver.Add(sum(DATA[u][r] * units[u] for u, _ in enumerate(units)) &lt;= RESOURCES[r]) # 3. Maximize the objective function solver.Maximize(sum(DATA[u][-1] * units[u] for u, _ in enumerate(units))) # Solve problem status = solver.Solve() # If an optimal solution has been found, print results if status == pywraplp.Solver.OPTIMAL: print(&#39;================= Solution =================&#39;) print(f&#39;Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations&#39;) print() print(f&#39;Optimal value = {solver.Objective().Value()} 💪power&#39;) print(&#39;Army:&#39;) for u, _ in enumerate(units): print(f&#39; - {units[u].name()} = {units[u].solution_value()}&#39;) else: print(&#39;The solver could not find an optimal solution.&#39;) solve_army(UNITS, DATA, RESOURCES) . ================= Solution ================= Solved in 2.00 milliseconds in 0 iterations Optimal value = 1800.0 💪power Army: - 🗡️Swordsmen = 6.0 - 🏹Bowmen = 0.0 - 🐎Horsemen = 6.0 . Good, the results are the same: our code seems to work. Now let&#39;s change the parameters to tackle a slightly more complex problem. . Imagine we have a lot more resources: 🌾183000, 🪵90512, and 🪙80150, so we can also produce a lot more units! This is the new table: . Unit 🌾Food 🪵Wood 🪙Gold 💪Attack ❤️Health . 🗡️Swordsman | 60 | 20 | 0 | 6 | 70 | . 🛡️Man-at-arms | 100 | 0 | 20 | 12 | 155 | . 🏹Bowman | 30 | 50 | 0 | 5 | 70 | . ❌Crossbowman | 80 | 0 | 40 | 12 | 80 | . 🔫Handcannoneer | 120 | 0 | 120 | 35 | 150 | . 🐎Horseman | 100 | 20 | 0 | 9 | 125 | . ♞Knight | 140 | 0 | 100 | 24 | 230 | . 🐏Battering ram | 0 | 300 | 0 | 200 | 700 | . 🎯Springald | 0 | 250 | 250 | 30 | 200 | . Notice that we transformed the 💪power into two values: 💪attack and ❤️ health, which is closer to reality. Health values are higher than attack values, which is why we want to add a weight to make them more comparable. Let&#39;s take 10 as an example, so $power = 10 times attack + health$. We call the set of variables to optimize $units = {swordsmen, dots, springalds }$, where every element is the number of the corresponding unit. Our objective function becomes: . $$max f(units) = sum_{u in units} (10 times power + health) cdot u$$ . Adapting our code to this new problem is actually quite simple: we just have to change the input parameters and update the objective function. . UNITS = [ &#39;🗡️Swordsmen&#39;, &#39;🛡️Men-at-arms&#39;, &#39;🏹Bowmen&#39;, &#39;❌Crossbowmen&#39;, &#39;🔫Handcannoneers&#39;, &#39;🐎Horsemen&#39;, &#39;♞Knights&#39;, &#39;🐏Battering rams&#39;, &#39;🎯Springalds&#39;, &#39;🪨Mangonels&#39;, ] DATA = [ [60, 20, 0, 6, 70], [100, 0, 20, 12, 155], [30, 50, 0, 5, 70], [80, 0, 40, 12, 80], [120, 0, 120, 35, 150], [100, 20, 0, 9, 125], [140, 0, 100, 24, 230], [0, 300, 0, 200, 700], [0, 250, 250, 30, 200], [0, 400, 200, 12*3, 240] ] RESOURCES = [183000, 90512, 80150] def solve_army(UNITS, DATA, RESOURCES): # Create the linear solver using the CBC backend solver = pywraplp.Solver(&#39;Maximize army power&#39;, pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING) # 1. Create the variables we want to optimize units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS] # 2. Add constraints for each resource for r, _ in enumerate(RESOURCES): solver.Add(sum(DATA[u][r] * units[u] for u, _ in enumerate(units)) &lt;= RESOURCES[r]) # 3. Maximize the new objective function solver.Maximize(sum((10*DATA[u][-2] + DATA[u][-1]) * units[u] for u, _ in enumerate(units))) # Solve problem status = solver.Solve() # If an optimal solution has been found, print results if status == pywraplp.Solver.OPTIMAL: print(&#39;================= Solution =================&#39;) print(f&#39;Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations&#39;) print() print(f&#39;Optimal value = {solver.Objective().Value()} 💪power&#39;) print(&#39;Army:&#39;) for u, _ in enumerate(units): print(f&#39; - {units[u].name()} = {units[u].solution_value()}&#39;) else: print(&#39;The solver could not find an optimal solution.&#39;) solve_army(UNITS, DATA, RESOURCES) . ================= Solution ================= Solved in 74.00 milliseconds in 412 iterations Optimal value = 1393145.0 💪power Army: - 🗡️Swordsmen = 2.0 - 🛡️Men-at-arms = 1283.0 - 🏹Bowmen = 3.0 - ❌Crossbowmen = 0.0 - 🔫Handcannoneers = 454.0 - 🐎Horsemen = 0.0 - ♞Knights = 0.0 - 🐏Battering rams = 301.0 - 🎯Springalds = 0.0 - 🪨Mangonels = 0.0 . This problem would take a long time for humans to address, but the ILP solver did it in the blink of an eye. Better than that: it also gives us the guarantee that our solution is optimal, which is always nice to know! We could increase the number of units, give billions of resources but you get the picture: it would just take longer to obtain a solution, but it wouldn&#39;t change the problem. . &#9876;&#65039; IV. Time for war . Now, let&#39;s say we scouted our enemy and know that the enemy army has a 💪power of 1,000,000. We could build a much better army, but our resources are precious and it wouldn&#39;t be very efficient: all we have to do is to build an army with a 💪power higher than 1,000,000 (even 1,000,001 would be enough). In other words, it means we&#39;re looking for the most cost-efficient unit and we want the minimum number of them to defeat the enemy army. Knowing the number of units to produce will also tell us how much resource we need. . We can reuse our input parameters since they didn&#39;t change. But the constraint is different this time: we want a 💪power higher than 1,000,000. It means that the sum of the power of the chosen units must be higher than this number. . $$ sum_{u in units} (10 times attack + health) cdot u &gt; 1 ,000 ,000$$ . In code, we can loop through our units and resources to design this constraint. . The objective function also has to change. Our goal is to minimize the sum of resources spent to build the army. . $$min f(units) = sum_{u in units} (food + wood + gold) cdot u$$ . Once again, we can loop through our resources to implement it in OR-Tools. . def solve_army(UNITS, DATA, RESOURCES): # Create the linear solver using the CBC backend solver = pywraplp.Solver(&#39;Minimize resource consumption&#39;, pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING) # 1. Create the variables we want to optimize units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS] # 2. Add constraints for each resource for r, _ in enumerate(RESOURCES): solver.Add(sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u] for u, _ in enumerate(units)) &gt;= 1000001) # 3. Minimize the objective function solver.Minimize(sum((DATA[u][0] + DATA[u][1] + DATA[u][2]) * units[u] for u, _ in enumerate(units))) # Solve problem status = solver.Solve() # If an optimal solution has been found, print results if status == pywraplp.Solver.OPTIMAL: print(&#39;================= Solution =================&#39;) print(f&#39;Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations&#39;) print() power = sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u].solution_value() for u, _ in enumerate(units)) print(f&#39;Optimal value = {solver.Objective().Value()} 🌾🪵🪙resources&#39;) print(f&#39;Power = 💪{power}&#39;) print(&#39;Army:&#39;) for u, _ in enumerate(units): print(f&#39; - {units[u].name()} = {units[u].solution_value()}&#39;) print() food = sum((DATA[u][0]) * units[u].solution_value() for u, _ in enumerate(units)) wood = sum((DATA[u][1]) * units[u].solution_value() for u, _ in enumerate(units)) gold = sum((DATA[u][2]) * units[u].solution_value() for u, _ in enumerate(units)) print(&#39;Resources:&#39;) print(f&#39; - 🌾Food = {food}&#39;) print(f&#39; - 🪵Wood = {wood}&#39;) print(f&#39; - 🪙Gold = {gold}&#39;) else: print(&#39;The solver could not find an optimal solution.&#39;) solve_army(UNITS, DATA, RESOURCES) . ================= Solution ================= Solved in 4.00 milliseconds in 0 iterations Optimal value = 111300.0 🌾🪵🪙resources Power = 💪1001700.0 Army: - 🗡️Swordsmen = 0.0 - 🛡️Men-at-arms = 0.0 - 🏹Bowmen = 0.0 - ❌Crossbowmen = 0.0 - 🔫Handcannoneers = 0.0 - 🐎Horsemen = 0.0 - ♞Knights = 0.0 - 🐏Battering rams = 371.0 - 🎯Springalds = 0.0 - 🪨Mangonels = 0.0 Resources: - 🌾Food = 0.0 - 🪵Wood = 111300.0 - 🪙Gold = 0.0 . The solver found an optimal solution: we need to build 371 🐏battering rams for a total cost of 111,300 🪵wood. Wait, what if we don&#39;t have that much wood? In the previous section, we only had 🌾183000, 🪵90512, and 🪙80150: we cannot produce 371 🐏battering rams. 😱 . So is it possible to take these limited resources into account and still try to build the cheapest better army? Actually, it&#39;s super easy: we just have to copy/paste the constraints from the previous section. . def solve_army(UNITS, DATA, RESOURCES): # Create the linear solver using the CBC backend solver = pywraplp.Solver(&#39;Minimize resource consumption&#39;, pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING) # 1. Create the variables we want to optimize units = [solver.IntVar(0, solver.infinity(), unit) for unit in UNITS] # 2. Add constraints for each resource for r, _ in enumerate(RESOURCES): solver.Add(sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u] for u, _ in enumerate(units)) &gt;= 1000001) # Old constraints for limited resources for r, _ in enumerate(RESOURCES): solver.Add(sum(DATA[u][r] * units[u] for u, _ in enumerate(units)) &lt;= RESOURCES[r]) # 3. Minimize the objective function solver.Minimize(sum((DATA[u][0] + DATA[u][1] + DATA[u][2]) * units[u] for u, _ in enumerate(units))) # Solve problem status = solver.Solve() # If an optimal solution has been found, print results if status == pywraplp.Solver.OPTIMAL: print(&#39;================= Solution =================&#39;) print(f&#39;Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations&#39;) print() power = sum((10 * DATA[u][-2] + DATA[u][-1]) * units[u].solution_value() for u, _ in enumerate(units)) print(f&#39;Optimal value = {solver.Objective().Value()} 🌾🪵🪙resources&#39;) print(f&#39;Power = 💪{power}&#39;) print(&#39;Army:&#39;) for u, _ in enumerate(units): print(f&#39; - {units[u].name()} = {units[u].solution_value()}&#39;) print() food = sum((DATA[u][0]) * units[u].solution_value() for u, _ in enumerate(units)) wood = sum((DATA[u][1]) * units[u].solution_value() for u, _ in enumerate(units)) gold = sum((DATA[u][2]) * units[u].solution_value() for u, _ in enumerate(units)) print(&#39;Resources:&#39;) print(f&#39; - 🌾Food = {food}&#39;) print(f&#39; - 🪵Wood = {wood}&#39;) print(f&#39; - 🪙Gold = {gold}&#39;) else: print(&#39;The solver could not find an optimal solution.&#39;) solve_army(UNITS, DATA, RESOURCES) . ================= Solution ================= Solved in 28.00 milliseconds in 1 iterations Optimal value = 172100.0 🌾🪵🪙resources Power = 💪1000105.0 Army: - 🗡️Swordsmen = 1.0 - 🛡️Men-at-arms = 681.0 - 🏹Bowmen = 0.0 - ❌Crossbowmen = 0.0 - 🔫Handcannoneers = 0.0 - 🐎Horsemen = 0.0 - ♞Knights = 0.0 - 🐏Battering rams = 301.0 - 🎯Springalds = 0.0 - 🪨Mangonels = 0.0 Resources: - 🌾Food = 68160.0 - 🪵Wood = 90320.0 - 🪙Gold = 13620.0 . Since we now have a limited resource of 🪵wood, the number of 🐏battering rams sadly dropped from 371 to 301. In exchange, we got 681 🛡️men-at-arms and 1 lost 🗡️swordsman (welcome to them). The total cost of the army is of 172,100, which is much higher than the 111,300 we previously found (+65% increase) but it truly is the optimal solution under these constraints. It shows that we should produce more wood because these 🐏battering rams are extremely cost-efficient! . &#128282; V. Conclusion . Optimization is often neglected in favor of machine learning techniques, but both have their merits: linear optimization can produce an optimal solution in a undetermined amount of time, while machine learning can approximate complex functions in no time. There is no training in LP, but an expert is required to build a mathematical model. Machine learning needs data, but the models can be used as black boxes to solve a problem. As a rule of thumb, problems that do not have a particular time constraint and/or are not extremely complex can be advantageously solved with linear programming. . In this article, . We learned about interfaces for optimization, and especially about Google OR-Tools; | We talked about solvers and types of optimization problems: LP, MIP, NLP; | We modeled and solved an extremely common optimization problem in a optimal way and generalized our model through a function; | We reframed this problem and merged two sets of constraints to obtain the best configuration for the lowest price. | . There are a lot more problems where optimization can be applied: for instance, how to create school timetables that satisfy everybody&#39;s requirements? How to deliver 1,000 different orders in a minimum amount of time? Where to create a new metro line to maximize its usefulness? In future articles, we&#39;ll talk about new types of applications for these techniques, including satisfiability and nonliner problems. . I hope you enjoyed this article! Feel free to share it and spread the knowledge about linear optimization. Don&#39;t forget to follow me on Twitter where I post summaries of these articles. Cheers! .",
            "url": "https://mlabonne.github.io/blog/ortools/",
            "relUrl": "/ortools/",
            "date": " • Mar 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "A Practical Introduction to Graph Neural Networks",
            "content": "Graph Neural Networks (GNNs) are one of the most interesting architectures in deep learning. In just a few years, they managed to apply neural networks to a whole new set of problems: drug discovery where they found a new antibiotic (Halicin), in Google Maps where they outperform any other method to estimate the time of arrival, and they now even recommend every article, video, or connection you see on all big social media. GNNs are a technology with tremendous potential and countless applications still untapped and yet to be discovered. . Despite these achievements, GNNs are not as widely taught as other architectures like Convolutional Neural Networks (CNNs). Because of their young age, educational resources are scarcer and more research-oriented, which can discourage many practitioners. In this article, we&#39;re going to do node classification with graph data using PyTorch Geometric (or PyG). Once we understand how to interact with this specific type of data, we will try to understand the core of GNNs: the message passing layer. Finally, we&#39;ll implement a GNN and visualize how it learns and understands our graph data. . The first step is to install the libraries we&#39;ll need throughout this article. We assume that PyTorch is already installed, which is the case on Google Colab. If you don&#39;t have PyTorch in your environment, please follow the instructions given in the official documentation. Moreover, some extensions of PyTorch can be quite difficult to install because it depends on your version of PyTorch and CUDA. If the installation does not work for you, please check PyTorch Geometric&#39;s documentation. . import torch torchversion = torch.__version__ # Install PyTorch Scatter, PyTorch Sparse, and PyTorch Geometric !pip install -q torch-scatter -f https://data.pyg.org/whl/torch-{torchversion}.html !pip install -q torch-sparse -f https://data.pyg.org/whl/torch-{torchversion}.html !pip install -q git+https://github.com/pyg-team/pytorch_geometric.git # Numpy for matrices import numpy as np # Visualization libraries import matplotlib.pyplot as plt import networkx as nx . &#127760; I. Graph data . Graphs are a type of data you can find pretty much everywhere: social networks, computer networks, molecules, etc. Even text and images can be seen as graphs, as we&#39;re gonna see later. In this article, we&#39;re gonna study the infamous and much-used Zachary&#39;s karate club dataset. It has somewhat of a special aura in the community, and no course about graphs would be complete without it. . Zachary&#39;s karate club simply represents the relationships within a karate club studied by Wayne W. Zachary in the 1970s. It is a kind of social network, where every node is a member, and members who interacted outside the club are connected together. In this example, the club is divided into 4 groups: we would like to assign the right group to every member (node classification) just by looking at their connections. You can see it&#39;s quite similar to friend suggestions on social media, which is another task you can perform with GNNs: link prediction. . Let&#39;s import the dataset with PyG&#39;s built-in function and try to understand the Datasets object it uses. . from torch_geometric.datasets import KarateClub # Import dataset from PyTorch Geometric dataset = KarateClub() # Print information print(dataset) print(&#39;&#39;) print(f&#39;Number of graphs: {len(dataset)}&#39;) print(f&#39;Number of features: {dataset.num_features}&#39;) print(f&#39;Number of classes: {dataset.num_classes}&#39;) . KarateClub() Number of graphs: 1 Number of features: 34 Number of classes: 4 . This dataset only has 1 graph, where each node has a feature vector of 34 dimensions and is part of one out of 4 classes (our 4 groups). Actually, the Datasets object can be seen as a collection of Data (graph) objects. We can further inspect our unique graph to know more about it. . print(f&#39;Graph: {dataset[0]}&#39;) . Graph: Data(x=[34, 34], edge_index=[2, 156], y=[34], train_mask=[34]) . The Data object is particularly interesting. Printing it offers a good summary of the graph we&#39;re studying: . x=[34, 34] is the node feature matrix with shape (number of nodes, number of features). In our case, it means that we have 34 nodes (our 34 members), each node being associated to a 34-dim feature vector. | edge_index=[2, 156] represents the graph connectivity (how the nodes are connected) with shape (2, number of directed edges). | y=[34] is the node ground-truth labels. In this problem, every node is assigned to one class (group), so we have one value for each node. | train_mask=[34] is an optional attribute that tells which nodes should be used for training with a list of True or False statements. | . Let&#39;s print each of these parameters to understand what they store. . data = dataset[0] # Print x print(f&#39;x = {data.x.shape}&#39;) print(data.x) . x = torch.Size([34, 34]) tensor([[1., 0., 0., ..., 0., 0., 0.], [0., 1., 0., ..., 0., 0., 0.], [0., 0., 1., ..., 0., 0., 0.], ..., [0., 0., 0., ..., 1., 0., 0.], [0., 0., 0., ..., 0., 1., 0.], [0., 0., 0., ..., 0., 0., 1.]]) . Here, the node feature matrix x is actually an identity matrix: it doesn&#39;t contain any relevant information about the nodes. It could contain things like age, skill level, etc. but this is not the case in this dataset. We&#39;ll have to classify our nodes just by looking at their connections. . print(f&#39;edge_index = {data.edge_index.shape}&#39;) print(data.edge_index) . edge_index = torch.Size([2, 156]) tensor([[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 10, 10, 10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33], [ 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31, 0, 2, 3, 7, 13, 17, 19, 21, 30, 0, 1, 3, 7, 8, 9, 13, 27, 28, 32, 0, 1, 2, 7, 12, 13, 0, 6, 10, 0, 6, 10, 16, 0, 4, 5, 16, 0, 1, 2, 3, 0, 2, 30, 32, 33, 2, 33, 0, 4, 5, 0, 0, 3, 0, 1, 2, 3, 33, 32, 33, 32, 33, 5, 6, 0, 1, 32, 33, 0, 1, 33, 32, 33, 0, 1, 32, 33, 25, 27, 29, 32, 33, 25, 27, 31, 23, 24, 31, 29, 33, 2, 23, 24, 33, 2, 31, 33, 23, 26, 32, 33, 1, 8, 32, 33, 0, 24, 25, 28, 32, 33, 2, 8, 14, 15, 18, 20, 22, 23, 29, 30, 31, 33, 8, 9, 13, 14, 15, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32]]) . The edge_index has a quite counter-intuitive way of storing the graph connectivity. Here, we have 156 directed edges (78 bidirected edges) twice because the first 156-dim array contains the sources and the second one the destinations. It is called a coordinate list (COO) and is just one way of efficiently storing a sparse matrix. A more intuitive way to represent the graph connectivity would be a simple adjacency matrix $A$, where nodes are rows and columns and 1s indicate a connection between two nodes. . The adjacency matrix can actually be calculated from the edge_index with a utility function. . from torch_geometric.utils import to_dense_adj A = to_dense_adj(data.edge_index)[0].numpy().astype(int) print(f&#39;A = {A.shape}&#39;) print(A) . A = (34, 34) [[0 1 1 ... 1 0 0] [1 0 1 ... 0 0 0] [1 1 0 ... 0 1 0] ... [1 0 0 ... 0 1 1] [0 0 1 ... 1 0 1] [0 0 0 ... 1 1 0]] . Unfortunately, it is not an optimal way of storing this information, since nodes are not highly interconnected. It means that our adjacency matrix is filled with zeros (sparse matrix) to indicate that there&#39;s no connection between nodes. Storing so many zeros is not efficient at all, which is why the COO format is adopted by PyG. . print(f&#39;y = {data.y.shape}&#39;) print(data.y) . y = torch.Size([34]) tensor([1, 1, 1, 1, 3, 3, 3, 1, 0, 1, 3, 1, 1, 1, 0, 0, 3, 1, 0, 1, 0, 1, 0, 0, 2, 2, 0, 0, 2, 0, 0, 2, 0, 0]) . On the contrary, node ground-truth labels y are quite straightforward: they simply encode the group number (0, 1, 2, 3) for each node. . print(f&#39;train_mask = {data.train_mask.shape}&#39;) print(data.train_mask) . train_mask = torch.Size([34]) tensor([ True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False]) . Finally, the train_mask shows which nodes are supposed to be used for training with True statements. This is not super useful because we don&#39;t have test data anyway... 👀 . But we&#39;re not done yet! The Data object has a lot more to offer: numerous properties about graphs can be checked using utility functions. For instance, is_directed() can tell you if the graph is directed, which means that all the edges are unidirectional. Another useful one is isolated_nodes() to check if some nodes are not connected to the rest of the graph. Finally, has_self_loops() can tell you if at least one node is connected to itself. This is not the same as loops: loops mean that you can take a path that starts and ends at the same node (unlike a tree). . print(f&#39;Flows are unidirectionnal: {data.is_directed()}&#39;) print(f&#39;Graph has isolated nodes: {data.contains_isolated_nodes()}&#39;) print(f&#39;Graph has loops: {data.is_undirected()}&#39;) . Flows are unidirectionnal: False Graph has isolated nodes: False Graph has loops: True . D: Programs Anaconda envs blog lib site-packages torch_geometric deprecation.py:13: UserWarning: &#39;contains_isolated_nodes&#39; is deprecated, use &#39;has_isolated_nodes&#39; instead warnings.warn(out) . One of the coolest utility functions available in PyG is to_networkx. It allows you to convert your Data instance into a networkx.Graph to easily visualize it. We can use matplotlib to plot the graph with colors corresponding to the label of every node. . from torch_geometric.utils import to_networkx G = to_networkx(data, to_undirected=True) plt.figure(figsize=(12,12)) plt.axis(&#39;off&#39;) nx.draw_networkx(G, pos=nx.spring_layout(G, seed=0), with_labels=True, node_size=800, node_color=data.y, cmap=&quot;hsv&quot;, vmin=-2, vmax=3, width=0.8, edge_color=&quot;grey&quot;, font_size=14 ) plt.show() . Okay, we plotted the Zachary&#39;s karate club dataset and can visualize our 34 nodes, 78 edges, and 4 labels with 4 different colours. I think our understanding of the problem is now strong enough to talk a bit more about GNNs and their core component: message passing. . &#9993;&#65039; II. Message Passing . 1. Redesigning message passing from convolution . In image processing, filters to blur, sharpen, or detect edges are all based on the same operation: a convolution between a matrix and an image. In the case of a $3 times 3$ matrix, this operation looks at the 8 pixels around each pixel and apply weights to their values. These values can be a single number, or a vector containing multiple numbers. In the previous figure, the same weight is applied to every neighboring pixel: each pixel becomes an average of its neighbors, which is why the result looks blurry. Different filters can be designed just by changing the value of these weights. Now, we could think of each pixel as a node and the entire image as a graph. The operation would be exactly the same. . Why is that relevant? In graphs, similar nodes are more likely to be connected to each other than dissimilar ones (it&#39;s called network homophily). Information about each node is stored in a feature vector, but we can get even more information about a node just by aggregating its features with those of its neighbors. This operation is called convolution for images, and message passing in GNNs. Message passing is a confusing name: the idea behind it is that nodes send &quot;messages&quot; (feature vectors) to each other, but it is actually just a simple neighborhood aggregation. . Let&#39;s take an example: we want to aggregate the feature vectors of the pixel $5$ with those of its 8 neighbors. Usually, pixels contain 3 values to encode the 3 primary colors red, green, and blue, so each feature vector can be noted $x_i = [r_i, g_i, b_i]$. As in a convolution operation, we multiply $x_5$ and the neighboring nodes&#39; feature vectors by a matrix $W$. Note that in this case, $W_i$ are not single values, but vectors because they have to take into account three values for each $x_i$ ($r_i$, $g_i$, $b_i$). In other words, we have a weight matrix $W$ containing 9 weight vectors $W_i$. We call the list of pixel $5$ and its neighbors $ tilde{N}(5) = {1, 2, 3, 4, 5, 6, 7, 8, 9 }$. The result $h(5)$ of this aggregation can be calculated as follows: . $$h_5 = W_{1} x_1 + dots + W_{9} x_9 = sum_{i in tilde{N}(5)} W_{i} x_i$$ . We could apply the same idea to graphs in general, but there&#39;s a problem: nodes do not have a consistent order like pixels do. If we change the order from $ {1, 2, 3, 4, 5, 6, 7, 8, 9 }$ to $ {9, 3, 1, 4, 7, 6, 2, 5, 8 }$, we would obtain a different result. It makes sense with images, but nodes can&#39;t be to the left or to the right of other nodes, they don&#39;t have positions! It means that we never know if the nodes are going to be in the correct order, so we can&#39;t assign $W_i$ to $x_i$. Okay then, a simple solution is to reuse the same weight vector $W$ for every $x_i$, instead of having a unique weight vector $W_i$ for each node. That way, the same operation is performed whatever the node is. The formula now becomes: . $$h_5 = sum_{i in tilde{N}(5)} W x_i$$ . But unlike pixels, nodes do not have a fixed number of neighbors. What if one node only has 1 neighbor, and another one has 500 of them? We would add 500 values instead of just one, which means that the result $h$ would be much larger for the node with 500 neighbors. But it doesn&#39;t make sense: nodes should always be comparable so they need to have a similar range of values. To address this issue, we can normalize the result based on the number of neighbors. In graph theory, this number is called a degree. Let&#39;s divide the result of the previous formula by the number of neighbors of node $5$ (noted $deg(5)$): . $$h_5 = dfrac{1}{deg(5)} sum_{i in tilde{N}(5)} W x_i$$ . Excellent! We now have a message passing layer. There are other types of message passing, but this one is simple and works fairly well. We had to overcome two issues compared to a convolution operation: . Nodes don&#39;t have any idea of order, which forced us to use a common weight $W$; | Nodes have a variable number of neighbors, which pushed us to normalize our result by dividing it by the number of neighbors $deg(5)$. | 2. (Optional) Message passing with matrices . Naturally, this way of computing message passing node by node is not very efficient. Since we&#39;re talking about neural networks, it means that calculations are performed through matrix multiplication. Let&#39;s go back to our dataset and translate the previous operations into matrices. First, we have data.x, which is the feature node matrix $X$. In this particular dataset, $X$ is the identity matrix $I$ but, in general, it could store any information about the nodes. . # a numpy array with integers instead of floats X = data.x.numpy().astype(int) print(f&#39;X = {X.shape}&#39;) print(X) . X = (34, 34) [[1 0 0 ... 0 0 0] [0 1 0 ... 0 0 0] [0 0 1 ... 0 0 0] ... [0 0 0 ... 1 0 0] [0 0 0 ... 0 1 0] [0 0 0 ... 0 0 1]] . Now we need $W$, the learnable weight matrix (like a filter) of our message passing layer. Our layer is not trained yet, so we can initialize $W$ with arbitrary values. To keep things simple, let&#39;s take the identity matrix again, so $W X = I times I = I$. . W = np.identity(X.shape[0], dtype=int) print(f&#39;W = {W.shape}&#39;) print(W) . W = (34, 34) [[1 0 0 ... 0 0 0] [0 1 0 ... 0 0 0] [0 0 1 ... 0 0 0] ... [0 0 0 ... 1 0 0] [0 0 0 ... 0 1 0] [0 0 0 ... 0 0 1]] . We can apply the weights in $W$ to every feature vector by calculating $WX$, but this is not what we want to do! Indeed, we only need to include the neighboring nodes and not every node in the graph. A nice way to find these neighbors is to look at the adjacency matrix $A$ we saw earlier. . print(f&#39;A = {A.shape}&#39;) print(A) . A = (34, 34) [[0 1 1 ... 1 0 0] [1 0 1 ... 0 0 0] [1 1 0 ... 0 1 0] ... [1 0 0 ... 0 1 1] [0 0 1 ... 1 0 1] [0 0 0 ... 1 1 0]] . In our case, $A$ is symmetrical because edges in this graph are bidirectional. This wouldn&#39;t be the case if connections were unidirectional. This is why we use $A^T X$ and not $AX$ in general in order to obtain the feature vectors of the neighboring nodes. This operation does not only select the relevant vectors, it also sums them in the process. . &lt;/source&gt; We just miss the &quot;central&quot; node itself, which can be fixed by adding a connection to itself (self-loops) in the adjacency matrix: $ tilde{A} = A + I$. . A_tilde = A + np.identity(A.shape[0], dtype=int) print(f&#39; nA_tilde = {A_tilde.shape}&#39;) print(A_tilde) . A_tilde = (34, 34) [[1 1 1 ... 1 0 0] [1 1 1 ... 0 0 0] [1 1 1 ... 0 1 0] ... [1 0 0 ... 1 1 1] [0 0 1 ... 1 1 1] [0 0 0 ... 1 1 1]] . $ tilde{A}^TX$ selects the feature vectors of the neighboring nodes (and the node itself) and $WX$ applies the weights in $W$ to every feature vector in the graph. We can combine both expressions to apply these weights to the feature vectors of the neighboring nodes (and the node itself) with $ tilde{A}^T X W^T$. We can rewrite the previous operation as follows: . $$h_v = sum_{i in tilde{N}(v)} W x_i$$ . becomes $$H = tilde{A}^T X W^T$$ . H = A_tilde.T @ X @ W.T print(f&#39;H = A_tilde.T @ X @ W.T {H.shape}&#39;) print(H) . H = A_tilde.T @ X @ W.T (34, 34) [[1 1 1 ... 1 0 0] [1 1 1 ... 0 0 0] [1 1 1 ... 0 1 0] ... [1 0 0 ... 1 1 1] [0 0 1 ... 1 1 1] [0 0 0 ... 1 1 1]] . Now we would like to normalize $H$ by the number of neighbors as seen previously. We can use the degree matrix $D$ that counts the number of neighbors for each node. In our case, we want the matrix $ tilde{D}$, based on $ tilde{A}$ instead of $A$. . D = np.zeros(A.shape, dtype=int) np.fill_diagonal(D, A.sum(axis=0)) print(f&#39;D = {D.shape}&#39;) print(D) D_tilde = np.zeros(D.shape, dtype=int) np.fill_diagonal(D_tilde, A_tilde.sum(axis=0)) print(f&#39; nD_tilde = {D_tilde.shape}&#39;) print(D_tilde) . D = (34, 34) [[16 0 0 ... 0 0 0] [ 0 9 0 ... 0 0 0] [ 0 0 10 ... 0 0 0] ... [ 0 0 0 ... 6 0 0] [ 0 0 0 ... 0 12 0] [ 0 0 0 ... 0 0 17]] D_tilde = (34, 34) [[17 0 0 ... 0 0 0] [ 0 10 0 ... 0 0 0] [ 0 0 11 ... 0 0 0] ... [ 0 0 0 ... 7 0 0] [ 0 0 0 ... 0 13 0] [ 0 0 0 ... 0 0 18]] . We could use D to calculate either: . $ tilde{D}^{-1} tilde{A}$ to normalize every row in $ tilde{A}$; | $ tilde{A} tilde{D}^{-1}$ to normalize every column in $ tilde{A}$. | . In our case, $ tilde{A}$ is symmetrical so the results would be the equivalent. We can thus translate the normalized operation as follows: . $$h_v = dfrac{1}{| tilde{N}(v)|} sum_{i in tilde{N}(v)} W x_i$$ . becomes $$H = tilde{D}^{-1} tilde{A}^T X W^T$$ . D_inv = np.linalg.inv(D_tilde) print(f&#39;D_inv = {D_inv.shape}&#39;) print(D_inv) H = D_inv @ A_tilde.T @ X @ W.T print(f&#39; nH = D_inv @ A.T @ X @ W.T {H.shape}&#39;) print(H) . D_inv = (34, 34) [[0.05882353 0. 0. ... 0. 0. 0. ] [0. 0.1 0. ... 0. 0. 0. ] [0. 0. 0.09090909 ... 0. 0. 0. ] ... [0. 0. 0. ... 0.14285714 0. 0. ] [0. 0. 0. ... 0. 0.07692308 0. ] [0. 0. 0. ... 0. 0. 0.05555556]] H = D_inv @ A.T @ X @ W.T (34, 34) [[0.05882353 0.05882353 0.05882353 ... 0.05882353 0. 0. ] [0.1 0.1 0.1 ... 0. 0. 0. ] [0.09090909 0.09090909 0.09090909 ... 0. 0.09090909 0. ] ... [0.14285714 0. 0. ... 0.14285714 0.14285714 0.14285714] [0. 0. 0.07692308 ... 0.07692308 0.07692308 0.07692308] [0. 0. 0. ... 0.05555556 0.05555556 0.05555556]] . And we&#39;re done! The previous operation is exactly what a Graph Neural Network could do. In reality, there are many ways to define a message passing layer. The good news is that it&#39;s handled by PyTorch Geometric, so we don&#39;t need to reimplement GNN layers with matrix multiplication from scratch. Now, let&#39;s see how it&#39;s done. . &#129504; III. Graph Neural Network . One of the simplest GNN layer is called GCNConv in PyG for Graph Convolutional Network, and was introduced in Semi-Supervised Classification with Graph Convolutional Networks. The main idea is that feature vectors from nodes with a lot of neighbors will spread very easily, unlike ones from more isolated nodes. The authors proposed to use a weighted average operation to counterbalance this effect, by giving bigger weights to feature vectors from nodes with few neighbors. This operation can be written as follows: . $$h_v = sum_{i in tilde{N}(v)} dfrac{1}{ sqrt{deg(v)} sqrt{deg(i)}} W x_i$$ . Or with matrices: . $$H = tilde{D}^{-1/2} tilde{A}^T tilde{D}^{-1/2} X W^T$$ . Notice that is $v$ and $i$ have the same number of neighbors, it is equivalent to our own message passing layer. . D_inv12 = np.linalg.inv(D_tilde) np.fill_diagonal(D_inv12, 1/ (D_tilde.diagonal()**0.5)) # New H H = D_inv12 @ A_tilde.T @ D_inv12 @ X @ W.T print(f&#39; nH = D_inv12 @ A.T @ D_inv12 @ X @ W.T {H.shape}&#39;) print(H) . H = D_inv12 @ A.T @ D_inv12 @ X @ W.T (34, 34) [[0.05882353 0.0766965 0.07312724 ... 0.09166985 0. 0. ] [0.0766965 0.1 0.09534626 ... 0. 0. 0. ] [0.07312724 0.09534626 0.09090909 ... 0. 0.0836242 0. ] ... [0.09166985 0. 0. ... 0.14285714 0.10482848 0.08908708] [0. 0. 0.0836242 ... 0.10482848 0.07692308 0.06537205] [0. 0. 0. ... 0.08908708 0.06537205 0.05555556]] . However, edges are not always bidirectional so nodes can have different numbers of neighbors. This is why the result of this operation is different from the one we designed. It is a clever trick to take into account another difference between graphs and images. . Actually, this layer is the only difference between GNNs and regular neural networks. Indeed, the result of the GCNConv layer is fed to a classic non-linear activation function, such as $tanh$ or $ReLU$ (otherwise it&#39;s just a fancy linear regression). Finally, since it&#39;s a classification task, we add a linear layer $Z$ with 4 neurons (our 4 groups) that outputs logits. In these logits, the maximum value of each row determines the class of a node. . $$X to H(X) to ReLU(H(X)) to Z(ReLU(H(X)))$$ . The definition of a GNN looks like a regular PyTorch code, with the addition of the GCNConv layer (courtesy of PyG). Here is a simple example with only one layer: . import torch from torch.nn import Linear from torch_geometric.nn import GCNConv class GNN(torch.nn.Module): def __init__(self): super().__init__() self.gcn = GCNConv(dataset.num_features, 3) self.out = Linear(3, dataset.num_classes) def forward(self, x, edge_index): h = self.gcn(x, edge_index) embedding = torch.relu(h) z = self.out(embedding) return h, embedding, z model = GNN() print(model) . GNN( (gcn): GCNConv(34, 3) (out): Linear(in_features=3, out_features=4, bias=True) ) . As you can imagine, adding a second GCN layer would allow the network to not only aggregate feature vectors from the neighbors of each node, but also from the neighbors of these neighbors. We can stack several message passing layers to aggregate more and more distant values, but there&#39;s a catch: if we add too many layers, the aggregation becomes so intense that all the nodes end up looking the same despite being vastly different. This phenomenon is called over-smoothing and can be a real problem. Fortunately, we don&#39;t have to worry about it in this example because we only have one layer. . Now that we&#39;ve defined our GNN, let&#39;s write a simple training loop with PyTorch. I chose a regular cross-entropy loss since it&#39;s a multi-class classification task, with Adam as optimizer. We could use the data.train_mask, but since there is no test data, we can solemnly ignore it for the purpose of this exploratory exercise. The training loop is very standard: we try to predict the correct labels, and we compare the results given by $Z(ReLU(H))$ to the labels data.y from the dataset. The error calculated by the cross-entropy loss is backpropagated with Adam to fine-tune our GNN&#39;s weights and biases. Finally, we print metrics to see the progression every 10 epochs. . model = GNN() criterion = torch.nn.CrossEntropyLoss() optimizer = torch.optim.Adam(model.parameters(), lr=0.02) # Calculate accuracy def accuracy(pred_y, y): return (pred_y == y).sum() # Data for animations embeddings = [] losses = [] accuracies = [] outputs = [] # Training loop for epoch in range(201): # Clear gradients optimizer.zero_grad() # Forward pass h, embedding, z = model(data.x, data.edge_index) # Calculate loss function loss = criterion(z, data.y) # Calculate accuracy acc = accuracy(z.argmax(dim=1), data.y) / len(data.y) # Computes the gradients loss.backward() # Tune parameters optimizer.step() # Store data for animations embeddings.append(embedding) losses.append(loss) accuracies.append(acc) outputs.append(z.argmax(dim=1)) # Print metrics every 10 epochs if epoch % 10 == 0: print(f&#39;Epoch {epoch:&gt;3} | Loss: {loss:.2f} | Acc: {acc*100:.2f}%&#39;) . Epoch 0 | Loss: 1.44 | Acc: 11.76% Epoch 10 | Loss: 1.28 | Acc: 47.06% Epoch 20 | Loss: 1.07 | Acc: 38.24% Epoch 30 | Loss: 0.87 | Acc: 70.59% Epoch 40 | Loss: 0.70 | Acc: 82.35% Epoch 50 | Loss: 0.58 | Acc: 85.29% Epoch 60 | Loss: 0.49 | Acc: 85.29% Epoch 70 | Loss: 0.44 | Acc: 85.29% Epoch 80 | Loss: 0.41 | Acc: 85.29% Epoch 90 | Loss: 0.38 | Acc: 85.29% Epoch 100 | Loss: 0.37 | Acc: 85.29% Epoch 110 | Loss: 0.34 | Acc: 85.29% Epoch 120 | Loss: 0.29 | Acc: 97.06% Epoch 130 | Loss: 0.24 | Acc: 100.00% Epoch 140 | Loss: 0.19 | Acc: 100.00% Epoch 150 | Loss: 0.14 | Acc: 100.00% Epoch 160 | Loss: 0.11 | Acc: 100.00% Epoch 170 | Loss: 0.08 | Acc: 100.00% Epoch 180 | Loss: 0.06 | Acc: 100.00% Epoch 190 | Loss: 0.05 | Acc: 100.00% Epoch 200 | Loss: 0.04 | Acc: 100.00% . Great! Without much surprise, we reach 100% accuracy on the training set. It means that our model learned to correctly assign every member of the karate club to its correct group. We can do something quite cool by animating the graph to see the evolution of the GNN&#39;s predictions during the training process. . %%capture from IPython.display import HTML from matplotlib import animation plt.rcParams[&quot;animation.bitrate&quot;] = 3000 def animate(i): G = to_networkx(data, to_undirected=True) nx.draw_networkx(G, pos=nx.spring_layout(G, seed=0), with_labels=True, node_size=800, node_color=outputs[i], cmap=&quot;hsv&quot;, vmin=-2, vmax=3, width=0.8, edge_color=&quot;grey&quot;, font_size=14 ) plt.title(f&#39;Epoch {i} | Loss: {losses[i]:.2f} | Acc: {accuracies[i]*100:.2f}%&#39;, fontsize=18, pad=20) fig = plt.figure(figsize=(12, 12)) plt.axis(&#39;off&#39;) anim = animation.FuncAnimation(fig, animate, np.arange(0, 200, 10), interval=500, repeat=True) html = HTML(anim.to_html5_video()) . display(html) . Your browser does not support the video tag. The GNN struggles a bit at the beginning, but it perfectly labels every node after a while. Indeed, the final graph is the same than the one we plotted at the end of the first part of this article. Okay this is nice, but what does the GNN really learn? . We talked about message passing as a generalized convolution operation, where feature vectors from each neighboring node contribute to a better understanding of the &quot;central&quot; node. This is exactly what GNNs learn: a representation of the information of every node, also called an embedding. In our model, the linear classifier $Z$ on top of it just learns how to use these embeddings to produce the best classifications, but the embeddings are the real product of GNNs. . Let&#39;s print the 3D embeddings for each of the 34 nodes with the result of the ReLU layer $ReLU(H(x))$, aptly named embedding. . print(f&#39;Final embeddings = {embedding.shape}&#39;) print(embedding) . Final embeddings = torch.Size([34, 3]) tensor([[0.0000e+00, 0.0000e+00, 0.0000e+00], [0.0000e+00, 0.0000e+00, 0.0000e+00], [9.7755e-02, 0.0000e+00, 0.0000e+00], [0.0000e+00, 0.0000e+00, 0.0000e+00], [0.0000e+00, 1.5279e+00, 3.4284e-01], [0.0000e+00, 1.5948e+00, 1.5541e-01], [0.0000e+00, 1.5861e+00, 2.2189e-01], [0.0000e+00, 0.0000e+00, 0.0000e+00], [1.2247e+00, 1.1025e-01, 1.5806e+00], [5.7357e-02, 0.0000e+00, 0.0000e+00], [0.0000e+00, 1.5257e+00, 3.4660e-01], [0.0000e+00, 0.0000e+00, 0.0000e+00], [0.0000e+00, 0.0000e+00, 0.0000e+00], [0.0000e+00, 0.0000e+00, 0.0000e+00], [1.6114e+00, 1.3823e-01, 1.6890e+00], [1.6025e+00, 1.7610e-01, 1.8602e+00], [0.0000e+00, 1.6044e+00, 3.0357e-01], [0.0000e+00, 0.0000e+00, 0.0000e+00], [1.4584e+00, 1.5426e-01, 1.6852e+00], [0.0000e+00, 0.0000e+00, 0.0000e+00], [1.4738e+00, 1.7071e-01, 1.7045e+00], [0.0000e+00, 0.0000e+00, 1.0079e-04], [1.4182e+00, 1.7327e-01, 1.7689e+00], [1.8151e+00, 2.0250e-01, 1.7101e+00], [2.1713e+00, 2.0130e+00, 8.0820e-01], [2.1899e+00, 2.0065e+00, 7.8289e-01], [1.6834e+00, 4.4032e-02, 1.7500e+00], [1.5529e+00, 4.1727e-01, 1.5285e+00], [1.5760e+00, 1.6482e+00, 3.0263e-01], [1.8350e+00, 0.0000e+00, 2.0610e+00], [1.2813e+00, 0.0000e+00, 1.7527e+00], [2.0574e+00, 2.1415e+00, 4.9518e-01], [2.5998e+00, 0.0000e+00, 2.8428e+00], [2.2335e+00, 0.0000e+00, 2.1556e+00]], grad_fn=&lt;ReluBackward0&gt;) . As you can see, embeddings do not need to have the same dimensions as feature vectors. Here, I chose to reduce the number of dimensions from 34 (dataset.num_features) to 3 to get a nice visualization in 3D. Let&#39;s plot these embeddings before any training happens, at epoch 0. . embed = embeddings[0].detach().cpu().numpy() fig = plt.figure(figsize=(12, 12)) ax = fig.add_subplot(projection=&#39;3d&#39;) ax.patch.set_alpha(0) plt.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False) ax.scatter(embed[:, 0], embed[:, 1], embed[:, 2], s=200, c=data.y, cmap=&quot;hsv&quot;, vmin=-2, vmax=3) plt.show() . Okay, we see every node from our graph, with the color corresponding to its real group (and not the model&#39;s prediction). For now, they&#39;re all over the place since the GNN is not trained yet. But if we plot these embeddings at each step of the training loop, we&#39;d be able to visualize what the GNN truly learns. We would see how the embeddings change over time, as the GNN gets better and better at classifying nodes. . This is exactly what the following animation does. . %%capture def animate(i): embed = embeddings[i].detach().cpu().numpy() ax.clear() ax.scatter(embed[:, 0], embed[:, 1], embed[:, 2], s=200, c=data.y, cmap=&quot;hsv&quot;, vmin=-2, vmax=3) plt.title(f&#39;Epoch {i} | Loss: {losses[i]:.2f} | Acc: {accuracies[i]*100:.2f}%&#39;, fontsize=18, pad=40) fig = plt.figure(figsize=(12, 12)) plt.axis(&#39;off&#39;) ax = fig.add_subplot(projection=&#39;3d&#39;) plt.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False) anim = animation.FuncAnimation(fig, animate, np.arange(0, 200, 10), interval=800, repeat=True) html = HTML(anim.to_html5_video()) . display(html) . Your browser does not support the video tag. Let&#39;s unpack it. During training, we know that GNNs learn to produce the best embeddings possible for a specific task. In practice, we see that it means nodes from the same class are grouped into nice clusters. It makes the job of the linear classification layer quite simple because you can easily draw planes to separate each cluster. . Embeddings are not unique to GNNs: they can be found everywhere in deep learning. They don&#39;t have to be 3D either: actually, they rarely are. For instance, language models like BERT produce embeddings with 768 or even 1024 dimensions (and other models go much higher!). Additional dimensions allow to store more information about nodes, text, images, etc. but they also create bigger models that are more difficult and take longer to train. This is why it&#39;s better to keep low-dimensional embeddings as long as it&#39;s possible. . &#128282; IV. Conclusion . Graph Neural Networks are a powerful architecture that is less difficult to understand than at first glance. In this article, . We learned to use the PyTorch Geometric library to explore graph data with the Datasets and Data objects; | We redesigned a message passing layer from scratch, based on a tweaked convolutional layer to work with graphs and not just images; | We implemented a real GNN with a GCN layer that is very close to our own design; | We visualized what and how our GNN learns with the clustering of the node embeddings. | . Zachary&#39;s karate club is not the best graph dataset (feature vectors are useless), but it is good enough to understand the most important concepts in graph data and GNNs. We only talked about node classification in this work, but there are other tasks GNNs can accomplish: link prediction (e.g., to recommend a friend), graph classification (e.g., to label molecules), etc. Beyond GCN, other GNN layers and architectures were proposed by researchers. For instance, Graph Attention Networks (GATs) implicitly compute GCN&#39;s normalization factor with an attention mechanism, and GraphSAGE randomly samples sets of nodes to improve scalability. . If you enjoyed this article, please share this article and follow me on Twitter for more cool visualizations. Thank you and have a great day! 📣 .",
            "url": "https://mlabonne.github.io/blog/intrognn/",
            "relUrl": "/intrognn/",
            "date": " • Feb 20, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Reinventing Q-learning from scratch",
            "content": "The goal of this article is to teach an AI how to solve the ❄️Frozen Lake environment using reinforcement learning. Instead of reading Wikipedia articles and explaining formulas, we&#39;re going to start from scratch and try to recreate the 🤖Q-learning algorithm by ourselves. We&#39;ll not just understand how it works, but more importantly why it works: why was it designed that way? What are the hidden assumptions, the details that are never explained in regular courses and tutorials? . At the end of this article, you&#39;ll master the Q-learning algorithm and be able to apply it to other environments and real-world problems. It&#39;s a cool mini-project that gives a better insight into how reinforcement learning works and can hopefully inspire ideas for original and creative applications. . Let&#39;s start by installing the ❄️Frozen Lake environment and importing the necessary libraries: gym for the game, random to generate random numbers, and numpy to do some math. . !pip install -q gym !pip install -q matplotlib import gym import random import numpy as np . &#10052;&#65039; I. Frozen Lake . Now, let&#39;s talk about the game we&#39;re going to be solving in this tutorial. ❄️Frozen Lake is a simple environment composed of tiles, where the AI has to move from an initial tile to a goal. Tiles can be a safe frozen lake ✅, or a hole ❌ that gets you stuck forever. The AI, or agent, has 4 possible actions: go ◀️LEFT, 🔽DOWN, ▶️RIGHT, or 🔼UP. The agent must learn to avoid holes in order to reach the goal in a minimal number of actions. By default, the environment is always in the same configuration. In the environment&#39;s code, each tile is represented by a letter as follows: . S F F F (S: starting point, safe) F H F H (F: frozen surface, safe) F F F H (H: hole, stuck forever) H F F G (G: goal, safe) . &lt;/source&gt; We can try to manually solve the example above to understand the game. Let&#39;s see if the following sequence of actions is a correct solution: RIGHT $ to$ RIGHT $ to$ RIGHT $ to$ DOWN $ to$ DOWN $ to$ DOWN. Our agent starts on tile S, so we move right on a frozen surface ✅, then again ✅, then once more ✅, then we go down and find a hole ❌. . Actually, it&#39;s really easy to find several correct solutions: RIGHT $ to$ RIGHT $ to$ DOWN $ to$ DOWN $ to$ DOWN $ to$ RIGHT is an obvious one. But we could make a sequence of actions that loops around a hole 10 times before reaching the goal. This sequence is valid, but it doesn&#39;t meet our final requirement: the agent needs to meet the goal in a minimum number of actions. In this example, the minimum number of actions to complete the game is 6. We need to remember this fact to check if our agent really masters ❄️Frozen Lake or not. . &lt;/source&gt; Let&#39;s initialize the environment thanks to the gym library. There are two versions of the game: one with slippery ice, where selected actions have a random chance of being disregarded by the agent; and a non-slippery one, where actions cannot be ignored. We&#39;ll use the non-slippery one to begin with because it&#39;s easier to understand. . environment = gym.make(&quot;FrozenLake-v1&quot;, is_slippery=False) environment.reset() environment.render() . SFFF FHFH FFFH HFFG . We can see that the game that was created has the exact same configuration as in our example: it is the same puzzle. The position of our agent is indicated by a red rectangle. Solving this puzzle can be done with a simple script and if...else conditions, which would actually be useful to compare our AI to a simpler approach. However, we want to try a more exciting solution: reinforcement learning. . &#127937; II. Q-table . In ❄️Frozen Lake, there are 16 tiles, which means our agent can be found in 16 different positions, called states. For each state, there are 4 possible actions: go ◀️LEFT, 🔽DOWN, ▶️RIGHT, and 🔼UP. Learning how to play Frozen Lake is like learning which action you should choose in every state. To know which action is the best in a given state, we would like to assign a quality value to our actions. We have 16 states and 4 actions, so want to calculate $16 times 4 = 64$ values. . A nice way of representing it is using a table, known as a Q-table, where rows list every state $s$ and columns list every action $a$. In this Q-table, each cell contains a value $Q(s, a)$, which is the value (quality) of the action $a$ in the state $s$ (1 if it&#39;s the best action possible, 0 if it&#39;s really bad). When our agent is in a particular state $s$, it just has to check this table to see which action has the highest value. Taking the action with the highest value makes sense but we&#39;ll see later that we can design something even better... . State ◀️LEFT 🔽DOWN ▶️RIGHT 🔼UP . S=0 | Q(0, ◀️) | Q(0, 🔽) | Q(0, ▶️) | Q(0, 🔼) | . 1 | Q(1, ◀️) | Q(1, 🔽) | Q(1, ▶️) | Q(1, 🔼) | . 2 | Q(2, ◀️) | Q(2, 🔽) | Q(2, ▶️) | Q(2, 🔼) | . ... | ... | ... | ... | ... | . 14 | Q(14, ◀️) | Q(14, 🔽) | Q(14, ▶️) | Q(14, 🔼) | . G=15 | Q(15, ◀️) | Q(15, 🔽) | Q(15, ▶️) | Q(15, 🔼) | . Example of Q-table, where each cell contains the value $Q(a, s)$ of the action $a$ (column) in a given state $s$ (row) . Let&#39;s create our Q-table and fill it with zeros since we still have no idea of the value of each action in each state. . # Our table has the following dimensions: # (rows x columns) = (states x actions) = (16 x 4) qtable = np.zeros((16, 4)) # Alternatively, the gym library can also directly g # give us the number of states and actions using # &quot;env.observation_space.n&quot; and &quot;env.action_space.n&quot; nb_states = environment.observation_space.n # = 16 nb_actions = environment.action_space.n # = 4 qtable = np.zeros((nb_states, nb_actions)) # Let&#39;s see how it looks print(&#39;Q-table =&#39;) print(qtable) . Q-table = [[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]] . Great! We have our Q-table with 16 rows (our 16 states) and 4 columns (our 4 actions) as expected. Let&#39;s try to see what we can do next: every value is set to zero, so we have no information at all. Let&#39;s say that the agent takes a random action: ◀️LEFT, 🔽DOWN, ▶️RIGHT, or 🔼UP. . We can use the random library with the choice method to randomly choose an action. . random.choice([&quot;LEFT&quot;, &quot;DOWN&quot;, &quot;RIGHT&quot;, &quot;UP&quot;]) . &#39;LEFT&#39; . Wait, actually the agent is currently on the initial state S, which means only two actions are possible: ▶️RIGHT and 🔽DOWN. The agent can also take the actions 🔼UP and ◀️LEFT, but it won&#39;t move: its state doesn&#39;t change. Therefore, we do not put any constraint on what actions are possible: the agent will naturally understand that some of them don&#39;t do anything. . We can keep using random.choice(), but the gym library already implements a method to randomly choose an action. It might save us some hassle later, so let&#39;s try it. . environment.action_space.sample() . 0 . Oops... this time it&#39;s a number. We could read gym&#39;s documentation but it is quite scarce unfortunately. No worries though, we can check the source code on GitHub to understand what these numbers mean. It&#39;s actually super straightforward: . ◀️ LEFT = 0 🔽 DOWN = 1 ▶️ RIGHT = 2 🔼 UP = 3 . &lt;/source&gt; Okay, now that we understand how gym connects numbers to directions, let&#39;s try to use it to move our agent to the right ▶️. This time, it can be performed using the step(action) method. We can try to directly provide it the number 2, corresponding to the direction we chose (right), and check if the agent moved. . environment.step(2) environment.render() . (Right) SFFF FHFH FFFH HFFG . Huzzah! The red square moved from the initial state S to the right: our prediction was correct. And that&#39;s all we need to know in order to interact with the environment: . How to randomly choose an action using action_space.sample(); | How to implement this action and move our agent in the desired direction with step(action). | To be completely exhaustive, we can add: . How to display the current map to see what we&#39;re doing with render(); | How to restart the game when the agent falls into a hole or reaches the goal G with reset(). | Now that we understand how to interact with our gym environment, let&#39;s go back to our algorithm. In reinforcement learning, agents are rewarded by the environment when they accomplish a predefined goal. In ❄️Frozen Lake, the agent is only rewarded when it reaches the state G (see the source code). We cannot control this reward, it is set in the environment: it&#39;s 1 when the agent reaches G, and 0 otherwise. . Let&#39;s print it every time we implement an action. The reward is given by the method step(action). . action = environment.action_space.sample() # 2. Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Display the results (reward and map) environment.render() print(f&#39;Reward = {reward}&#39;) . (Left) SFFF FHFH FFFH HFFG Reward = 0.0 . The reward is indeed 0... 😱 wow, I guess we&#39;re in a pickle, because only one state can give us a positive reward in the entire game. How are we supposed to take the right directions at the very beginning when the only validation we have is at the very end? If we ever want to see a reward of 1, we&#39;d need to be lucky enough to find the correct sequence of actions by chance. Unfortunately, that&#39;s exactly how it works... the Q-table will remain filled with zeros until the agent randomly reaches the goal G. . The problem would be much simpler if we could have intermediate, smaller rewards to guide our path towards the goal G. Alas, this is actually one of the main issues of reinforcement learning: this phenomenon, called sparse rewards, makes agents very difficult to train on problems where the only reward is at the end of a long sequence of actions. Different techniques were proposed to mitigate this issue, but we&#39;ll talk about it another time. . &#129302; III. Q-learning . Let&#39;s go back to our problem. Okay, we need to be lucky enough to find the goal G by accident. But once it&#39;s done, how to backpropagate the information to the initial state? The 🤖Q-learning algorithm offers a clever solution to this issue. We need to update the value of our state-action pairs (each cell in the Q-table) considering 1/ the reward for reaching the next state, and 2/ the highest possible value in the next state. . &lt;/source&gt; We know we get a reward of 1 when we move to G. As we just said, the value of the state next to G (let&#39;s call it G-1) with the relevant action to reach G is increased thanks to the reward. Okay good, end of the episode: the agent won and we restart the game. Now, the next time the agent is in a state next to G-1, it will increase the value of this state (let&#39;s call it G-2) with the relevant action to reach G-1. The next time the agent is in a state next to G-2, it will do the same. Rince and repeat, until the update reaches the initial state S. . Let&#39;s try to find the update formula to backpropagate the values from G to S. Remember: values denote the quality of an action in a specific state (0 if it&#39;s terrible, 1 if it&#39;s the best action possible in this state). We try to update the value of the action $a_t$ (for example, $a_t = 0$ if the action is left) in the state $s_t$ (for example, $s_t = 0$ when the agent is in the initial state S). This value is just a cell in our Q-table, corresponding to the row number $s_t$ and the column number $a_t$: this value is formally called $Q((s_t, a_t)$. . As we said previously, we need to update it using 1/ the reward for the next state (formally noted $r_t$), and 2/ the maximum possible value in the next state ($max_aQ(s_{t+1},a)$). Therefore, the update formula must look like: . $$Q_{new}(s_t, a_t) = Q(s_t, a_t) + r_t + max_aQ(s_{t+1}, a)$$ . The new value is the current one + the reward + the highest value in the next state. We can manually try our formula to check if it looks correct: let&#39;s pretend our agent is in the state G-1 next to the goal G for the first time. We can update the value corresponding to the winning action in this state G-1 with $Q_{new}(G-1, a_t) = Q(G-1, a_t) + r_t + max_aQ(G, a)$, where $Q(G-1, a_t) = 0$ and $max_aQ(G, a) = 0$ because the Q-table is empty, and $r_t = 1$ because we get the only reward in this environment. We obtain $Q_{new}(G-1, a_t) = 1$. The next time the agent is in a state next to this one (G-2), we update it too using the formula and get the same result: $Q_{new}(G-2, a_t) = 1$. In the end, we backpropagate ones in the Q-table from G to S. Okay it works, but the result is binary: either it&#39;s the wrong state-action pair or the best one. We would like more nuance... . Actually, we almost found the true Q-learning update formula with common sense. The nuance we&#39;re looking for adds two parameters: . $ alpha$ is the 💡learning rate (between $0$ and $1$), which is how much we should change the original $Q(s_t, a_t)$ value. If $ alpha = 0$, the value never changes, but if $ alpha = 1$, the value changes extremely fast. In our attempt, we didn&#39;t limit the learning rate so $ alpha = 1$. But this is too fast in reality: the reward and the maximum value in the next state quickly overpower the current value. We need to find a balance between the importance of past and new knowledge. | $ gamma$ is the 📉discount factor (between $0$ and $1$), which determines how much the agent cares about future rewards compared to immediate ones (as the saying goes, &quot;a bird in the hand is worth two in the bush&quot;). If $ gamma = 0$, the agent only focuses on immediate rewards , but if $ gamma = 1$, any potential future reward has the same value than current ones. In ❄️Frozen Lake, we want a high discount factor since there&#39;s only one possible reward at the very end of the game. | . With the real Q-learning algorithm, the new value is calculated as follows: . $$Q_{new}(s_t, a_t) = Q(s_t, a_t) + alpha cdot (r_t + gamma cdot max_aQ(s_{t+1},a) - Q(s_t, a_t))$$ . Okay, let&#39;s try this new formula before implementing it. Once again, we can pretend that our agent is next to the goal G for the first time. We can update the state-action pair to win the game using our formula: $Q_{new}(G-1, a_t) = 0 + alpha cdot (1 + gamma cdot 0 - 0)$. We can assign arbitrary values to $ alpha$ and $ gamma$ to calculate the result. With $ alpha = 0.5$ and $ gamma = 0.9$, we get $Q_{new}(G-1, a_t) = 0 + 0.5 cdot (1 + 0.9 cdot 0 - 0) = 0.5$. The second time the agent is in this state, we would get: $Q_{new}(G-1, a_t) = 0.5 + 0.5 cdot (1 + 0.9 cdot 0 - 0.5) = 0.75$, then $0.875$, $0.9375$, $0.96875$, etc. . &lt;/source&gt; So training our agent in code means: . Choosing a random action (using action_space.sample()) if the values in the current state are just zeros. Otherwise, we take the action with the highest value in the current state with the function np.argmax(); | Implementing this action by moving in the desired direction with step(action); | Updating the value of the original state with the action we took, using information about the new state and the reward given by step(action); | We keep repeating these 3 steps until the agent gets stuck in a hole or reaches the goal G. When it happens, we just restart the environment with reset() and start a new episode until we hit 1,000 episodes. Additionally, we can plot the outcome of each run (failure if it didn&#39;t reach the goal, success otherwise) to observe the progress of our agent. . import matplotlib.pyplot as plt plt.rcParams[&#39;figure.dpi&#39;] = 300 plt.rcParams.update({&#39;font.size&#39;: 17}) # We re-initialize the Q-table qtable = np.zeros((environment.observation_space.n, environment.action_space.n)) # Hyperparameters episodes = 1000 # Total number of episodes alpha = 0.5 # Learning rate gamma = 0.9 # Discount factor # List of outcomes to plot outcomes = [] print(&#39;Q-table before training:&#39;) print(qtable) # Training for _ in range(episodes): state = environment.reset() done = False # By default, we consider our outcome to be a failure outcomes.append(&quot;Failure&quot;) # Until the agent gets stuck in a hole or reaches the goal, keep training it while not done: # Choose the action with the highest value in the current state if np.max(qtable[state]) &gt; 0: action = np.argmax(qtable[state]) # If there&#39;s no best action (only zeros), take a random one else: action = environment.action_space.sample() # Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Update Q(s,a) qtable[state, action] = qtable[state, action] + alpha * (reward + gamma * np.max(qtable[new_state]) - qtable[state, action]) # Update our current state state = new_state # If we have a reward, it means that our outcome is a success if reward: outcomes[-1] = &quot;Success&quot; print() print(&#39;===========================================&#39;) print(&#39;Q-table after training:&#39;) print(qtable) # Plot outcomes plt.figure(figsize=(12, 5)) plt.xlabel(&quot;Run number&quot;) plt.ylabel(&quot;Outcome&quot;) ax = plt.gca() ax.set_facecolor(&#39;#efeeea&#39;) plt.bar(range(len(outcomes)), outcomes, color=&quot;#0A047A&quot;, width=1.0) plt.show() . Q-table before training: [[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]] =========================================== Q-table after training: [[0. 0. 0.59049 0. ] [0. 0. 0.6561 0. ] [0. 0.729 0. 0. ] [0. 0. 0. 0. ] [0. 0.02050313 0. 0. ] [0. 0. 0. 0. ] [0. 0.81 0. 0. ] [0. 0. 0. 0. ] [0. 0. 0.17085938 0. ] [0. 0. 0.49359375 0. ] [0. 0.9 0. 0. ] [0. 0. 0. 0. ] [0. 0. 0. 0. ] [0. 0. 0. 0. ] [0. 0. 1. 0. ] [0. 0. 0. 0. ]] . The agent is trained! Each blue bar on the figure corresponds to a win, so we can see that the agent had a hard time finding the goal at the beginning of the training. But once it found it several times in a row, it began to consistently win. 🥳 The trained Q-table is also very interesting: these values indicate the unique sequence of actions the agent learned to reach the goal. . Now let&#39;s see how it performs by evaluating it on 100 episodes. We consider that the training is over, so we don&#39;t need to update the Q-table anymore. To see how the agent performs, we can calculate the percentage of times the it managed to reach the goal (success rate). . episodes = 100 nb_success = 0 # Evaluation for _ in range(100): state = environment.reset() done = False # Until the agent gets stuck or reaches the goal, keep training it while not done: # Choose the action with the highest value in the current state if np.max(qtable[state]) &gt; 0: action = np.argmax(qtable[state]) # If there&#39;s no best action (only zeros), take a random one else: action = environment.action_space.sample() # Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Update our current state state = new_state # When we get a reward, it means we solved the game nb_success += reward # Let&#39;s check our success rate! print (f&quot;Success rate = {nb_success/episodes*100}%&quot;) . Success rate = 100.0% . Not only our agent has been trained, but it manages to hit a 100% success rate. Great job everyone, the non-slippery ❄️Frozen Lake is solved! . We can even visualize the agent moving on the map by executing the code below and print the sequence of actions it took to check if it&#39;s the best one. . from IPython.display import clear_output import time state = environment.reset() done = False sequence = [] while not done: # Choose the action with the highest value in the current state if np.max(qtable[state]) &gt; 0: action = np.argmax(qtable[state]) # If there&#39;s no best action (only zeros), take a random one else: action = environment.action_space.sample() # Add the action to the sequence sequence.append(action) # Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Update our current state state = new_state # Update the render clear_output(wait=True) environment.render() time.sleep(1) print(f&quot;Sequence = {sequence}&quot;) . (Right) SFFF FHFH FFFH HFFG Sequence = [2, 2, 1, 1, 1, 2] . The agent can learn several correct sequence of actions: [2, 2, 1, 1, 1, 2], [1, 1, 2, 2, 1, 2], etc. The good thing is there&#39;s only 6 actions in our sequence, which was the minimum possible number of actions we counted: it means that our agent learned to solve the game in an optimal way. In the case of [2, 2, 1, 1, 1, 2], which corresponds to RIGHT $ to$ RIGHT $ to$ DOWN $ to$ DOWN $ to$ DOWN $ to$ RIGHT, it&#39;s exactly the sequence we predicted at the very beginning of the article. 📣 . &#128208; IV. Epsilon-Greedy algorithm . Despite this success, there&#39;s something that bothers me with our previous approach: the agent always chooses the action with the highest value. So whenever a state-action pair starts having a non-zero value, the agent will always choose it. The other actions will never be taken, which means we&#39;ll never update their value... But what if one of these actions was better than the one the agent always takes? Shouldn&#39;t we encourage the agent to try news things from time to time and see if it can improve? . In other words, we want to allow our agent to either: . Take the action with the highest value (exploitation); | Choose a random action to try to find even better ones (exploration). | . A tradeoff between these two behaviors is important: if the agent only focuses on exploitation, it cannot try new solutions and thus doesn&#39;t learn anymore. On the other hand, if the agent only takes random actions, the training is pointless since it doesn&#39;t use the Q-table. So we want to change this parameter over time: at the beginning of the training, we want to explore the environment as much as possible. But exploration becomes less and less interesting, as the agent already knows every possible state-action pairs. This parameter represents the amount of randomness in the action selection. . This technique is commonly called the epsilon-greedy algorithm, where epsilon is our parameter. It is a simple but extremely efficient method to find a good tradeoff. Every time the agent has to take an action, it has a probability $ε$ of choosing a random one, and a probability $1-ε$ of choosing the one with the highest value. We can decrease the value of epsilon at the end of each episode by a fixed amount (linear decay), or based on the current value of epsilon (exponential decay). . &lt;/source&gt; Let&#39;s implement a linear decay. Beforehand, I&#39;d like to see how the curve looks like with arbitrary parameters. We&#39;ll start with $ε = 1$ to be in full exploration mode, and decrease this value by $0.001$ after each episode. . Okay now that we have a sound understanding of it, we can implement it for real and see how it changes the agent&#39;s behavior. . qtable = np.zeros((environment.observation_space.n, environment.action_space.n)) # Hyperparameters episodes = 1000 # Total number of episodes alpha = 0.5 # Learning rate gamma = 0.9 # Discount factor epsilon = 1.0 # Amount of randomness in the action selection epsilon_decay = 0.001 # Fixed amount to decrease # List of outcomes to plot outcomes = [] print(&#39;Q-table before training:&#39;) print(qtable) # Training for _ in range(episodes): state = environment.reset() done = False # By default, we consider our outcome to be a failure outcomes.append(&quot;Failure&quot;) # Until the agent gets stuck in a hole or reaches the goal, keep training it while not done: # Generate a random number between 0 and 1 rnd = np.random.random() # If random number &lt; epsilon, take a random action if rnd &lt; epsilon: action = environment.action_space.sample() # Else, take the action with the highest value in the current state else: action = np.argmax(qtable[state]) # Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Update Q(s,a) qtable[state, action] = qtable[state, action] + alpha * (reward + gamma * np.max(qtable[new_state]) - qtable[state, action]) # Update our current state state = new_state # If we have a reward, it means that our outcome is a success if reward: outcomes[-1] = &quot;Success&quot; # Update epsilon epsilon = max(epsilon - epsilon_decay, 0) print() print(&#39;===========================================&#39;) print(&#39;Q-table after training:&#39;) print(qtable) # Plot outcomes plt.figure(figsize=(12, 5)) plt.xlabel(&quot;Run number&quot;) plt.ylabel(&quot;Outcome&quot;) ax = plt.gca() ax.set_facecolor(&#39;#efeeea&#39;) plt.bar(range(len(outcomes)), outcomes, color=&quot;#0A047A&quot;, width=1.0) plt.show() . Q-table before training: [[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]] =========================================== Q-table after training: [[0.531441 0.59049 0.59049 0.531441 ] [0.531441 0. 0.6561 0.56396466] [0.58333574 0.729 0.56935151 0.65055117] [0.65308668 0. 0.33420534 0.25491326] [0.59049 0.6561 0. 0.531441 ] [0. 0. 0. 0. ] [0. 0.81 0. 0.65519631] [0. 0. 0. 0. ] [0.6561 0. 0.729 0.59049 ] [0.6561 0.81 0.81 0. ] [0.72899868 0.9 0. 0.72711067] [0. 0. 0. 0. ] [0. 0. 0. 0. ] [0. 0.81 0.9 0.729 ] [0.81 0.9 1. 0.81 ] [0. 0. 0. 0. ]] . Hey, the agent takes more time to consistently win the game now! And the Q-table has a lot more non-zero values than the previous one, which means the agent has learned several sequences of actions to reach the goal. It is understandable, since this new agent is forced to explore state-action pairs instead of always exploiting ones with non-zero values. . Let&#39;s see if it&#39;s as successful as the previous one to win the game. In evaluation mode, we don&#39;t want exploration anymore because the agent is trained now. . episodes = 100 nb_success = 0 # Evaluation for _ in range(100): state = environment.reset() done = False # Until the agent gets stuck or reaches the goal, keep training it while not done: # Choose the action with the highest value in the current state action = np.argmax(qtable[state]) # Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Update our current state state = new_state # When we get a reward, it means we solved the game nb_success += reward # Let&#39;s check our success rate! print (f&quot;Success rate = {nb_success/episodes*100}%&quot;) . Success rate = 100.0% . Phew, it&#39;s another 100% success rate! We didn&#39;t degrade the model. 😌 The benefits of this approach might not be obvious in this example, but our model became less static and more flexible. It learned different paths (sequences of actions) from S to G instead of just one as in the previous approach. More exploration can degrade performance but it&#39;s necessary to train agents that can adapt to new environments. . &#10052;&#65039; IV. Challenge: slippery Frozen Lake . We didn&#39;t solve the entire ❄️Frozen Lake environment: we only trained an agent on the non-slippery version, using is_slippery = False during initilization. In the slippery variant, the action the agent takes only has 33% chance of succeeding. In case of failure, one of the three other actions is randomly taken instead. This feature adds a lot of randomness to the training, which makes things more difficult for our agent. Let&#39;s see how well our code is doing in this new environment... . environment = gym.make(&quot;FrozenLake-v1&quot;, is_slippery=True) environment.reset() # We re-initialize the Q-table qtable = np.zeros((environment.observation_space.n, environment.action_space.n)) # Hyperparameters episodes = 1000 # Total number of episodes alpha = 0.5 # Learning rate gamma = 0.9 # Discount factor epsilon = 1.0 # Amount of randomness in the action selection epsilon_decay = 0.001 # Fixed amount to decrease # List of outcomes to plot outcomes = [] print(&#39;Q-table before training:&#39;) print(qtable) # Training for _ in range(episodes): state = environment.reset() done = False # By default, we consider our outcome to be a failure outcomes.append(&quot;Failure&quot;) # Until the agent gets stuck in a hole or reaches the goal, keep training it while not done: # Generate a random number between 0 and 1 rnd = np.random.random() # If random number &lt; epsilon, take a random action if rnd &lt; epsilon: action = environment.action_space.sample() # Else, take the action with the highest value in the current state else: action = np.argmax(qtable[state]) # Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Update Q(s,a) qtable[state, action] = qtable[state, action] + alpha * (reward + gamma * np.max(qtable[new_state]) - qtable[state, action]) # Update our current state state = new_state # If we have a reward, it means that our outcome is a success if reward: outcomes[-1] = &quot;Success&quot; # Update epsilon epsilon = max(epsilon - epsilon_decay, 0) print() print(&#39;===========================================&#39;) print(&#39;Q-table after training:&#39;) print(qtable) # Plot outcomes plt.figure(figsize=(12, 5)) plt.xlabel(&quot;Run number&quot;) plt.ylabel(&quot;Outcome&quot;) ax = plt.gca() ax.set_facecolor(&#39;#efeeea&#39;) plt.bar(range(len(outcomes)), outcomes, color=&quot;#0A047A&quot;, width=1.0) plt.show() episodes = 100 nb_success = 0 # Evaluation for _ in range(100): state = environment.reset() done = False # Until the agent gets stuck or reaches the goal, keep training it while not done: # Choose the action with the highest value in the current state action = np.argmax(qtable[state]) # Implement this action and move the agent in the desired direction new_state, reward, done, info = environment.step(action) # Update our current state state = new_state # When we get a reward, it means we solved the game nb_success += reward # Let&#39;s check our success rate! print (f&quot;Success rate = {nb_success/episodes*100}%&quot;) . Q-table before training: [[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]] =========================================== Q-table after training: [[0.06208723 0.02559574 0.02022059 0.01985828] [0.01397208 0.01425862 0.01305446 0.03333396] [0.01318348 0.01294602 0.01356014 0.01461235] [0.01117016 0.00752795 0.00870601 0.01278227] [0.08696239 0.01894036 0.01542694 0.02307306] [0. 0. 0. 0. ] [0.09027682 0.00490451 0.00793372 0.00448314] [0. 0. 0. 0. ] [0.03488138 0.03987256 0.05172554 0.10780482] [0.12444437 0.12321815 0.06462294 0.07084008] [0.13216145 0.09460133 0.09949734 0.08022573] [0. 0. 0. 0. ] [0. 0. 0. 0. ] [0.1606242 0.18174032 0.16636549 0.11444442] [0.4216631 0.42345944 0.40825367 0.74082329] [0. 0. 0. 0. ]] . Success rate = 17.0% . Oof it&#39;s not so good. But can you improve the performance by tweaking the different parameters we talked about? I encourage you to take this little challenge and do it on your own to have fun with reinforcement learning and check if you understood everything we said about Q-learning. And why not implementing exponential decay for the epsilon-greedy algorithm too? During this quick exercise, you might realise that slightly modifying the hyperparameters can completely destroy the results. This is another quirk of reinforcement learning: hyperparameters are quite moody, and it is important to understand their meaning if you want to tweak them. It&#39;s always good to test and try new combinations to build your intuition and become more efficient. Good luck and have fun! . &#128282; V. Conclusion . Q-learning is a simple yet powerful algorithm at the core of reinforcement learning. In this article, . We learned to interact with the gym environment to choose actions and move our agent; | We introduced the idea of a Q-table, where rows are states, columns are actions, and cells are the value of an action in a given state; | We experimentally recreated the Q-learning update formula to tackle the sparse reward problem; | We implemented an entire training and evaluation process, that solved the ❄️Frozen Lake environment with 100% sucess rate; | We implemented the famous epsilon-greedy algorithm in order to create a tradeoff between the exploration of unknown state-action pairs and the exploitation of the most successful ones. | . The ❄️Frozen Lake is a very simple environment, but others can have so many states and actions that it becomes impossible to store the Q-table in memory. This is especially the case in environments where events are not discrete, but continuous (like Super Mario Bros. or Minecraft). When the problem arises, a popular technique consists of training a deep neural network to approximate the Q-table. This method adds several layers of complexity, since the neural networks are not very stable. But I will cover it in another tutorial with different techniques to stabilize them. . Until then, share this article if it helped you and follow me on Twitter and Medium for more practical content around machine learning and deep learning. 📣 .",
            "url": "https://mlabonne.github.io/blog/reinforcement%20learning/q-learning/frozen%20lake/gym/tutorial/2022/02/13/Q_learning.html",
            "relUrl": "/reinforcement%20learning/q-learning/frozen%20lake/gym/tutorial/2022/02/13/Q_learning.html",
            "date": " • Feb 13, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "👋 Hi, my name is Maxime Labonne and I’m a research scientist in machine learning &amp; deep learning at ✈️ Airbus Defence and Space. I have a PhD in machine learning applied to cyber security from the Polytechnic Institute of Paris (number 49 in QS World University Rankings). I’ve worked for the French Atomic Energy Commission, where I developed new machine learning architectures dedicated to anomaly detection and that are now sold and used in various industrial, national, and European projects. . In this blog, I want to write tutorials and guides about AI in a different way. I want to start with practice and implementation, and then move on to explanations. Even better, I would like to experimentally retrace the thought process of the original authors of the algorithms we use everyday to understand their design, the importance of each component, rather than using them as black boxes. Implementation is at the core of this process, since it is only by implementing by yourself that you discover all the assumptions and other details that are often ignored, but that also explain a lot. Finally, I think this process is fun and allows you to practice tackling difficult problems to design new and suitable machine learning solutions. . I hope we can have fun together and learn a few things along the way. :) . . Credits: . Thanks to Hamel Husain and all the contributors of fastpages that powers this blog. License: Apache License 2.0. | Emojis used in figures are designed by OpenMoji, the open-source emoji and icon project. License: CC BY-SA 4.0. | Vector icons are provided by Streamline (https://streamlinehq.com). License: CC BY-SA 4.0. | .",
          "url": "https://mlabonne.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mlabonne.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}